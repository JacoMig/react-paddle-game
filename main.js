!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=26)}([function(e,t,n){(function(t){e.exports=function e(t,n,r){function o(a,l){if(!n[a]){if(!t[a]){if(i)return i(a,!0);var s=new Error("Cannot find module '"+a+"'");throw s.code="MODULE_NOT_FOUND",s}var u=n[a]={exports:{}};t[a][0].call(u.exports,(function(e){return o(t[a][1][e]||e)}),u,u.exports,e,t,n,r)}return n[a].exports}for(var i=!1,a=0;a<r.length;a++)o(r[a]);return o}({1:[function(e,t,n){var r={};t.exports=r;var o=e("../geometry/Vertices"),i=e("../geometry/Vector"),a=e("../core/Sleeping"),l=(e("../render/Render"),e("../core/Common")),s=e("../geometry/Bounds"),u=e("../geometry/Axes");!function(){r._inertiaScale=4,r._nextCollidingGroupId=1,r._nextNonCollidingGroupId=-1,r._nextCategory=1,r.create=function(t){var n={id:l.nextId(),type:"body",label:"Body",parts:[],plugin:{},angle:0,vertices:o.fromPath("L 0 0 L 40 0 L 40 40 L 0 40"),position:{x:0,y:0},force:{x:0,y:0},torque:0,positionImpulse:{x:0,y:0},constraintImpulse:{x:0,y:0,angle:0},totalContacts:0,speed:0,angularSpeed:0,velocity:{x:0,y:0},angularVelocity:0,isSensor:!1,isStatic:!1,isSleeping:!1,motion:0,sleepThreshold:60,density:.001,restitution:0,friction:.1,frictionStatic:.5,frictionAir:.01,collisionFilter:{category:1,mask:4294967295,group:0},slop:.05,timeScale:1,render:{visible:!0,opacity:1,sprite:{xScale:1,yScale:1,xOffset:0,yOffset:0},lineWidth:0}},r=l.extend(n,t);return e(r,t),r},r.nextGroup=function(e){return e?r._nextNonCollidingGroupId--:r._nextCollidingGroupId++},r.nextCategory=function(){return r._nextCategory=r._nextCategory<<1,r._nextCategory};var e=function(e,t){t=t||{},r.set(e,{bounds:e.bounds||s.create(e.vertices),positionPrev:e.positionPrev||i.clone(e.position),anglePrev:e.anglePrev||e.angle,vertices:e.vertices,parts:e.parts||[e],isStatic:e.isStatic,isSleeping:e.isSleeping,parent:e.parent||e}),o.rotate(e.vertices,e.angle,e.position),u.rotate(e.axes,e.angle),s.update(e.bounds,e.vertices,e.velocity),r.set(e,{axes:t.axes||e.axes,area:t.area||e.area,mass:t.mass||e.mass,inertia:t.inertia||e.inertia});var n=e.isStatic?"#2e2b44":l.choose(["#006BA6","#0496FF","#FFBC42","#D81159","#8F2D56"]);e.render.fillStyle=e.render.fillStyle||n,e.render.strokeStyle=e.render.strokeStyle||"#000",e.render.sprite.xOffset+=-(e.bounds.min.x-e.position.x)/(e.bounds.max.x-e.bounds.min.x),e.render.sprite.yOffset+=-(e.bounds.min.y-e.position.y)/(e.bounds.max.y-e.bounds.min.y)};r.set=function(e,t,n){var o;for(o in"string"==typeof t&&(o=t,(t={})[o]=n),t)if(n=t[o],t.hasOwnProperty(o))switch(o){case"isStatic":r.setStatic(e,n);break;case"isSleeping":a.set(e,n);break;case"mass":r.setMass(e,n);break;case"density":r.setDensity(e,n);break;case"inertia":r.setInertia(e,n);break;case"vertices":r.setVertices(e,n);break;case"position":r.setPosition(e,n);break;case"angle":r.setAngle(e,n);break;case"velocity":r.setVelocity(e,n);break;case"angularVelocity":r.setAngularVelocity(e,n);break;case"parts":r.setParts(e,n);break;default:e[o]=n}},r.setStatic=function(e,t){for(var n=0;n<e.parts.length;n++){var r=e.parts[n];r.isStatic=t,t?(r._original={restitution:r.restitution,friction:r.friction,mass:r.mass,inertia:r.inertia,density:r.density,inverseMass:r.inverseMass,inverseInertia:r.inverseInertia},r.restitution=0,r.friction=1,r.mass=r.inertia=r.density=1/0,r.inverseMass=r.inverseInertia=0,r.positionPrev.x=r.position.x,r.positionPrev.y=r.position.y,r.anglePrev=r.angle,r.angularVelocity=0,r.speed=0,r.angularSpeed=0,r.motion=0):r._original&&(r.restitution=r._original.restitution,r.friction=r._original.friction,r.mass=r._original.mass,r.inertia=r._original.inertia,r.density=r._original.density,r.inverseMass=r._original.inverseMass,r.inverseInertia=r._original.inverseInertia,delete r._original)}},r.setMass=function(e,t){var n=e.inertia/(e.mass/6);e.inertia=n*(t/6),e.inverseInertia=1/e.inertia,e.mass=t,e.inverseMass=1/e.mass,e.density=e.mass/e.area},r.setDensity=function(e,t){r.setMass(e,t*e.area),e.density=t},r.setInertia=function(e,t){e.inertia=t,e.inverseInertia=1/e.inertia},r.setVertices=function(e,t){t[0].body===e?e.vertices=t:e.vertices=o.create(t,e),e.axes=u.fromVertices(e.vertices),e.area=o.area(e.vertices),r.setMass(e,e.density*e.area);var n=o.centre(e.vertices);o.translate(e.vertices,n,-1),r.setInertia(e,r._inertiaScale*o.inertia(e.vertices,e.mass)),o.translate(e.vertices,e.position),s.update(e.bounds,e.vertices,e.velocity)},r.setParts=function(e,t,n){var i;for(t=t.slice(0),e.parts.length=0,e.parts.push(e),e.parent=e,i=0;i<t.length;i++){var a=t[i];a!==e&&(a.parent=e,e.parts.push(a))}if(1!==e.parts.length){if(n=void 0===n||n){var l=[];for(i=0;i<t.length;i++)l=l.concat(t[i].vertices);o.clockwiseSort(l);var s=o.hull(l),u=o.centre(s);r.setVertices(e,s),o.translate(e.vertices,u)}var c=r._totalProperties(e);e.area=c.area,e.parent=e,e.position.x=c.centre.x,e.position.y=c.centre.y,e.positionPrev.x=c.centre.x,e.positionPrev.y=c.centre.y,r.setMass(e,c.mass),r.setInertia(e,c.inertia),r.setPosition(e,c.centre)}},r.setPosition=function(e,t){var n=i.sub(t,e.position);e.positionPrev.x+=n.x,e.positionPrev.y+=n.y;for(var r=0;r<e.parts.length;r++){var a=e.parts[r];a.position.x+=n.x,a.position.y+=n.y,o.translate(a.vertices,n),s.update(a.bounds,a.vertices,e.velocity)}},r.setAngle=function(e,t){var n=t-e.angle;e.anglePrev+=n;for(var r=0;r<e.parts.length;r++){var a=e.parts[r];a.angle+=n,o.rotate(a.vertices,n,e.position),u.rotate(a.axes,n),s.update(a.bounds,a.vertices,e.velocity),r>0&&i.rotateAbout(a.position,n,e.position,a.position)}},r.setVelocity=function(e,t){e.positionPrev.x=e.position.x-t.x,e.positionPrev.y=e.position.y-t.y,e.velocity.x=t.x,e.velocity.y=t.y,e.speed=i.magnitude(e.velocity)},r.setAngularVelocity=function(e,t){e.anglePrev=e.angle-t,e.angularVelocity=t,e.angularSpeed=Math.abs(e.angularVelocity)},r.translate=function(e,t){r.setPosition(e,i.add(e.position,t))},r.rotate=function(e,t,n){if(n){var o=Math.cos(t),i=Math.sin(t),a=e.position.x-n.x,l=e.position.y-n.y;r.setPosition(e,{x:n.x+(a*o-l*i),y:n.y+(a*i+l*o)}),r.setAngle(e,e.angle+t)}else r.setAngle(e,e.angle+t)},r.scale=function(e,t,n,i){var a=0,l=0;i=i||e.position;for(var c=0;c<e.parts.length;c++){var f=e.parts[c];o.scale(f.vertices,t,n,i),f.axes=u.fromVertices(f.vertices),f.area=o.area(f.vertices),r.setMass(f,e.density*f.area),o.translate(f.vertices,{x:-f.position.x,y:-f.position.y}),r.setInertia(f,r._inertiaScale*o.inertia(f.vertices,f.mass)),o.translate(f.vertices,{x:f.position.x,y:f.position.y}),c>0&&(a+=f.area,l+=f.inertia),f.position.x=i.x+(f.position.x-i.x)*t,f.position.y=i.y+(f.position.y-i.y)*n,s.update(f.bounds,f.vertices,e.velocity)}e.parts.length>1&&(e.area=a,e.isStatic||(r.setMass(e,e.density*a),r.setInertia(e,l))),e.circleRadius&&(t===n?e.circleRadius*=t:e.circleRadius=null)},r.update=function(e,t,n,r){var a=Math.pow(t*n*e.timeScale,2),l=1-e.frictionAir*n*e.timeScale,c=e.position.x-e.positionPrev.x,f=e.position.y-e.positionPrev.y;e.velocity.x=c*l*r+e.force.x/e.mass*a,e.velocity.y=f*l*r+e.force.y/e.mass*a,e.positionPrev.x=e.position.x,e.positionPrev.y=e.position.y,e.position.x+=e.velocity.x,e.position.y+=e.velocity.y,e.angularVelocity=(e.angle-e.anglePrev)*l*r+e.torque/e.inertia*a,e.anglePrev=e.angle,e.angle+=e.angularVelocity,e.speed=i.magnitude(e.velocity),e.angularSpeed=Math.abs(e.angularVelocity);for(var d=0;d<e.parts.length;d++){var p=e.parts[d];o.translate(p.vertices,e.velocity),d>0&&(p.position.x+=e.velocity.x,p.position.y+=e.velocity.y),0!==e.angularVelocity&&(o.rotate(p.vertices,e.angularVelocity,e.position),u.rotate(p.axes,e.angularVelocity),d>0&&i.rotateAbout(p.position,e.angularVelocity,e.position,p.position)),s.update(p.bounds,p.vertices,e.velocity)}},r.applyForce=function(e,t,n){e.force.x+=n.x,e.force.y+=n.y;var r=t.x-e.position.x,o=t.y-e.position.y;e.torque+=r*n.y-o*n.x},r._totalProperties=function(e){for(var t={mass:0,area:0,inertia:0,centre:{x:0,y:0}},n=1===e.parts.length?0:1;n<e.parts.length;n++){var r=e.parts[n],o=r.mass!==1/0?r.mass:1;t.mass+=o,t.area+=r.area,t.inertia+=r.inertia,t.centre=i.add(t.centre,i.mult(r.position,o))}return t.centre=i.div(t.centre,t.mass),t}}()},{"../core/Common":14,"../core/Sleeping":22,"../geometry/Axes":25,"../geometry/Bounds":26,"../geometry/Vector":28,"../geometry/Vertices":29,"../render/Render":31}],2:[function(e,t,n){var r={};t.exports=r;var o=e("../core/Events"),i=e("../core/Common"),a=e("../geometry/Bounds"),l=e("./Body");r.create=function(e){return i.extend({id:i.nextId(),type:"composite",parent:null,isModified:!1,bodies:[],constraints:[],composites:[],label:"Composite",plugin:{}},e)},r.setModified=function(e,t,n,o){if(e.isModified=t,n&&e.parent&&r.setModified(e.parent,t,n,o),o)for(var i=0;i<e.composites.length;i++){var a=e.composites[i];r.setModified(a,t,n,o)}},r.add=function(e,t){var n=[].concat(t);o.trigger(e,"beforeAdd",{object:t});for(var a=0;a<n.length;a++){var l=n[a];switch(l.type){case"body":if(l.parent!==l){i.warn("Composite.add: skipped adding a compound body part (you must add its parent instead)");break}r.addBody(e,l);break;case"constraint":r.addConstraint(e,l);break;case"composite":r.addComposite(e,l);break;case"mouseConstraint":r.addConstraint(e,l.constraint)}}return o.trigger(e,"afterAdd",{object:t}),e},r.remove=function(e,t,n){var i=[].concat(t);o.trigger(e,"beforeRemove",{object:t});for(var a=0;a<i.length;a++){var l=i[a];switch(l.type){case"body":r.removeBody(e,l,n);break;case"constraint":r.removeConstraint(e,l,n);break;case"composite":r.removeComposite(e,l,n);break;case"mouseConstraint":r.removeConstraint(e,l.constraint)}}return o.trigger(e,"afterRemove",{object:t}),e},r.addComposite=function(e,t){return e.composites.push(t),t.parent=e,r.setModified(e,!0,!0,!1),e},r.removeComposite=function(e,t,n){var o=i.indexOf(e.composites,t);if(-1!==o&&(r.removeCompositeAt(e,o),r.setModified(e,!0,!0,!1)),n)for(var a=0;a<e.composites.length;a++)r.removeComposite(e.composites[a],t,!0);return e},r.removeCompositeAt=function(e,t){return e.composites.splice(t,1),r.setModified(e,!0,!0,!1),e},r.addBody=function(e,t){return e.bodies.push(t),r.setModified(e,!0,!0,!1),e},r.removeBody=function(e,t,n){var o=i.indexOf(e.bodies,t);if(-1!==o&&(r.removeBodyAt(e,o),r.setModified(e,!0,!0,!1)),n)for(var a=0;a<e.composites.length;a++)r.removeBody(e.composites[a],t,!0);return e},r.removeBodyAt=function(e,t){return e.bodies.splice(t,1),r.setModified(e,!0,!0,!1),e},r.addConstraint=function(e,t){return e.constraints.push(t),r.setModified(e,!0,!0,!1),e},r.removeConstraint=function(e,t,n){var o=i.indexOf(e.constraints,t);if(-1!==o&&r.removeConstraintAt(e,o),n)for(var a=0;a<e.composites.length;a++)r.removeConstraint(e.composites[a],t,!0);return e},r.removeConstraintAt=function(e,t){return e.constraints.splice(t,1),r.setModified(e,!0,!0,!1),e},r.clear=function(e,t,n){if(n)for(var o=0;o<e.composites.length;o++)r.clear(e.composites[o],t,!0);return t?e.bodies=e.bodies.filter((function(e){return e.isStatic})):e.bodies.length=0,e.constraints.length=0,e.composites.length=0,r.setModified(e,!0,!0,!1),e},r.allBodies=function(e){for(var t=[].concat(e.bodies),n=0;n<e.composites.length;n++)t=t.concat(r.allBodies(e.composites[n]));return t},r.allConstraints=function(e){for(var t=[].concat(e.constraints),n=0;n<e.composites.length;n++)t=t.concat(r.allConstraints(e.composites[n]));return t},r.allComposites=function(e){for(var t=[].concat(e.composites),n=0;n<e.composites.length;n++)t=t.concat(r.allComposites(e.composites[n]));return t},r.get=function(e,t,n){var o,i;switch(n){case"body":o=r.allBodies(e);break;case"constraint":o=r.allConstraints(e);break;case"composite":o=r.allComposites(e).concat(e)}return o?0===(i=o.filter((function(e){return e.id.toString()===t.toString()}))).length?null:i[0]:null},r.move=function(e,t,n){return r.remove(e,t),r.add(n,t),e},r.rebase=function(e){for(var t=r.allBodies(e).concat(r.allConstraints(e)).concat(r.allComposites(e)),n=0;n<t.length;n++)t[n].id=i.nextId();return r.setModified(e,!0,!0,!1),e},r.translate=function(e,t,n){for(var o=n?r.allBodies(e):e.bodies,i=0;i<o.length;i++)l.translate(o[i],t);return r.setModified(e,!0,!0,!1),e},r.rotate=function(e,t,n,o){for(var i=Math.cos(t),a=Math.sin(t),s=o?r.allBodies(e):e.bodies,u=0;u<s.length;u++){var c=s[u],f=c.position.x-n.x,d=c.position.y-n.y;l.setPosition(c,{x:n.x+(f*i-d*a),y:n.y+(f*a+d*i)}),l.rotate(c,t)}return r.setModified(e,!0,!0,!1),e},r.scale=function(e,t,n,o,i){for(var a=i?r.allBodies(e):e.bodies,s=0;s<a.length;s++){var u=a[s],c=u.position.x-o.x,f=u.position.y-o.y;l.setPosition(u,{x:o.x+c*t,y:o.y+f*n}),l.scale(u,t,n)}return r.setModified(e,!0,!0,!1),e},r.bounds=function(e){for(var t=r.allBodies(e),n=[],o=0;o<t.length;o+=1){var i=t[o];n.push(i.bounds.min,i.bounds.max)}return a.create(n)}},{"../core/Common":14,"../core/Events":16,"../geometry/Bounds":26,"./Body":1}],3:[function(e,t,n){var r={};t.exports=r;var o=e("./Composite"),i=(e("../constraint/Constraint"),e("../core/Common"));r.create=function(e){var t=o.create(),n={label:"World",gravity:{x:0,y:1,scale:.001},bounds:{min:{x:-1/0,y:-1/0},max:{x:1/0,y:1/0}}};return i.extend(t,n,e)}},{"../constraint/Constraint":12,"../core/Common":14,"./Composite":2}],4:[function(e,t,n){var r={};t.exports=r,r.create=function(e){return{id:r.id(e),vertex:e,normalImpulse:0,tangentImpulse:0}},r.id=function(e){return e.body.id+"_"+e.index}},{}],5:[function(e,t,n){var r={};t.exports=r;var o=e("./SAT"),i=e("./Pair"),a=e("../geometry/Bounds");r.collisions=function(e,t){for(var n=[],l=t.pairs.table,s=0;s<e.length;s++){var u=e[s][0],c=e[s][1];if((!u.isStatic&&!u.isSleeping||!c.isStatic&&!c.isSleeping)&&r.canCollide(u.collisionFilter,c.collisionFilter)&&a.overlaps(u.bounds,c.bounds))for(var f=u.parts.length>1?1:0;f<u.parts.length;f++)for(var d=u.parts[f],p=c.parts.length>1?1:0;p<c.parts.length;p++){var m=c.parts[p];if(d===u&&m===c||a.overlaps(d.bounds,m.bounds)){var y,h=l[i.id(d,m)];y=h&&h.isActive?h.collision:null;var v=o.collides(d,m,y);v.collided&&n.push(v)}}}return n},r.canCollide=function(e,t){return e.group===t.group&&0!==e.group?e.group>0:0!=(e.mask&t.category)&&0!=(t.mask&e.category)}},{"../geometry/Bounds":26,"./Pair":7,"./SAT":11}],6:[function(e,t,n){var r={};t.exports=r;var o=e("./Pair"),i=e("./Detector"),a=e("../core/Common");r.create=function(e){var t={controller:r,detector:i.collisions,buckets:{},pairs:{},pairsList:[],bucketWidth:48,bucketHeight:48};return a.extend(t,e)},r.update=function(e,t,n,o){var i,a,l,s,u,c=n.world,f=e.buckets,d=!1;for(i=0;i<t.length;i++){var p=t[i];if((!p.isSleeping||o)&&!(p.bounds.max.x<c.bounds.min.x||p.bounds.min.x>c.bounds.max.x||p.bounds.max.y<c.bounds.min.y||p.bounds.min.y>c.bounds.max.y)){var m=r._getRegion(e,p);if(!p.region||m.id!==p.region.id||o){p.region&&!o||(p.region=m);var y=r._regionUnion(m,p.region);for(a=y.startCol;a<=y.endCol;a++)for(l=y.startRow;l<=y.endRow;l++){s=f[u=r._getBucketId(a,l)];var h=a>=m.startCol&&a<=m.endCol&&l>=m.startRow&&l<=m.endRow,v=a>=p.region.startCol&&a<=p.region.endCol&&l>=p.region.startRow&&l<=p.region.endRow;!h&&v&&v&&s&&r._bucketRemoveBody(e,s,p),(p.region===m||h&&!v||o)&&(s||(s=r._createBucket(f,u)),r._bucketAddBody(e,s,p))}p.region=m,d=!0}}}d&&(e.pairsList=r._createActivePairsList(e))},r.clear=function(e){e.buckets={},e.pairs={},e.pairsList=[]},r._regionUnion=function(e,t){var n=Math.min(e.startCol,t.startCol),o=Math.max(e.endCol,t.endCol),i=Math.min(e.startRow,t.startRow),a=Math.max(e.endRow,t.endRow);return r._createRegion(n,o,i,a)},r._getRegion=function(e,t){var n=t.bounds,o=Math.floor(n.min.x/e.bucketWidth),i=Math.floor(n.max.x/e.bucketWidth),a=Math.floor(n.min.y/e.bucketHeight),l=Math.floor(n.max.y/e.bucketHeight);return r._createRegion(o,i,a,l)},r._createRegion=function(e,t,n,r){return{id:e+","+t+","+n+","+r,startCol:e,endCol:t,startRow:n,endRow:r}},r._getBucketId=function(e,t){return"C"+e+"R"+t},r._createBucket=function(e,t){return e[t]=[]},r._bucketAddBody=function(e,t,n){for(var r=0;r<t.length;r++){var i=t[r];if(!(n.id===i.id||n.isStatic&&i.isStatic)){var a=o.id(n,i),l=e.pairs[a];l?l[2]+=1:e.pairs[a]=[n,i,1]}}t.push(n)},r._bucketRemoveBody=function(e,t,n){t.splice(a.indexOf(t,n),1);for(var r=0;r<t.length;r++){var i=t[r],l=o.id(n,i),s=e.pairs[l];s&&(s[2]-=1)}},r._createActivePairsList=function(e){var t,n,r=[];t=a.keys(e.pairs);for(var o=0;o<t.length;o++)(n=e.pairs[t[o]])[2]>0?r.push(n):delete e.pairs[t[o]];return r}},{"../core/Common":14,"./Detector":5,"./Pair":7}],7:[function(e,t,n){var r={};t.exports=r;var o=e("./Contact");r.create=function(e,t){var n=e.bodyA,o=e.bodyB,i=e.parentA,a=e.parentB,l={id:r.id(n,o),bodyA:n,bodyB:o,contacts:{},activeContacts:[],separation:0,isActive:!0,isSensor:n.isSensor||o.isSensor,timeCreated:t,timeUpdated:t,inverseMass:i.inverseMass+a.inverseMass,friction:Math.min(i.friction,a.friction),frictionStatic:Math.max(i.frictionStatic,a.frictionStatic),restitution:Math.max(i.restitution,a.restitution),slop:Math.max(i.slop,a.slop)};return r.update(l,e,t),l},r.update=function(e,t,n){var i=e.contacts,a=t.supports,l=e.activeContacts,s=t.parentA,u=t.parentB;if(e.collision=t,e.inverseMass=s.inverseMass+u.inverseMass,e.friction=Math.min(s.friction,u.friction),e.frictionStatic=Math.max(s.frictionStatic,u.frictionStatic),e.restitution=Math.max(s.restitution,u.restitution),e.slop=Math.max(s.slop,u.slop),l.length=0,t.collided){for(var c=0;c<a.length;c++){var f=a[c],d=o.id(f),p=i[d];p?l.push(p):l.push(i[d]=o.create(f))}e.separation=t.depth,r.setActive(e,!0,n)}else!0===e.isActive&&r.setActive(e,!1,n)},r.setActive=function(e,t,n){t?(e.isActive=!0,e.timeUpdated=n):(e.isActive=!1,e.activeContacts.length=0)},r.id=function(e,t){return e.id<t.id?"A"+e.id+"B"+t.id:"A"+t.id+"B"+e.id}},{"./Contact":4}],8:[function(e,t,n){var r={};t.exports=r;var o=e("./Pair"),i=e("../core/Common");r._pairMaxIdleLife=1e3,r.create=function(e){return i.extend({table:{},list:[],collisionStart:[],collisionActive:[],collisionEnd:[]},e)},r.update=function(e,t,n){var r,a,l,s,u=e.list,c=e.table,f=e.collisionStart,d=e.collisionEnd,p=e.collisionActive,m=[];for(f.length=0,d.length=0,p.length=0,s=0;s<t.length;s++)(r=t[s]).collided&&(a=o.id(r.bodyA,r.bodyB),m.push(a),(l=c[a])?(l.isActive?p.push(l):f.push(l),o.update(l,r,n)):(l=o.create(r,n),c[a]=l,f.push(l),u.push(l)));for(s=0;s<u.length;s++)(l=u[s]).isActive&&-1===i.indexOf(m,l.id)&&(o.setActive(l,!1,n),d.push(l))},r.removeOld=function(e,t){var n,o,i,a,l=e.list,s=e.table,u=[];for(a=0;a<l.length;a++)(o=(n=l[a]).collision).bodyA.isSleeping||o.bodyB.isSleeping?n.timeUpdated=t:t-n.timeUpdated>r._pairMaxIdleLife&&u.push(a);for(a=0;a<u.length;a++)delete s[(n=l[i=u[a]-a]).id],l.splice(i,1)},r.clear=function(e){return e.table={},e.list.length=0,e.collisionStart.length=0,e.collisionActive.length=0,e.collisionEnd.length=0,e}},{"../core/Common":14,"./Pair":7}],9:[function(e,t,n){var r={};t.exports=r;var o=e("../geometry/Vector"),i=e("./SAT"),a=e("../geometry/Bounds"),l=e("../factory/Bodies"),s=e("../geometry/Vertices");r.collides=function(e,t){for(var n=[],r=0;r<t.length;r++){var o=t[r];if(a.overlaps(o.bounds,e.bounds))for(var l=1===o.parts.length?0:1;l<o.parts.length;l++){var s=o.parts[l];if(a.overlaps(s.bounds,e.bounds)){var u=i.collides(s,e);if(u.collided){n.push(u);break}}}}return n},r.ray=function(e,t,n,i){i=i||1e-100;for(var a=o.angle(t,n),s=o.magnitude(o.sub(t,n)),u=.5*(n.x+t.x),c=.5*(n.y+t.y),f=l.rectangle(u,c,s,i,{angle:a}),d=r.collides(f,e),p=0;p<d.length;p+=1){var m=d[p];m.body=m.bodyB=m.bodyA}return d},r.region=function(e,t,n){for(var r=[],o=0;o<e.length;o++){var i=e[o],l=a.overlaps(i.bounds,t);(l&&!n||!l&&n)&&r.push(i)}return r},r.point=function(e,t){for(var n=[],r=0;r<e.length;r++){var o=e[r];if(a.contains(o.bounds,t))for(var i=1===o.parts.length?0:1;i<o.parts.length;i++){var l=o.parts[i];if(a.contains(l.bounds,t)&&s.contains(l.vertices,t)){n.push(o);break}}}return n}},{"../factory/Bodies":23,"../geometry/Bounds":26,"../geometry/Vector":28,"../geometry/Vertices":29,"./SAT":11}],10:[function(e,t,n){var r={};t.exports=r;var o=e("../geometry/Vertices"),i=e("../geometry/Vector"),a=e("../core/Common"),l=e("../geometry/Bounds");r._restingThresh=4,r._restingThreshTangent=6,r._positionDampen=.9,r._positionWarming=.8,r._frictionNormalMultiplier=5,r.preSolvePosition=function(e){var t,n,r;for(t=0;t<e.length;t++)(n=e[t]).isActive&&(r=n.activeContacts.length,n.collision.parentA.totalContacts+=r,n.collision.parentB.totalContacts+=r)},r.solvePosition=function(e,t){var n,o,a,l,s,u,c,f,d,p=i._temp[0],m=i._temp[1],y=i._temp[2],h=i._temp[3];for(n=0;n<e.length;n++)(o=e[n]).isActive&&!o.isSensor&&(l=(a=o.collision).parentA,s=a.parentB,u=a.normal,c=i.sub(i.add(s.positionImpulse,s.position,p),i.add(l.positionImpulse,i.sub(s.position,a.penetration,m),y),h),o.separation=i.dot(u,c));for(n=0;n<e.length;n++)(o=e[n]).isActive&&!o.isSensor&&(l=(a=o.collision).parentA,s=a.parentB,u=a.normal,d=(o.separation-o.slop)*t,(l.isStatic||s.isStatic)&&(d*=2),l.isStatic||l.isSleeping||(f=r._positionDampen/l.totalContacts,l.positionImpulse.x+=u.x*d*f,l.positionImpulse.y+=u.y*d*f),s.isStatic||s.isSleeping||(f=r._positionDampen/s.totalContacts,s.positionImpulse.x-=u.x*d*f,s.positionImpulse.y-=u.y*d*f))},r.postSolvePosition=function(e){for(var t=0;t<e.length;t++){var n=e[t];if(n.totalContacts=0,0!==n.positionImpulse.x||0!==n.positionImpulse.y){for(var a=0;a<n.parts.length;a++){var s=n.parts[a];o.translate(s.vertices,n.positionImpulse),l.update(s.bounds,s.vertices,n.velocity),s.position.x+=n.positionImpulse.x,s.position.y+=n.positionImpulse.y}n.positionPrev.x+=n.positionImpulse.x,n.positionPrev.y+=n.positionImpulse.y,i.dot(n.positionImpulse,n.velocity)<0?(n.positionImpulse.x=0,n.positionImpulse.y=0):(n.positionImpulse.x*=r._positionWarming,n.positionImpulse.y*=r._positionWarming)}}},r.preSolveVelocity=function(e){var t,n,r,o,a,l,s,u,c,f,d,p,m,y,h=i._temp[0],v=i._temp[1];for(t=0;t<e.length;t++)if((r=e[t]).isActive&&!r.isSensor)for(o=r.activeContacts,l=(a=r.collision).parentA,s=a.parentB,u=a.normal,c=a.tangent,n=0;n<o.length;n++)d=(f=o[n]).vertex,p=f.normalImpulse,m=f.tangentImpulse,0===p&&0===m||(h.x=u.x*p+c.x*m,h.y=u.y*p+c.y*m,l.isStatic||l.isSleeping||(y=i.sub(d,l.position,v),l.positionPrev.x+=h.x*l.inverseMass,l.positionPrev.y+=h.y*l.inverseMass,l.anglePrev+=i.cross(y,h)*l.inverseInertia),s.isStatic||s.isSleeping||(y=i.sub(d,s.position,v),s.positionPrev.x-=h.x*s.inverseMass,s.positionPrev.y-=h.y*s.inverseMass,s.anglePrev-=i.cross(y,h)*s.inverseInertia))},r.solveVelocity=function(e,t){for(var n=t*t,o=i._temp[0],l=i._temp[1],s=i._temp[2],u=i._temp[3],c=i._temp[4],f=i._temp[5],d=0;d<e.length;d++){var p=e[d];if(p.isActive&&!p.isSensor){var m=p.collision,y=m.parentA,h=m.parentB,v=m.normal,g=m.tangent,b=p.activeContacts,x=1/b.length;y.velocity.x=y.position.x-y.positionPrev.x,y.velocity.y=y.position.y-y.positionPrev.y,h.velocity.x=h.position.x-h.positionPrev.x,h.velocity.y=h.position.y-h.positionPrev.y,y.angularVelocity=y.angle-y.anglePrev,h.angularVelocity=h.angle-h.anglePrev;for(var w=0;w<b.length;w++){var S=b[w],k=S.vertex,C=i.sub(k,y.position,l),T=i.sub(k,h.position,s),E=i.add(y.velocity,i.mult(i.perp(C),y.angularVelocity),u),P=i.add(h.velocity,i.mult(i.perp(T),h.angularVelocity),c),_=i.sub(E,P,f),M=i.dot(v,_),A=i.dot(g,_),O=Math.abs(A),I=a.sign(A),B=(1+p.restitution)*M,R=a.clamp(p.separation+M,0,1)*r._frictionNormalMultiplier,N=A,L=1/0;O>p.friction*p.frictionStatic*R*n&&(L=O,N=a.clamp(p.friction*I*n,-L,L));var j=i.cross(C,v),F=i.cross(T,v),D=x/(y.inverseMass+h.inverseMass+y.inverseInertia*j*j+h.inverseInertia*F*F);if(B*=D,N*=D,M<0&&M*M>r._restingThresh*n)S.normalImpulse=0;else{var z=S.normalImpulse;S.normalImpulse=Math.min(S.normalImpulse+B,0),B=S.normalImpulse-z}if(A*A>r._restingThreshTangent*n)S.tangentImpulse=0;else{var V=S.tangentImpulse;S.tangentImpulse=a.clamp(S.tangentImpulse+N,-L,L),N=S.tangentImpulse-V}o.x=v.x*B+g.x*N,o.y=v.y*B+g.y*N,y.isStatic||y.isSleeping||(y.positionPrev.x+=o.x*y.inverseMass,y.positionPrev.y+=o.y*y.inverseMass,y.anglePrev+=i.cross(C,o)*y.inverseInertia),h.isStatic||h.isSleeping||(h.positionPrev.x-=o.x*h.inverseMass,h.positionPrev.y-=o.y*h.inverseMass,h.anglePrev-=i.cross(T,o)*h.inverseInertia)}}}}},{"../core/Common":14,"../geometry/Bounds":26,"../geometry/Vector":28,"../geometry/Vertices":29}],11:[function(e,t,n){var r={};t.exports=r;var o=e("../geometry/Vertices"),i=e("../geometry/Vector");r.collides=function(e,t,n){var a,l,s,u,c=!1;if(n){var f=e.parent,d=t.parent,p=f.speed*f.speed+f.angularSpeed*f.angularSpeed+d.speed*d.speed+d.angularSpeed*d.angularSpeed;c=n&&n.collided&&p<.2,u=n}else u={collided:!1,bodyA:e,bodyB:t};if(n&&c){var m=u.axisBody,y=m===e?t:e,h=[m.axes[n.axisNumber]];if(s=r._overlapAxes(m.vertices,y.vertices,h),u.reused=!0,s.overlap<=0)return u.collided=!1,u}else{if((a=r._overlapAxes(e.vertices,t.vertices,e.axes)).overlap<=0)return u.collided=!1,u;if((l=r._overlapAxes(t.vertices,e.vertices,t.axes)).overlap<=0)return u.collided=!1,u;a.overlap<l.overlap?(s=a,u.axisBody=e):(s=l,u.axisBody=t),u.axisNumber=s.axisNumber}u.bodyA=e.id<t.id?e:t,u.bodyB=e.id<t.id?t:e,u.collided=!0,u.depth=s.overlap,u.parentA=u.bodyA.parent,u.parentB=u.bodyB.parent,e=u.bodyA,t=u.bodyB,i.dot(s.axis,i.sub(t.position,e.position))<0?u.normal={x:s.axis.x,y:s.axis.y}:u.normal={x:-s.axis.x,y:-s.axis.y},u.tangent=i.perp(u.normal),u.penetration=u.penetration||{},u.penetration.x=u.normal.x*u.depth,u.penetration.y=u.normal.y*u.depth;var v=r._findSupports(e,t,u.normal),g=[];if(o.contains(e.vertices,v[0])&&g.push(v[0]),o.contains(e.vertices,v[1])&&g.push(v[1]),g.length<2){var b=r._findSupports(t,e,i.neg(u.normal));o.contains(t.vertices,b[0])&&g.push(b[0]),g.length<2&&o.contains(t.vertices,b[1])&&g.push(b[1])}return g.length<1&&(g=[v[0]]),u.supports=g,u},r._overlapAxes=function(e,t,n){for(var o,a,l=i._temp[0],s=i._temp[1],u={overlap:Number.MAX_VALUE},c=0;c<n.length;c++){if(a=n[c],r._projectToAxis(l,e,a),r._projectToAxis(s,t,a),(o=Math.min(l.max-s.min,s.max-l.min))<=0)return u.overlap=o,u;o<u.overlap&&(u.overlap=o,u.axis=a,u.axisNumber=c)}return u},r._projectToAxis=function(e,t,n){for(var r=i.dot(t[0],n),o=r,a=1;a<t.length;a+=1){var l=i.dot(t[a],n);l>o?o=l:l<r&&(r=l)}e.min=r,e.max=o},r._findSupports=function(e,t,n){for(var r,o,a,l,s=Number.MAX_VALUE,u=i._temp[0],c=t.vertices,f=e.position,d=0;d<c.length;d++)o=c[d],u.x=o.x-f.x,u.y=o.y-f.y,(r=-i.dot(n,u))<s&&(s=r,a=o);return o=c[a.index-1>=0?a.index-1:c.length-1],u.x=o.x-f.x,u.y=o.y-f.y,s=-i.dot(n,u),l=o,o=c[(a.index+1)%c.length],u.x=o.x-f.x,u.y=o.y-f.y,(r=-i.dot(n,u))<s&&(l=o),[a,l]}},{"../geometry/Vector":28,"../geometry/Vertices":29}],12:[function(e,t,n){var r={};t.exports=r;var o=e("../geometry/Vertices"),i=e("../geometry/Vector"),a=e("../core/Sleeping"),l=e("../geometry/Bounds"),s=e("../geometry/Axes"),u=e("../core/Common");r._warming=.4,r._torqueDampen=1,r._minLength=1e-6,r.create=function(e){var t=e;t.bodyA&&!t.pointA&&(t.pointA={x:0,y:0}),t.bodyB&&!t.pointB&&(t.pointB={x:0,y:0});var n=t.bodyA?i.add(t.bodyA.position,t.pointA):t.pointA,r=t.bodyB?i.add(t.bodyB.position,t.pointB):t.pointB,o=i.magnitude(i.sub(n,r));t.length=void 0!==t.length?t.length:o,t.id=t.id||u.nextId(),t.label=t.label||"Constraint",t.type="constraint",t.stiffness=t.stiffness||(t.length>0?1:.7),t.damping=t.damping||0,t.angularStiffness=t.angularStiffness||0,t.angleA=t.bodyA?t.bodyA.angle:t.angleA,t.angleB=t.bodyB?t.bodyB.angle:t.angleB,t.plugin={};var a={visible:!0,lineWidth:2,strokeStyle:"#ffffff",type:"line",anchors:!0};return 0===t.length&&t.stiffness>.1?(a.type="pin",a.anchors=!1):t.stiffness<.9&&(a.type="spring"),t.render=u.extend(a,t.render),t},r.preSolveAll=function(e){for(var t=0;t<e.length;t+=1){var n=e[t],r=n.constraintImpulse;n.isStatic||0===r.x&&0===r.y&&0===r.angle||(n.position.x+=r.x,n.position.y+=r.y,n.angle+=r.angle)}},r.solveAll=function(e,t){for(var n=0;n<e.length;n+=1){var o=e[n],i=!o.bodyA||o.bodyA&&o.bodyA.isStatic,a=!o.bodyB||o.bodyB&&o.bodyB.isStatic;(i||a)&&r.solve(e[n],t)}for(n=0;n<e.length;n+=1)i=!(o=e[n]).bodyA||o.bodyA&&o.bodyA.isStatic,a=!o.bodyB||o.bodyB&&o.bodyB.isStatic,i||a||r.solve(e[n],t)},r.solve=function(e,t){var n=e.bodyA,o=e.bodyB,a=e.pointA,l=e.pointB;if(n||o){n&&!n.isStatic&&(i.rotate(a,n.angle-e.angleA,a),e.angleA=n.angle),o&&!o.isStatic&&(i.rotate(l,o.angle-e.angleB,l),e.angleB=o.angle);var s=a,u=l;if(n&&(s=i.add(n.position,a)),o&&(u=i.add(o.position,l)),s&&u){var c=i.sub(s,u),f=i.magnitude(c);f<r._minLength&&(f=r._minLength);var d,p,m,y,h,v=(f-e.length)/f,g=e.stiffness<1?e.stiffness*t:e.stiffness,b=i.mult(c,v*g),x=(n?n.inverseMass:0)+(o?o.inverseMass:0),w=x+((n?n.inverseInertia:0)+(o?o.inverseInertia:0));if(e.damping){var S=i.create();m=i.div(c,f),h=i.sub(o&&i.sub(o.position,o.positionPrev)||S,n&&i.sub(n.position,n.positionPrev)||S),y=i.dot(m,h)}n&&!n.isStatic&&(p=n.inverseMass/x,n.constraintImpulse.x-=b.x*p,n.constraintImpulse.y-=b.y*p,n.position.x-=b.x*p,n.position.y-=b.y*p,e.damping&&(n.positionPrev.x-=e.damping*m.x*y*p,n.positionPrev.y-=e.damping*m.y*y*p),d=i.cross(a,b)/w*r._torqueDampen*n.inverseInertia*(1-e.angularStiffness),n.constraintImpulse.angle-=d,n.angle-=d),o&&!o.isStatic&&(p=o.inverseMass/x,o.constraintImpulse.x+=b.x*p,o.constraintImpulse.y+=b.y*p,o.position.x+=b.x*p,o.position.y+=b.y*p,e.damping&&(o.positionPrev.x+=e.damping*m.x*y*p,o.positionPrev.y+=e.damping*m.y*y*p),d=i.cross(l,b)/w*r._torqueDampen*o.inverseInertia*(1-e.angularStiffness),o.constraintImpulse.angle+=d,o.angle+=d)}}},r.postSolveAll=function(e){for(var t=0;t<e.length;t++){var n=e[t],u=n.constraintImpulse;if(!(n.isStatic||0===u.x&&0===u.y&&0===u.angle)){a.set(n,!1);for(var c=0;c<n.parts.length;c++){var f=n.parts[c];o.translate(f.vertices,u),c>0&&(f.position.x+=u.x,f.position.y+=u.y),0!==u.angle&&(o.rotate(f.vertices,u.angle,n.position),s.rotate(f.axes,u.angle),c>0&&i.rotateAbout(f.position,u.angle,n.position,f.position)),l.update(f.bounds,f.vertices,n.velocity)}u.angle*=r._warming,u.x*=r._warming,u.y*=r._warming}}}},{"../core/Common":14,"../core/Sleeping":22,"../geometry/Axes":25,"../geometry/Bounds":26,"../geometry/Vector":28,"../geometry/Vertices":29}],13:[function(e,t,n){var r={};t.exports=r;var o=e("../geometry/Vertices"),i=e("../core/Sleeping"),a=e("../core/Mouse"),l=e("../core/Events"),s=e("../collision/Detector"),u=e("./Constraint"),c=e("../body/Composite"),f=e("../core/Common"),d=e("../geometry/Bounds");r.create=function(e,t){var n=(e?e.mouse:null)||(t?t.mouse:null);n||(e&&e.render&&e.render.canvas?n=a.create(e.render.canvas):t&&t.element?n=a.create(t.element):(n=a.create(),f.warn("MouseConstraint.create: options.mouse was undefined, options.element was undefined, may not function as expected")));var o={type:"mouseConstraint",mouse:n,element:null,body:null,constraint:u.create({label:"Mouse Constraint",pointA:n.position,pointB:{x:0,y:0},length:.01,stiffness:.1,angularStiffness:1,render:{strokeStyle:"#90EE90",lineWidth:3}}),collisionFilter:{category:1,mask:4294967295,group:0}},i=f.extend(o,t);return l.on(e,"beforeUpdate",(function(){var t=c.allBodies(e.world);r.update(i,t),r._triggerEvents(i)})),i},r.update=function(e,t){var n=e.mouse,r=e.constraint,a=e.body;if(0===n.button){if(r.bodyB)i.set(r.bodyB,!1),r.pointA=n.position;else for(var u=0;u<t.length;u++)if(a=t[u],d.contains(a.bounds,n.position)&&s.canCollide(a.collisionFilter,e.collisionFilter))for(var c=a.parts.length>1?1:0;c<a.parts.length;c++){var f=a.parts[c];if(o.contains(f.vertices,n.position)){r.pointA=n.position,r.bodyB=e.body=a,r.pointB={x:n.position.x-a.position.x,y:n.position.y-a.position.y},r.angleB=a.angle,i.set(a,!1),l.trigger(e,"startdrag",{mouse:n,body:a});break}}}else r.bodyB=e.body=null,r.pointB=null,a&&l.trigger(e,"enddrag",{mouse:n,body:a})},r._triggerEvents=function(e){var t=e.mouse,n=t.sourceEvents;n.mousemove&&l.trigger(e,"mousemove",{mouse:t}),n.mousedown&&l.trigger(e,"mousedown",{mouse:t}),n.mouseup&&l.trigger(e,"mouseup",{mouse:t}),a.clearSourceEvents(t)}},{"../body/Composite":2,"../collision/Detector":5,"../core/Common":14,"../core/Events":16,"../core/Mouse":19,"../core/Sleeping":22,"../geometry/Bounds":26,"../geometry/Vertices":29,"./Constraint":12}],14:[function(e,n,r){(function(t){var r={};n.exports=r,function(){r._nextId=0,r._seed=0,r._nowStartTime=+new Date,r.extend=function(e,t){var n,o;"boolean"==typeof t?(n=2,o=t):(n=1,o=!0);for(var i=n;i<arguments.length;i++){var a=arguments[i];if(a)for(var l in a)o&&a[l]&&a[l].constructor===Object?e[l]&&e[l].constructor!==Object?e[l]=a[l]:(e[l]=e[l]||{},r.extend(e[l],o,a[l])):e[l]=a[l]}return e},r.clone=function(e,t){return r.extend({},t,e)},r.keys=function(e){if(Object.keys)return Object.keys(e);var t=[];for(var n in e)t.push(n);return t},r.values=function(e){var t=[];if(Object.keys){for(var n=Object.keys(e),r=0;r<n.length;r++)t.push(e[n[r]]);return t}for(var o in e)t.push(e[o]);return t},r.get=function(e,t,n,r){t=t.split(".").slice(n,r);for(var o=0;o<t.length;o+=1)e=e[t[o]];return e},r.set=function(e,t,n,o,i){var a=t.split(".").slice(o,i);return r.get(e,t,0,-1)[a[a.length-1]]=n,n},r.shuffle=function(e){for(var t=e.length-1;t>0;t--){var n=Math.floor(r.random()*(t+1)),o=e[t];e[t]=e[n],e[n]=o}return e},r.choose=function(e){return e[Math.floor(r.random()*e.length)]},r.isElement=function(e){return"undefined"!=typeof HTMLElement?e instanceof HTMLElement:!!(e&&e.nodeType&&e.nodeName)},r.isArray=function(e){return"[object Array]"===Object.prototype.toString.call(e)},r.isFunction=function(e){return"function"==typeof e},r.isPlainObject=function(e){return"object"==typeof e&&e.constructor===Object},r.isString=function(e){return"[object String]"===toString.call(e)},r.clamp=function(e,t,n){return e<t?t:e>n?n:e},r.sign=function(e){return e<0?-1:1},r.now=function(){if(window.performance){if(window.performance.now)return window.performance.now();if(window.performance.webkitNow)return window.performance.webkitNow()}return new Date-r._nowStartTime},r.random=function(e,t){return t=void 0!==t?t:1,(e=void 0!==e?e:0)+n()*(t-e)};var n=function(){return r._seed=(9301*r._seed+49297)%233280,r._seed/233280};r.colorToNumber=function(e){return 3==(e=e.replace("#","")).length&&(e=e.charAt(0)+e.charAt(0)+e.charAt(1)+e.charAt(1)+e.charAt(2)+e.charAt(2)),parseInt(e,16)},r.logLevel=1,r.log=function(){console&&r.logLevel>0&&r.logLevel<=3&&console.log.apply(console,["matter-js:"].concat(Array.prototype.slice.call(arguments)))},r.info=function(){console&&r.logLevel>0&&r.logLevel<=2&&console.info.apply(console,["matter-js:"].concat(Array.prototype.slice.call(arguments)))},r.warn=function(){console&&r.logLevel>0&&r.logLevel<=3&&console.warn.apply(console,["matter-js:"].concat(Array.prototype.slice.call(arguments)))},r.nextId=function(){return r._nextId++},r.indexOf=function(e,t){if(e.indexOf)return e.indexOf(t);for(var n=0;n<e.length;n++)if(e[n]===t)return n;return-1},r.map=function(e,t){if(e.map)return e.map(t);for(var n=[],r=0;r<e.length;r+=1)n.push(t(e[r]));return n},r.topologicalSort=function(e){var t=[],n=[],o=[];for(var i in e)n[i]||o[i]||r._topologicalSort(i,n,o,e,t);return t},r._topologicalSort=function(e,t,n,o,i){var a=o[e]||[];n[e]=!0;for(var l=0;l<a.length;l+=1){var s=a[l];n[s]||t[s]||r._topologicalSort(s,t,n,o,i)}n[e]=!1,t[e]=!0,i.push(e)},r.chain=function(){for(var e=[],t=0;t<arguments.length;t+=1){var n=arguments[t];n._chained?e.push.apply(e,n._chained):e.push(n)}var r=function(){for(var t,n=new Array(arguments.length),r=0,o=arguments.length;r<o;r++)n[r]=arguments[r];for(r=0;r<e.length;r+=1){var i=e[r].apply(t,n);void 0!==i&&(t=i)}return t};return r._chained=e,r},r.chainPathBefore=function(e,t,n){return r.set(e,t,r.chain(n,r.get(e,t)))},r.chainPathAfter=function(e,t,n){return r.set(e,t,r.chain(r.get(e,t),n))},r._requireGlobal=function(n,r){return("undefined"!=typeof window?window[n]:void 0!==t?t[n]:null)||e(r)}}()}).call(this,void 0!==t?t:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],15:[function(e,t,n){var r={};t.exports=r;var o=e("../body/World"),i=e("./Sleeping"),a=e("../collision/Resolver"),l=e("../render/Render"),s=e("../collision/Pairs"),u=(e("./Metrics"),e("../collision/Grid")),c=e("./Events"),f=e("../body/Composite"),d=e("../constraint/Constraint"),p=e("./Common"),m=e("../body/Body");r.create=function(e,t){t=(t=p.isElement(e)?t:e)||{},((e=p.isElement(e)?e:null)||t.render)&&p.warn("Engine.create: engine.render is deprecated (see docs)");var n={positionIterations:6,velocityIterations:4,constraintIterations:2,enableSleeping:!1,events:[],plugin:{},timing:{timestamp:0,timeScale:1},broadphase:{controller:u}},r=p.extend(n,t);if(e||r.render){var i={element:e,controller:l};r.render=p.extend(i,r.render)}return r.render&&r.render.controller&&(r.render=r.render.controller.create(r.render)),r.render&&(r.render.engine=r),r.world=t.world||o.create(r.world),r.pairs=s.create(),r.broadphase=r.broadphase.controller.create(r.broadphase),r.metrics=r.metrics||{extended:!1},r},r.update=function(e,t,n){t=t||1e3/60,n=n||1;var o,l=e.world,u=e.timing,p=e.broadphase,m=[];u.timestamp+=t*u.timeScale;var y={timestamp:u.timestamp};c.trigger(e,"beforeUpdate",y);var h=f.allBodies(l),v=f.allConstraints(l);for(e.enableSleeping&&i.update(h,u.timeScale),r._bodiesApplyGravity(h,l.gravity),r._bodiesUpdate(h,t,u.timeScale,n,l.bounds),d.preSolveAll(h),o=0;o<e.constraintIterations;o++)d.solveAll(v,u.timeScale);d.postSolveAll(h),p.controller?(l.isModified&&p.controller.clear(p),p.controller.update(p,h,e,l.isModified),m=p.pairsList):m=h,l.isModified&&f.setModified(l,!1,!1,!0);var g=p.detector(m,e),b=e.pairs,x=u.timestamp;for(s.update(b,g,x),s.removeOld(b,x),e.enableSleeping&&i.afterCollisions(b.list,u.timeScale),b.collisionStart.length>0&&c.trigger(e,"collisionStart",{pairs:b.collisionStart}),a.preSolvePosition(b.list),o=0;o<e.positionIterations;o++)a.solvePosition(b.list,u.timeScale);for(a.postSolvePosition(h),d.preSolveAll(h),o=0;o<e.constraintIterations;o++)d.solveAll(v,u.timeScale);for(d.postSolveAll(h),a.preSolveVelocity(b.list),o=0;o<e.velocityIterations;o++)a.solveVelocity(b.list,u.timeScale);return b.collisionActive.length>0&&c.trigger(e,"collisionActive",{pairs:b.collisionActive}),b.collisionEnd.length>0&&c.trigger(e,"collisionEnd",{pairs:b.collisionEnd}),r._bodiesClearForces(h),c.trigger(e,"afterUpdate",y),e},r.merge=function(e,t){if(p.extend(e,t),t.world){e.world=t.world,r.clear(e);for(var n=f.allBodies(e.world),o=0;o<n.length;o++){var a=n[o];i.set(a,!1),a.id=p.nextId()}}},r.clear=function(e){var t=e.world;s.clear(e.pairs);var n=e.broadphase;if(n.controller){var r=f.allBodies(t);n.controller.clear(n),n.controller.update(n,r,e,!0)}},r._bodiesClearForces=function(e){for(var t=0;t<e.length;t++){var n=e[t];n.force.x=0,n.force.y=0,n.torque=0}},r._bodiesApplyGravity=function(e,t){var n=void 0!==t.scale?t.scale:.001;if((0!==t.x||0!==t.y)&&0!==n)for(var r=0;r<e.length;r++){var o=e[r];o.isStatic||o.isSleeping||(o.force.y+=o.mass*t.y*n,o.force.x+=o.mass*t.x*n)}},r._bodiesUpdate=function(e,t,n,r,o){for(var i=0;i<e.length;i++){var a=e[i];a.isStatic||a.isSleeping||m.update(a,t,n,r)}}},{"../body/Body":1,"../body/Composite":2,"../body/World":3,"../collision/Grid":6,"../collision/Pairs":8,"../collision/Resolver":10,"../constraint/Constraint":12,"../render/Render":31,"./Common":14,"./Events":16,"./Metrics":18,"./Sleeping":22}],16:[function(e,t,n){var r={};t.exports=r;var o=e("./Common");r.on=function(e,t,n){for(var r,o=t.split(" "),i=0;i<o.length;i++)r=o[i],e.events=e.events||{},e.events[r]=e.events[r]||[],e.events[r].push(n);return n},r.off=function(e,t,n){if(t){"function"==typeof t&&(n=t,t=o.keys(e.events).join(" "));for(var r=t.split(" "),i=0;i<r.length;i++){var a=e.events[r[i]],l=[];if(n&&a)for(var s=0;s<a.length;s++)a[s]!==n&&l.push(a[s]);e.events[r[i]]=l}}else e.events={}},r.trigger=function(e,t,n){var r,i,a,l;if(e.events){n||(n={}),r=t.split(" ");for(var s=0;s<r.length;s++)if(i=r[s],a=e.events[i]){(l=o.clone(n,!1)).name=i,l.source=e;for(var u=0;u<a.length;u++)a[u].apply(e,[l])}}}},{"./Common":14}],17:[function(e,t,n){var r={};t.exports=r;var o=e("./Plugin"),i=e("./Common");r.name="matter-js",r.version="0.14.2",r.uses=[],r.used=[],r.use=function(){o.use(r,Array.prototype.slice.call(arguments))},r.before=function(e,t){return e=e.replace(/^Matter./,""),i.chainPathBefore(r,e,t)},r.after=function(e,t){return e=e.replace(/^Matter./,""),i.chainPathAfter(r,e,t)}},{"./Common":14,"./Plugin":20}],18:[function(e,t,n){},{"../body/Composite":2,"./Common":14}],19:[function(e,t,n){var r={};t.exports=r;var o=e("../core/Common");r.create=function(e){var t={};return e||o.log("Mouse.create: element was undefined, defaulting to document.body","warn"),t.element=e||document.body,t.absolute={x:0,y:0},t.position={x:0,y:0},t.mousedownPosition={x:0,y:0},t.mouseupPosition={x:0,y:0},t.offset={x:0,y:0},t.scale={x:1,y:1},t.wheelDelta=0,t.button=-1,t.pixelRatio=t.element.getAttribute("data-pixel-ratio")||1,t.sourceEvents={mousemove:null,mousedown:null,mouseup:null,mousewheel:null},t.mousemove=function(e){var n=r._getRelativeMousePosition(e,t.element,t.pixelRatio);e.changedTouches&&(t.button=0,e.preventDefault()),t.absolute.x=n.x,t.absolute.y=n.y,t.position.x=t.absolute.x*t.scale.x+t.offset.x,t.position.y=t.absolute.y*t.scale.y+t.offset.y,t.sourceEvents.mousemove=e},t.mousedown=function(e){var n=r._getRelativeMousePosition(e,t.element,t.pixelRatio);e.changedTouches?(t.button=0,e.preventDefault()):t.button=e.button,t.absolute.x=n.x,t.absolute.y=n.y,t.position.x=t.absolute.x*t.scale.x+t.offset.x,t.position.y=t.absolute.y*t.scale.y+t.offset.y,t.mousedownPosition.x=t.position.x,t.mousedownPosition.y=t.position.y,t.sourceEvents.mousedown=e},t.mouseup=function(e){var n=r._getRelativeMousePosition(e,t.element,t.pixelRatio);e.changedTouches&&e.preventDefault(),t.button=-1,t.absolute.x=n.x,t.absolute.y=n.y,t.position.x=t.absolute.x*t.scale.x+t.offset.x,t.position.y=t.absolute.y*t.scale.y+t.offset.y,t.mouseupPosition.x=t.position.x,t.mouseupPosition.y=t.position.y,t.sourceEvents.mouseup=e},t.mousewheel=function(e){t.wheelDelta=Math.max(-1,Math.min(1,e.wheelDelta||-e.detail)),e.preventDefault()},r.setElement(t,t.element),t},r.setElement=function(e,t){e.element=t,t.addEventListener("mousemove",e.mousemove),t.addEventListener("mousedown",e.mousedown),t.addEventListener("mouseup",e.mouseup),t.addEventListener("mousewheel",e.mousewheel),t.addEventListener("DOMMouseScroll",e.mousewheel),t.addEventListener("touchmove",e.mousemove),t.addEventListener("touchstart",e.mousedown),t.addEventListener("touchend",e.mouseup)},r.clearSourceEvents=function(e){e.sourceEvents.mousemove=null,e.sourceEvents.mousedown=null,e.sourceEvents.mouseup=null,e.sourceEvents.mousewheel=null,e.wheelDelta=0},r.setOffset=function(e,t){e.offset.x=t.x,e.offset.y=t.y,e.position.x=e.absolute.x*e.scale.x+e.offset.x,e.position.y=e.absolute.y*e.scale.y+e.offset.y},r.setScale=function(e,t){e.scale.x=t.x,e.scale.y=t.y,e.position.x=e.absolute.x*e.scale.x+e.offset.x,e.position.y=e.absolute.y*e.scale.y+e.offset.y},r._getRelativeMousePosition=function(e,t,n){var r,o,i=t.getBoundingClientRect(),a=document.documentElement||document.body.parentNode||document.body,l=void 0!==window.pageXOffset?window.pageXOffset:a.scrollLeft,s=void 0!==window.pageYOffset?window.pageYOffset:a.scrollTop,u=e.changedTouches;return u?(r=u[0].pageX-i.left-l,o=u[0].pageY-i.top-s):(r=e.pageX-i.left-l,o=e.pageY-i.top-s),{x:r/(t.clientWidth/(t.width||t.clientWidth)*n),y:o/(t.clientHeight/(t.height||t.clientHeight)*n)}}},{"../core/Common":14}],20:[function(e,t,n){var r={};t.exports=r;var o=e("./Common");r._registry={},r.register=function(e){if(r.isPlugin(e)||o.warn("Plugin.register:",r.toString(e),"does not implement all required fields."),e.name in r._registry){var t=r._registry[e.name],n=r.versionParse(e.version).number,i=r.versionParse(t.version).number;n>i?(o.warn("Plugin.register:",r.toString(t),"was upgraded to",r.toString(e)),r._registry[e.name]=e):n<i?o.warn("Plugin.register:",r.toString(t),"can not be downgraded to",r.toString(e)):e!==t&&o.warn("Plugin.register:",r.toString(e),"is already registered to different plugin object")}else r._registry[e.name]=e;return e},r.resolve=function(e){return r._registry[r.dependencyParse(e).name]},r.toString=function(e){return"string"==typeof e?e:(e.name||"anonymous")+"@"+(e.version||e.range||"0.0.0")},r.isPlugin=function(e){return e&&e.name&&e.version&&e.install},r.isUsed=function(e,t){return e.used.indexOf(t)>-1},r.isFor=function(e,t){var n=e.for&&r.dependencyParse(e.for);return!e.for||t.name===n.name&&r.versionSatisfies(t.version,n.range)},r.use=function(e,t){if(e.uses=(e.uses||[]).concat(t||[]),0!==e.uses.length){for(var n=r.dependencies(e),i=o.topologicalSort(n),a=[],l=0;l<i.length;l+=1)if(i[l]!==e.name){var s=r.resolve(i[l]);s?r.isUsed(e,s.name)||(r.isFor(s,e)||(o.warn("Plugin.use:",r.toString(s),"is for",s.for,"but installed on",r.toString(e)+"."),s._warned=!0),s.install?s.install(e):(o.warn("Plugin.use:",r.toString(s),"does not specify an install function."),s._warned=!0),s._warned?(a.push("🔶 "+r.toString(s)),delete s._warned):a.push("✅ "+r.toString(s)),e.used.push(s.name)):a.push("❌ "+i[l])}a.length>0&&o.info(a.join("  "))}else o.warn("Plugin.use:",r.toString(e),"does not specify any dependencies to install.")},r.dependencies=function(e,t){var n=r.dependencyParse(e),i=n.name;if(!(i in(t=t||{}))){e=r.resolve(e)||e,t[i]=o.map(e.uses||[],(function(t){r.isPlugin(t)&&r.register(t);var i=r.dependencyParse(t),a=r.resolve(t);return a&&!r.versionSatisfies(a.version,i.range)?(o.warn("Plugin.dependencies:",r.toString(a),"does not satisfy",r.toString(i),"used by",r.toString(n)+"."),a._warned=!0,e._warned=!0):a||(o.warn("Plugin.dependencies:",r.toString(t),"used by",r.toString(n),"could not be resolved."),e._warned=!0),i.name}));for(var a=0;a<t[i].length;a+=1)r.dependencies(t[i][a],t);return t}},r.dependencyParse=function(e){return o.isString(e)?(/^[\w-]+(@(\*|[\^~]?\d+\.\d+\.\d+(-[0-9A-Za-z-]+)?))?$/.test(e)||o.warn("Plugin.dependencyParse:",e,"is not a valid dependency string."),{name:e.split("@")[0],range:e.split("@")[1]||"*"}):{name:e.name,range:e.range||e.version}},r.versionParse=function(e){/^\*|[\^~]?\d+\.\d+\.\d+(-[0-9A-Za-z-]+)?$/.test(e)||o.warn("Plugin.versionParse:",e,"is not a valid version or range.");var t=e.split("-");e=t[0];var n=isNaN(Number(e[0])),r=n?e.substr(1):e,i=o.map(r.split("."),(function(e){return Number(e)}));return{isRange:n,version:r,range:e,operator:n?e[0]:"",parts:i,prerelease:t[1],number:1e8*i[0]+1e4*i[1]+i[2]}},r.versionSatisfies=function(e,t){t=t||"*";var n=r.versionParse(t),o=n.parts,i=r.versionParse(e),a=i.parts;if(n.isRange){if("*"===n.operator||"*"===e)return!0;if("~"===n.operator)return a[0]===o[0]&&a[1]===o[1]&&a[2]>=o[2];if("^"===n.operator)return o[0]>0?a[0]===o[0]&&i.number>=n.number:o[1]>0?a[1]===o[1]&&a[2]>=o[2]:a[2]===o[2]}return e===t||"*"===e}},{"./Common":14}],21:[function(e,t,n){var r={};t.exports=r;var o,i,a,l=e("./Events"),s=e("./Engine"),u=e("./Common");"undefined"!=typeof window&&(o=window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.msRequestAnimationFrame,i=window.cancelAnimationFrame||window.mozCancelAnimationFrame||window.webkitCancelAnimationFrame||window.msCancelAnimationFrame),o||(o=function(e){a=setTimeout((function(){e(u.now())}),1e3/60)},i=function(){clearTimeout(a)}),r.create=function(e){var t=u.extend({fps:60,correction:1,deltaSampleSize:60,counterTimestamp:0,frameCounter:0,deltaHistory:[],timePrev:null,timeScalePrev:1,frameRequestId:null,isFixed:!1,enabled:!0},e);return t.delta=t.delta||1e3/t.fps,t.deltaMin=t.deltaMin||1e3/t.fps,t.deltaMax=t.deltaMax||1e3/(.5*t.fps),t.fps=1e3/t.delta,t},r.run=function(e,t){return void 0!==e.positionIterations&&(t=e,e=r.create()),function n(i){e.frameRequestId=o(n),i&&e.enabled&&r.tick(e,t,i)}(),e},r.tick=function(e,t,n){var r,o=t.timing,i=1,a={timestamp:o.timestamp};l.trigger(e,"beforeTick",a),l.trigger(t,"beforeTick",a),e.isFixed?r=e.delta:(r=n-e.timePrev||e.delta,e.timePrev=n,e.deltaHistory.push(r),e.deltaHistory=e.deltaHistory.slice(-e.deltaSampleSize),i=(r=(r=(r=Math.min.apply(null,e.deltaHistory))<e.deltaMin?e.deltaMin:r)>e.deltaMax?e.deltaMax:r)/e.delta,e.delta=r),0!==e.timeScalePrev&&(i*=o.timeScale/e.timeScalePrev),0===o.timeScale&&(i=0),e.timeScalePrev=o.timeScale,e.correction=i,e.frameCounter+=1,n-e.counterTimestamp>=1e3&&(e.fps=e.frameCounter*((n-e.counterTimestamp)/1e3),e.counterTimestamp=n,e.frameCounter=0),l.trigger(e,"tick",a),l.trigger(t,"tick",a),t.world.isModified&&t.render&&t.render.controller&&t.render.controller.clear&&t.render.controller.clear(t.render),l.trigger(e,"beforeUpdate",a),s.update(t,r,i),l.trigger(e,"afterUpdate",a),t.render&&t.render.controller&&(l.trigger(e,"beforeRender",a),l.trigger(t,"beforeRender",a),t.render.controller.world(t.render),l.trigger(e,"afterRender",a),l.trigger(t,"afterRender",a)),l.trigger(e,"afterTick",a),l.trigger(t,"afterTick",a)},r.stop=function(e){i(e.frameRequestId)},r.start=function(e,t){r.run(e,t)}},{"./Common":14,"./Engine":15,"./Events":16}],22:[function(e,t,n){var r={};t.exports=r;var o=e("./Events");r._motionWakeThreshold=.18,r._motionSleepThreshold=.08,r._minBias=.9,r.update=function(e,t){for(var n=t*t*t,o=0;o<e.length;o++){var i=e[o],a=i.speed*i.speed+i.angularSpeed*i.angularSpeed;if(0===i.force.x&&0===i.force.y){var l=Math.min(i.motion,a),s=Math.max(i.motion,a);i.motion=r._minBias*l+(1-r._minBias)*s,i.sleepThreshold>0&&i.motion<r._motionSleepThreshold*n?(i.sleepCounter+=1,i.sleepCounter>=i.sleepThreshold&&r.set(i,!0)):i.sleepCounter>0&&(i.sleepCounter-=1)}else r.set(i,!1)}},r.afterCollisions=function(e,t){for(var n=t*t*t,o=0;o<e.length;o++){var i=e[o];if(i.isActive){var a=i.collision,l=a.bodyA.parent,s=a.bodyB.parent;if(!(l.isSleeping&&s.isSleeping||l.isStatic||s.isStatic)&&(l.isSleeping||s.isSleeping)){var u=l.isSleeping&&!l.isStatic?l:s,c=u===l?s:l;!u.isStatic&&c.motion>r._motionWakeThreshold*n&&r.set(u,!1)}}}},r.set=function(e,t){var n=e.isSleeping;t?(e.isSleeping=!0,e.sleepCounter=e.sleepThreshold,e.positionImpulse.x=0,e.positionImpulse.y=0,e.positionPrev.x=e.position.x,e.positionPrev.y=e.position.y,e.anglePrev=e.angle,e.speed=0,e.angularSpeed=0,e.motion=0,n||o.trigger(e,"sleepStart")):(e.isSleeping=!1,e.sleepCounter=0,n&&o.trigger(e,"sleepEnd"))}},{"./Events":16}],23:[function(e,t,n){var r={};t.exports=r;var o,i=e("../geometry/Vertices"),a=e("../core/Common"),l=e("../body/Body"),s=e("../geometry/Bounds"),u=e("../geometry/Vector");r.rectangle=function(e,t,n,r,o){o=o||{};var s={label:"Rectangle Body",position:{x:e,y:t},vertices:i.fromPath("L 0 0 L "+n+" 0 L "+n+" "+r+" L 0 "+r)};if(o.chamfer){var u=o.chamfer;s.vertices=i.chamfer(s.vertices,u.radius,u.quality,u.qualityMin,u.qualityMax),delete o.chamfer}return l.create(a.extend({},s,o))},r.trapezoid=function(e,t,n,r,o,s){s=s||{};var u,c=n*(o*=.5),f=c+(1-2*o)*n,d=f+c;u=o<.5?"L 0 0 L "+c+" "+-r+" L "+f+" "+-r+" L "+d+" 0":"L 0 0 L "+f+" "+-r+" L "+d+" 0";var p={label:"Trapezoid Body",position:{x:e,y:t},vertices:i.fromPath(u)};if(s.chamfer){var m=s.chamfer;p.vertices=i.chamfer(p.vertices,m.radius,m.quality,m.qualityMin,m.qualityMax),delete s.chamfer}return l.create(a.extend({},p,s))},r.circle=function(e,t,n,o,i){o=o||{};var l={label:"Circle Body",circleRadius:n};i=i||25;var s=Math.ceil(Math.max(10,Math.min(i,n)));return s%2==1&&(s+=1),r.polygon(e,t,s,n,a.extend({},l,o))},r.polygon=function(e,t,n,o,s){if(s=s||{},n<3)return r.circle(e,t,o,s);for(var u=2*Math.PI/n,c="",f=.5*u,d=0;d<n;d+=1){var p=f+d*u,m=Math.cos(p)*o,y=Math.sin(p)*o;c+="L "+m.toFixed(3)+" "+y.toFixed(3)+" "}var h={label:"Polygon Body",position:{x:e,y:t},vertices:i.fromPath(c)};if(s.chamfer){var v=s.chamfer;h.vertices=i.chamfer(h.vertices,v.radius,v.quality,v.qualityMin,v.qualityMax),delete s.chamfer}return l.create(a.extend({},h,s))},r.fromVertices=function(e,t,n,r,c,f,d){var p,m,y,h,v,g,b,x,w;for(o||(o=a._requireGlobal("decomp","poly-decomp")),r=r||{},m=[],c=void 0!==c&&c,f=void 0!==f?f:.01,d=void 0!==d?d:10,o||a.warn("Bodies.fromVertices: poly-decomp.js required. Could not decompose vertices. Fallback to convex hull."),a.isArray(n[0])||(n=[n]),x=0;x<n.length;x+=1)if(h=n[x],(y=i.isConvex(h))||!o)h=y?i.clockwiseSort(h):i.hull(h),m.push({position:{x:e,y:t},vertices:h});else{var S=h.map((function(e){return[e.x,e.y]}));o.makeCCW(S),!1!==f&&o.removeCollinearPoints(S,f);var k=o.quickDecomp(S);for(v=0;v<k.length;v++){var C=k[v].map((function(e){return{x:e[0],y:e[1]}}));d>0&&i.area(C)<d||m.push({position:i.centre(C),vertices:C})}}for(v=0;v<m.length;v++)m[v]=l.create(a.extend(m[v],r));if(c)for(v=0;v<m.length;v++){var T=m[v];for(g=v+1;g<m.length;g++){var E=m[g];if(s.overlaps(T.bounds,E.bounds)){var P=T.vertices,_=E.vertices;for(b=0;b<T.vertices.length;b++)for(w=0;w<E.vertices.length;w++){var M=u.magnitudeSquared(u.sub(P[(b+1)%P.length],_[w])),A=u.magnitudeSquared(u.sub(P[b],_[(w+1)%_.length]));M<5&&A<5&&(P[b].isInternal=!0,_[w].isInternal=!0)}}}}return m.length>1?(p=l.create(a.extend({parts:m.slice(0)},r)),l.setPosition(p,{x:e,y:t}),p):m[0]}},{"../body/Body":1,"../core/Common":14,"../geometry/Bounds":26,"../geometry/Vector":28,"../geometry/Vertices":29}],24:[function(e,t,n){var r={};t.exports=r;var o=e("../body/Composite"),i=e("../constraint/Constraint"),a=e("../core/Common"),l=e("../body/Body"),s=e("./Bodies");r.stack=function(e,t,n,r,i,a,s){for(var u,c=o.create({label:"Stack"}),f=e,d=t,p=0,m=0;m<r;m++){for(var y=0,h=0;h<n;h++){var v=s(f,d,h,m,u,p);if(v){var g=v.bounds.max.y-v.bounds.min.y,b=v.bounds.max.x-v.bounds.min.x;g>y&&(y=g),l.translate(v,{x:.5*b,y:.5*g}),f=v.bounds.max.x+i,o.addBody(c,v),u=v,p+=1}else f+=i}d+=y+a,f=e}return c},r.chain=function(e,t,n,r,l,s){for(var u=e.bodies,c=1;c<u.length;c++){var f=u[c-1],d=u[c],p=f.bounds.max.y-f.bounds.min.y,m=f.bounds.max.x-f.bounds.min.x,y=d.bounds.max.y-d.bounds.min.y,h={bodyA:f,pointA:{x:m*t,y:p*n},bodyB:d,pointB:{x:(d.bounds.max.x-d.bounds.min.x)*r,y:y*l}},v=a.extend(h,s);o.addConstraint(e,i.create(v))}return e.label+=" Chain",e},r.mesh=function(e,t,n,r,l){var s,u,c,f,d,p=e.bodies;for(s=0;s<n;s++){for(u=1;u<t;u++)c=p[u-1+s*t],f=p[u+s*t],o.addConstraint(e,i.create(a.extend({bodyA:c,bodyB:f},l)));if(s>0)for(u=0;u<t;u++)c=p[u+(s-1)*t],f=p[u+s*t],o.addConstraint(e,i.create(a.extend({bodyA:c,bodyB:f},l))),r&&u>0&&(d=p[u-1+(s-1)*t],o.addConstraint(e,i.create(a.extend({bodyA:d,bodyB:f},l)))),r&&u<t-1&&(d=p[u+1+(s-1)*t],o.addConstraint(e,i.create(a.extend({bodyA:d,bodyB:f},l))))}return e.label+=" Mesh",e},r.pyramid=function(e,t,n,o,i,a,s){return r.stack(e,t,n,o,i,a,(function(t,r,a,u,c,f){var d=Math.min(o,Math.ceil(n/2)),p=c?c.bounds.max.x-c.bounds.min.x:0;if(!(u>d||a<(u=d-u)||a>n-1-u))return 1===f&&l.translate(c,{x:(a+(n%2==1?1:-1))*p,y:0}),s(e+(c?a*p:0)+a*i,r,a,u,c,f)}))},r.newtonsCradle=function(e,t,n,r,a){for(var l=o.create({label:"Newtons Cradle"}),u=0;u<n;u++){var c=s.circle(e+u*(1.9*r),t+a,r,{inertia:1/0,restitution:1,friction:0,frictionAir:1e-4,slop:1}),f=i.create({pointA:{x:e+u*(1.9*r),y:t},bodyB:c});o.addBody(l,c),o.addConstraint(l,f)}return l},r.car=function(e,t,n,r,a){var u=l.nextGroup(!0),c=.5*-n+20,f=.5*n-20,d=o.create({label:"Car"}),p=s.rectangle(e,t,n,r,{collisionFilter:{group:u},chamfer:{radius:.5*r},density:2e-4}),m=s.circle(e+c,t+0,a,{collisionFilter:{group:u},friction:.8}),y=s.circle(e+f,t+0,a,{collisionFilter:{group:u},friction:.8}),h=i.create({bodyB:p,pointB:{x:c,y:0},bodyA:m,stiffness:1,length:0}),v=i.create({bodyB:p,pointB:{x:f,y:0},bodyA:y,stiffness:1,length:0});return o.addBody(d,p),o.addBody(d,m),o.addBody(d,y),o.addConstraint(d,h),o.addConstraint(d,v),d},r.softBody=function(e,t,n,o,i,l,u,c,f,d){f=a.extend({inertia:1/0},f),d=a.extend({stiffness:.2,render:{type:"line",anchors:!1}},d);var p=r.stack(e,t,n,o,i,l,(function(e,t){return s.circle(e,t,c,f)}));return r.mesh(p,n,o,u,d),p.label="Soft Body",p}},{"../body/Body":1,"../body/Composite":2,"../constraint/Constraint":12,"../core/Common":14,"./Bodies":23}],25:[function(e,t,n){var r={};t.exports=r;var o=e("../geometry/Vector"),i=e("../core/Common");r.fromVertices=function(e){for(var t={},n=0;n<e.length;n++){var r=(n+1)%e.length,a=o.normalise({x:e[r].y-e[n].y,y:e[n].x-e[r].x}),l=0===a.y?1/0:a.x/a.y;t[l=l.toFixed(3).toString()]=a}return i.values(t)},r.rotate=function(e,t){if(0!==t)for(var n=Math.cos(t),r=Math.sin(t),o=0;o<e.length;o++){var i,a=e[o];i=a.x*n-a.y*r,a.y=a.x*r+a.y*n,a.x=i}}},{"../core/Common":14,"../geometry/Vector":28}],26:[function(e,t,n){var r={};t.exports=r,r.create=function(e){var t={min:{x:0,y:0},max:{x:0,y:0}};return e&&r.update(t,e),t},r.update=function(e,t,n){e.min.x=1/0,e.max.x=-1/0,e.min.y=1/0,e.max.y=-1/0;for(var r=0;r<t.length;r++){var o=t[r];o.x>e.max.x&&(e.max.x=o.x),o.x<e.min.x&&(e.min.x=o.x),o.y>e.max.y&&(e.max.y=o.y),o.y<e.min.y&&(e.min.y=o.y)}n&&(n.x>0?e.max.x+=n.x:e.min.x+=n.x,n.y>0?e.max.y+=n.y:e.min.y+=n.y)},r.contains=function(e,t){return t.x>=e.min.x&&t.x<=e.max.x&&t.y>=e.min.y&&t.y<=e.max.y},r.overlaps=function(e,t){return e.min.x<=t.max.x&&e.max.x>=t.min.x&&e.max.y>=t.min.y&&e.min.y<=t.max.y},r.translate=function(e,t){e.min.x+=t.x,e.max.x+=t.x,e.min.y+=t.y,e.max.y+=t.y},r.shift=function(e,t){var n=e.max.x-e.min.x,r=e.max.y-e.min.y;e.min.x=t.x,e.max.x=t.x+n,e.min.y=t.y,e.max.y=t.y+r}},{}],27:[function(e,t,n){var r={};t.exports=r,e("../geometry/Bounds");var o=e("../core/Common");r.pathToVertices=function(e,t){"undefined"==typeof window||"SVGPathSeg"in window||o.warn("Svg.pathToVertices: SVGPathSeg not defined, a polyfill is required.");var n,i,a,l,s,u,c,f,d,p,m,y=[],h=0,v=0,g=0;t=t||15;var b=function(e,t,n){var r=n%2==1&&n>1;if(!d||e!=d.x||t!=d.y){d&&r?(p=d.x,m=d.y):(p=0,m=0);var o={x:p+e,y:m+t};!r&&d||(d=o),y.push(o),v=p+e,g=m+t}},x=function(e){var t=e.pathSegTypeAsLetter.toUpperCase();if("Z"!==t){switch(t){case"M":case"L":case"T":case"C":case"S":case"Q":v=e.x,g=e.y;break;case"H":v=e.x;break;case"V":g=e.y}b(v,g,e.pathSegType)}};for(r._svgPathToAbsolute(e),a=e.getTotalLength(),u=[],n=0;n<e.pathSegList.numberOfItems;n+=1)u.push(e.pathSegList.getItem(n));for(c=u.concat();h<a;){if((s=u[e.getPathSegAtLength(h)])!=f){for(;c.length&&c[0]!=s;)x(c.shift());f=s}switch(s.pathSegTypeAsLetter.toUpperCase()){case"C":case"T":case"S":case"Q":case"A":l=e.getPointAtLength(h),b(l.x,l.y,0)}h+=t}for(n=0,i=c.length;n<i;++n)x(c[n]);return y},r._svgPathToAbsolute=function(e){for(var t,n,r,o,i,a,l=e.pathSegList,s=0,u=0,c=l.numberOfItems,f=0;f<c;++f){var d=l.getItem(f),p=d.pathSegTypeAsLetter;if(/[MLHVCSQTA]/.test(p))"x"in d&&(s=d.x),"y"in d&&(u=d.y);else switch("x1"in d&&(r=s+d.x1),"x2"in d&&(i=s+d.x2),"y1"in d&&(o=u+d.y1),"y2"in d&&(a=u+d.y2),"x"in d&&(s+=d.x),"y"in d&&(u+=d.y),p){case"m":l.replaceItem(e.createSVGPathSegMovetoAbs(s,u),f);break;case"l":l.replaceItem(e.createSVGPathSegLinetoAbs(s,u),f);break;case"h":l.replaceItem(e.createSVGPathSegLinetoHorizontalAbs(s),f);break;case"v":l.replaceItem(e.createSVGPathSegLinetoVerticalAbs(u),f);break;case"c":l.replaceItem(e.createSVGPathSegCurvetoCubicAbs(s,u,r,o,i,a),f);break;case"s":l.replaceItem(e.createSVGPathSegCurvetoCubicSmoothAbs(s,u,i,a),f);break;case"q":l.replaceItem(e.createSVGPathSegCurvetoQuadraticAbs(s,u,r,o),f);break;case"t":l.replaceItem(e.createSVGPathSegCurvetoQuadraticSmoothAbs(s,u),f);break;case"a":l.replaceItem(e.createSVGPathSegArcAbs(s,u,d.r1,d.r2,d.angle,d.largeArcFlag,d.sweepFlag),f);break;case"z":case"Z":s=t,u=n}"M"!=p&&"m"!=p||(t=s,n=u)}}},{"../core/Common":14,"../geometry/Bounds":26}],28:[function(e,t,n){var r={};t.exports=r,r.create=function(e,t){return{x:e||0,y:t||0}},r.clone=function(e){return{x:e.x,y:e.y}},r.magnitude=function(e){return Math.sqrt(e.x*e.x+e.y*e.y)},r.magnitudeSquared=function(e){return e.x*e.x+e.y*e.y},r.rotate=function(e,t,n){var r=Math.cos(t),o=Math.sin(t);n||(n={});var i=e.x*r-e.y*o;return n.y=e.x*o+e.y*r,n.x=i,n},r.rotateAbout=function(e,t,n,r){var o=Math.cos(t),i=Math.sin(t);r||(r={});var a=n.x+((e.x-n.x)*o-(e.y-n.y)*i);return r.y=n.y+((e.x-n.x)*i+(e.y-n.y)*o),r.x=a,r},r.normalise=function(e){var t=r.magnitude(e);return 0===t?{x:0,y:0}:{x:e.x/t,y:e.y/t}},r.dot=function(e,t){return e.x*t.x+e.y*t.y},r.cross=function(e,t){return e.x*t.y-e.y*t.x},r.cross3=function(e,t,n){return(t.x-e.x)*(n.y-e.y)-(t.y-e.y)*(n.x-e.x)},r.add=function(e,t,n){return n||(n={}),n.x=e.x+t.x,n.y=e.y+t.y,n},r.sub=function(e,t,n){return n||(n={}),n.x=e.x-t.x,n.y=e.y-t.y,n},r.mult=function(e,t){return{x:e.x*t,y:e.y*t}},r.div=function(e,t){return{x:e.x/t,y:e.y/t}},r.perp=function(e,t){return{x:(t=!0===t?-1:1)*-e.y,y:t*e.x}},r.neg=function(e){return{x:-e.x,y:-e.y}},r.angle=function(e,t){return Math.atan2(t.y-e.y,t.x-e.x)},r._temp=[r.create(),r.create(),r.create(),r.create(),r.create(),r.create()]},{}],29:[function(e,t,n){var r={};t.exports=r;var o=e("../geometry/Vector"),i=e("../core/Common");r.create=function(e,t){for(var n=[],r=0;r<e.length;r++){var o=e[r],i={x:o.x,y:o.y,index:r,body:t,isInternal:!1};n.push(i)}return n},r.fromPath=function(e,t){var n=[];return e.replace(/L?\s*([\-\d\.e]+)[\s,]*([\-\d\.e]+)*/gi,(function(e,t,r){n.push({x:parseFloat(t),y:parseFloat(r)})})),r.create(n,t)},r.centre=function(e){for(var t,n,i,a=r.area(e,!0),l={x:0,y:0},s=0;s<e.length;s++)i=(s+1)%e.length,t=o.cross(e[s],e[i]),n=o.mult(o.add(e[s],e[i]),t),l=o.add(l,n);return o.div(l,6*a)},r.mean=function(e){for(var t={x:0,y:0},n=0;n<e.length;n++)t.x+=e[n].x,t.y+=e[n].y;return o.div(t,e.length)},r.area=function(e,t){for(var n=0,r=e.length-1,o=0;o<e.length;o++)n+=(e[r].x-e[o].x)*(e[r].y+e[o].y),r=o;return t?n/2:Math.abs(n)/2},r.inertia=function(e,t){for(var n,r,i=0,a=0,l=e,s=0;s<l.length;s++)r=(s+1)%l.length,i+=(n=Math.abs(o.cross(l[r],l[s])))*(o.dot(l[r],l[r])+o.dot(l[r],l[s])+o.dot(l[s],l[s])),a+=n;return t/6*(i/a)},r.translate=function(e,t,n){var r;if(n)for(r=0;r<e.length;r++)e[r].x+=t.x*n,e[r].y+=t.y*n;else for(r=0;r<e.length;r++)e[r].x+=t.x,e[r].y+=t.y;return e},r.rotate=function(e,t,n){if(0!==t){for(var r=Math.cos(t),o=Math.sin(t),i=0;i<e.length;i++){var a=e[i],l=a.x-n.x,s=a.y-n.y;a.x=n.x+(l*r-s*o),a.y=n.y+(l*o+s*r)}return e}},r.contains=function(e,t){for(var n=0;n<e.length;n++){var r=e[n],o=e[(n+1)%e.length];if((t.x-r.x)*(o.y-r.y)+(t.y-r.y)*(r.x-o.x)>0)return!1}return!0},r.scale=function(e,t,n,i){if(1===t&&1===n)return e;var a,l;i=i||r.centre(e);for(var s=0;s<e.length;s++)a=e[s],l=o.sub(a,i),e[s].x=i.x+l.x*t,e[s].y=i.y+l.y*n;return e},r.chamfer=function(e,t,n,r,a){t="number"==typeof t?[t]:t||[8],n=void 0!==n?n:-1,r=r||2,a=a||14;for(var l=[],s=0;s<e.length;s++){var u=e[s-1>=0?s-1:e.length-1],c=e[s],f=e[(s+1)%e.length],d=t[s<t.length?s:t.length-1];if(0!==d){var p=o.normalise({x:c.y-u.y,y:u.x-c.x}),m=o.normalise({x:f.y-c.y,y:c.x-f.x}),y=Math.sqrt(2*Math.pow(d,2)),h=o.mult(i.clone(p),d),v=o.normalise(o.mult(o.add(p,m),.5)),g=o.sub(c,o.mult(v,y)),b=n;-1===n&&(b=1.75*Math.pow(d,.32)),(b=i.clamp(b,r,a))%2==1&&(b+=1);for(var x=Math.acos(o.dot(p,m))/b,w=0;w<b;w++)l.push(o.add(o.rotate(h,x*w),g))}else l.push(c)}return l},r.clockwiseSort=function(e){var t=r.mean(e);return e.sort((function(e,n){return o.angle(t,e)-o.angle(t,n)})),e},r.isConvex=function(e){var t,n,r,o,i=0,a=e.length;if(a<3)return null;for(t=0;t<a;t++)if(r=(t+2)%a,o=(e[n=(t+1)%a].x-e[t].x)*(e[r].y-e[n].y),(o-=(e[n].y-e[t].y)*(e[r].x-e[n].x))<0?i|=1:o>0&&(i|=2),3===i)return!1;return 0!==i||null},r.hull=function(e){var t,n,r=[],i=[];for((e=e.slice(0)).sort((function(e,t){var n=e.x-t.x;return 0!==n?n:e.y-t.y})),n=0;n<e.length;n+=1){for(t=e[n];i.length>=2&&o.cross3(i[i.length-2],i[i.length-1],t)<=0;)i.pop();i.push(t)}for(n=e.length-1;n>=0;n-=1){for(t=e[n];r.length>=2&&o.cross3(r[r.length-2],r[r.length-1],t)<=0;)r.pop();r.push(t)}return r.pop(),i.pop(),r.concat(i)}},{"../core/Common":14,"../geometry/Vector":28}],30:[function(e,t,n){var r=t.exports=e("../core/Matter");r.Body=e("../body/Body"),r.Composite=e("../body/Composite"),r.World=e("../body/World"),r.Contact=e("../collision/Contact"),r.Detector=e("../collision/Detector"),r.Grid=e("../collision/Grid"),r.Pairs=e("../collision/Pairs"),r.Pair=e("../collision/Pair"),r.Query=e("../collision/Query"),r.Resolver=e("../collision/Resolver"),r.SAT=e("../collision/SAT"),r.Constraint=e("../constraint/Constraint"),r.MouseConstraint=e("../constraint/MouseConstraint"),r.Common=e("../core/Common"),r.Engine=e("../core/Engine"),r.Events=e("../core/Events"),r.Mouse=e("../core/Mouse"),r.Runner=e("../core/Runner"),r.Sleeping=e("../core/Sleeping"),r.Plugin=e("../core/Plugin"),r.Bodies=e("../factory/Bodies"),r.Composites=e("../factory/Composites"),r.Axes=e("../geometry/Axes"),r.Bounds=e("../geometry/Bounds"),r.Svg=e("../geometry/Svg"),r.Vector=e("../geometry/Vector"),r.Vertices=e("../geometry/Vertices"),r.Render=e("../render/Render"),r.RenderPixi=e("../render/RenderPixi"),r.World.add=r.Composite.add,r.World.remove=r.Composite.remove,r.World.addComposite=r.Composite.addComposite,r.World.addBody=r.Composite.addBody,r.World.addConstraint=r.Composite.addConstraint,r.World.clear=r.Composite.clear,r.Engine.run=r.Runner.run},{"../body/Body":1,"../body/Composite":2,"../body/World":3,"../collision/Contact":4,"../collision/Detector":5,"../collision/Grid":6,"../collision/Pair":7,"../collision/Pairs":8,"../collision/Query":9,"../collision/Resolver":10,"../collision/SAT":11,"../constraint/Constraint":12,"../constraint/MouseConstraint":13,"../core/Common":14,"../core/Engine":15,"../core/Events":16,"../core/Matter":17,"../core/Metrics":18,"../core/Mouse":19,"../core/Plugin":20,"../core/Runner":21,"../core/Sleeping":22,"../factory/Bodies":23,"../factory/Composites":24,"../geometry/Axes":25,"../geometry/Bounds":26,"../geometry/Svg":27,"../geometry/Vector":28,"../geometry/Vertices":29,"../render/Render":31,"../render/RenderPixi":32}],31:[function(e,t,n){var r={};t.exports=r;var o=e("../core/Common"),i=e("../body/Composite"),a=e("../geometry/Bounds"),l=e("../core/Events"),s=e("../collision/Grid"),u=e("../geometry/Vector"),c=e("../core/Mouse");!function(){var e,t;"undefined"!=typeof window&&(e=window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.msRequestAnimationFrame||function(e){window.setTimeout((function(){e(o.now())}),1e3/60)},t=window.cancelAnimationFrame||window.mozCancelAnimationFrame||window.webkitCancelAnimationFrame||window.msCancelAnimationFrame),r.create=function(e){var t={controller:r,engine:null,element:null,canvas:null,mouse:null,frameRequestId:null,options:{width:800,height:600,pixelRatio:1,background:"#18181d",wireframeBackground:"#0f0f13",hasBounds:!!e.bounds,enabled:!0,wireframes:!0,showSleeping:!0,showDebug:!1,showBroadphase:!1,showBounds:!1,showVelocity:!1,showCollisions:!1,showSeparations:!1,showAxes:!1,showPositions:!1,showAngleIndicator:!1,showIds:!1,showShadows:!1,showVertexNumbers:!1,showConvexHulls:!1,showInternalEdges:!1,showMousePosition:!1}},i=o.extend(t,e);return i.canvas&&(i.canvas.width=i.options.width||i.canvas.width,i.canvas.height=i.options.height||i.canvas.height),i.mouse=e.mouse,i.engine=e.engine,i.canvas=i.canvas||n(i.options.width,i.options.height),i.context=i.canvas.getContext("2d"),i.textures={},i.bounds=i.bounds||{min:{x:0,y:0},max:{x:i.canvas.width,y:i.canvas.height}},1!==i.options.pixelRatio&&r.setPixelRatio(i,i.options.pixelRatio),o.isElement(i.element)?i.element.appendChild(i.canvas):i.canvas.parentNode||o.log("Render.create: options.element was undefined, render.canvas was created but not appended","warn"),i},r.run=function(t){!function n(o){t.frameRequestId=e(n),r.world(t)}()},r.stop=function(e){t(e.frameRequestId)},r.setPixelRatio=function(e,t){var n=e.options,r=e.canvas;"auto"===t&&(t=f(r)),n.pixelRatio=t,r.setAttribute("data-pixel-ratio",t),r.width=n.width*t,r.height=n.height*t,r.style.width=n.width+"px",r.style.height=n.height+"px",e.context.scale(t,t)},r.lookAt=function(e,t,n,r){r=void 0===r||r,t=o.isArray(t)?t:[t],n=n||{x:0,y:0};for(var i={min:{x:1/0,y:1/0},max:{x:-1/0,y:-1/0}},a=0;a<t.length;a+=1){var l=t[a],s=l.bounds?l.bounds.min:l.min||l.position||l,u=l.bounds?l.bounds.max:l.max||l.position||l;s&&u&&(s.x<i.min.x&&(i.min.x=s.x),u.x>i.max.x&&(i.max.x=u.x),s.y<i.min.y&&(i.min.y=s.y),u.y>i.max.y&&(i.max.y=u.y))}var f=i.max.x-i.min.x+2*n.x,d=i.max.y-i.min.y+2*n.y,p=e.canvas.height,m=e.canvas.width/p,y=f/d,h=1,v=1;y>m?v=y/m:h=m/y,e.options.hasBounds=!0,e.bounds.min.x=i.min.x,e.bounds.max.x=i.min.x+f*h,e.bounds.min.y=i.min.y,e.bounds.max.y=i.min.y+d*v,r&&(e.bounds.min.x+=.5*f-f*h*.5,e.bounds.max.x+=.5*f-f*h*.5,e.bounds.min.y+=.5*d-d*v*.5,e.bounds.max.y+=.5*d-d*v*.5),e.bounds.min.x-=n.x,e.bounds.max.x-=n.x,e.bounds.min.y-=n.y,e.bounds.max.y-=n.y,e.mouse&&(c.setScale(e.mouse,{x:(e.bounds.max.x-e.bounds.min.x)/e.canvas.width,y:(e.bounds.max.y-e.bounds.min.y)/e.canvas.height}),c.setOffset(e.mouse,e.bounds.min))},r.startViewTransform=function(e){var t=e.bounds.max.x-e.bounds.min.x,n=e.bounds.max.y-e.bounds.min.y,r=t/e.options.width,o=n/e.options.height;e.context.scale(1/r,1/o),e.context.translate(-e.bounds.min.x,-e.bounds.min.y)},r.endViewTransform=function(e){e.context.setTransform(e.options.pixelRatio,0,0,e.options.pixelRatio,0,0)},r.world=function(e){var t,n=e.engine,o=n.world,f=e.canvas,d=e.context,m=e.options,y=i.allBodies(o),h=i.allConstraints(o),v=m.wireframes?m.wireframeBackground:m.background,g=[],b=[],x={timestamp:n.timing.timestamp};if(l.trigger(e,"beforeRender",x),e.currentBackground!==v&&p(e,v),d.globalCompositeOperation="source-in",d.fillStyle="transparent",d.fillRect(0,0,f.width,f.height),d.globalCompositeOperation="source-over",m.hasBounds){for(t=0;t<y.length;t++){var w=y[t];a.overlaps(w.bounds,e.bounds)&&g.push(w)}for(t=0;t<h.length;t++){var S=h[t],k=S.bodyA,C=S.bodyB,T=S.pointA,E=S.pointB;k&&(T=u.add(k.position,S.pointA)),C&&(E=u.add(C.position,S.pointB)),T&&E&&(a.contains(e.bounds,T)||a.contains(e.bounds,E))&&b.push(S)}r.startViewTransform(e),e.mouse&&(c.setScale(e.mouse,{x:(e.bounds.max.x-e.bounds.min.x)/e.canvas.width,y:(e.bounds.max.y-e.bounds.min.y)/e.canvas.height}),c.setOffset(e.mouse,e.bounds.min))}else b=h,g=y;!m.wireframes||n.enableSleeping&&m.showSleeping?r.bodies(e,g,d):(m.showConvexHulls&&r.bodyConvexHulls(e,g,d),r.bodyWireframes(e,g,d)),m.showBounds&&r.bodyBounds(e,g,d),(m.showAxes||m.showAngleIndicator)&&r.bodyAxes(e,g,d),m.showPositions&&r.bodyPositions(e,g,d),m.showVelocity&&r.bodyVelocity(e,g,d),m.showIds&&r.bodyIds(e,g,d),m.showSeparations&&r.separations(e,n.pairs.list,d),m.showCollisions&&r.collisions(e,n.pairs.list,d),m.showVertexNumbers&&r.vertexNumbers(e,g,d),m.showMousePosition&&r.mousePosition(e,e.mouse,d),r.constraints(b,d),m.showBroadphase&&n.broadphase.controller===s&&r.grid(e,n.broadphase,d),m.showDebug&&r.debug(e,d),m.hasBounds&&r.endViewTransform(e),l.trigger(e,"afterRender",x)},r.debug=function(e,t){var n=t,r=e.engine,o=r.world,a=r.metrics,l=e.options;if(i.allBodies(o),r.timing.timestamp-(e.debugTimestamp||0)>=500){var s="";a.timing&&(s+="fps: "+Math.round(a.timing.fps)+"    "),e.debugString=s,e.debugTimestamp=r.timing.timestamp}if(e.debugString){n.font="12px Arial",l.wireframes?n.fillStyle="rgba(255,255,255,0.5)":n.fillStyle="rgba(0,0,0,0.5)";for(var u=e.debugString.split("\n"),c=0;c<u.length;c++)n.fillText(u[c],50,50+18*c)}},r.constraints=function(e,t){for(var n=t,r=0;r<e.length;r++){var i=e[r];if(i.render.visible&&i.pointA&&i.pointB){var a,l,s=i.bodyA,c=i.bodyB;if(a=s?u.add(s.position,i.pointA):i.pointA,"pin"===i.render.type)n.beginPath(),n.arc(a.x,a.y,3,0,2*Math.PI),n.closePath();else{if(l=c?u.add(c.position,i.pointB):i.pointB,n.beginPath(),n.moveTo(a.x,a.y),"spring"===i.render.type)for(var f,d=u.sub(l,a),p=u.perp(u.normalise(d)),m=Math.ceil(o.clamp(i.length/5,12,20)),y=1;y<m;y+=1)f=y%2==0?1:-1,n.lineTo(a.x+d.x*(y/m)+p.x*f*4,a.y+d.y*(y/m)+p.y*f*4);n.lineTo(l.x,l.y)}i.render.lineWidth&&(n.lineWidth=i.render.lineWidth,n.strokeStyle=i.render.strokeStyle,n.stroke()),i.render.anchors&&(n.fillStyle=i.render.strokeStyle,n.beginPath(),n.arc(a.x,a.y,3,0,2*Math.PI),n.arc(l.x,l.y,3,0,2*Math.PI),n.closePath(),n.fill())}}},r.bodyShadows=function(e,t,n){for(var r=n,o=(e.engine,0);o<t.length;o++){var i=t[o];if(i.render.visible){if(i.circleRadius)r.beginPath(),r.arc(i.position.x,i.position.y,i.circleRadius,0,2*Math.PI),r.closePath();else{r.beginPath(),r.moveTo(i.vertices[0].x,i.vertices[0].y);for(var a=1;a<i.vertices.length;a++)r.lineTo(i.vertices[a].x,i.vertices[a].y);r.closePath()}var l=i.position.x-.5*e.options.width,s=i.position.y-.2*e.options.height,u=Math.abs(l)+Math.abs(s);r.shadowColor="rgba(0,0,0,0.15)",r.shadowOffsetX=.05*l,r.shadowOffsetY=.05*s,r.shadowBlur=1+12*Math.min(1,u/1e3),r.fill(),r.shadowColor=null,r.shadowOffsetX=null,r.shadowOffsetY=null,r.shadowBlur=null}}},r.bodies=function(e,t,n){var r,o,i,a,l=n,s=(e.engine,e.options),u=s.showInternalEdges||!s.wireframes;for(i=0;i<t.length;i++)if((r=t[i]).render.visible)for(a=r.parts.length>1?1:0;a<r.parts.length;a++)if((o=r.parts[a]).render.visible){if(s.showSleeping&&r.isSleeping?l.globalAlpha=.5*o.render.opacity:1!==o.render.opacity&&(l.globalAlpha=o.render.opacity),o.render.sprite&&o.render.sprite.texture&&!s.wireframes){var c=o.render.sprite,f=d(e,c.texture);l.translate(o.position.x,o.position.y),l.rotate(o.angle),l.drawImage(f,f.width*-c.xOffset*c.xScale,f.height*-c.yOffset*c.yScale,f.width*c.xScale,f.height*c.yScale),l.rotate(-o.angle),l.translate(-o.position.x,-o.position.y)}else{if(o.circleRadius)l.beginPath(),l.arc(o.position.x,o.position.y,o.circleRadius,0,2*Math.PI);else{l.beginPath(),l.moveTo(o.vertices[0].x,o.vertices[0].y);for(var p=1;p<o.vertices.length;p++)!o.vertices[p-1].isInternal||u?l.lineTo(o.vertices[p].x,o.vertices[p].y):l.moveTo(o.vertices[p].x,o.vertices[p].y),o.vertices[p].isInternal&&!u&&l.moveTo(o.vertices[(p+1)%o.vertices.length].x,o.vertices[(p+1)%o.vertices.length].y);l.lineTo(o.vertices[0].x,o.vertices[0].y),l.closePath()}s.wireframes?(l.lineWidth=1,l.strokeStyle="#bbb",l.stroke()):(l.fillStyle=o.render.fillStyle,o.render.lineWidth&&(l.lineWidth=o.render.lineWidth,l.strokeStyle=o.render.strokeStyle,l.stroke()),l.fill())}l.globalAlpha=1}},r.bodyWireframes=function(e,t,n){var r,o,i,a,l,s=n,u=e.options.showInternalEdges;for(s.beginPath(),i=0;i<t.length;i++)if((r=t[i]).render.visible)for(l=r.parts.length>1?1:0;l<r.parts.length;l++){for(o=r.parts[l],s.moveTo(o.vertices[0].x,o.vertices[0].y),a=1;a<o.vertices.length;a++)!o.vertices[a-1].isInternal||u?s.lineTo(o.vertices[a].x,o.vertices[a].y):s.moveTo(o.vertices[a].x,o.vertices[a].y),o.vertices[a].isInternal&&!u&&s.moveTo(o.vertices[(a+1)%o.vertices.length].x,o.vertices[(a+1)%o.vertices.length].y);s.lineTo(o.vertices[0].x,o.vertices[0].y)}s.lineWidth=1,s.strokeStyle="#bbb",s.stroke()},r.bodyConvexHulls=function(e,t,n){var r,o,i,a=n;for(a.beginPath(),o=0;o<t.length;o++)if((r=t[o]).render.visible&&1!==r.parts.length){for(a.moveTo(r.vertices[0].x,r.vertices[0].y),i=1;i<r.vertices.length;i++)a.lineTo(r.vertices[i].x,r.vertices[i].y);a.lineTo(r.vertices[0].x,r.vertices[0].y)}a.lineWidth=1,a.strokeStyle="rgba(255,255,255,0.2)",a.stroke()},r.vertexNumbers=function(e,t,n){var r,o,i,a=n;for(r=0;r<t.length;r++){var l=t[r].parts;for(i=l.length>1?1:0;i<l.length;i++){var s=l[i];for(o=0;o<s.vertices.length;o++)a.fillStyle="rgba(255,255,255,0.2)",a.fillText(r+"_"+o,s.position.x+.8*(s.vertices[o].x-s.position.x),s.position.y+.8*(s.vertices[o].y-s.position.y))}}},r.mousePosition=function(e,t,n){var r=n;r.fillStyle="rgba(255,255,255,0.8)",r.fillText(t.position.x+"  "+t.position.y,t.position.x+5,t.position.y-5)},r.bodyBounds=function(e,t,n){var r=n,o=(e.engine,e.options);r.beginPath();for(var i=0;i<t.length;i++)if(t[i].render.visible)for(var a=t[i].parts,l=a.length>1?1:0;l<a.length;l++){var s=a[l];r.rect(s.bounds.min.x,s.bounds.min.y,s.bounds.max.x-s.bounds.min.x,s.bounds.max.y-s.bounds.min.y)}o.wireframes?r.strokeStyle="rgba(255,255,255,0.08)":r.strokeStyle="rgba(0,0,0,0.1)",r.lineWidth=1,r.stroke()},r.bodyAxes=function(e,t,n){var r,o,i,a,l=n,s=(e.engine,e.options);for(l.beginPath(),o=0;o<t.length;o++){var u=t[o],c=u.parts;if(u.render.visible)if(s.showAxes)for(i=c.length>1?1:0;i<c.length;i++)for(r=c[i],a=0;a<r.axes.length;a++){var f=r.axes[a];l.moveTo(r.position.x,r.position.y),l.lineTo(r.position.x+20*f.x,r.position.y+20*f.y)}else for(i=c.length>1?1:0;i<c.length;i++)for(r=c[i],a=0;a<r.axes.length;a++)l.moveTo(r.position.x,r.position.y),l.lineTo((r.vertices[0].x+r.vertices[r.vertices.length-1].x)/2,(r.vertices[0].y+r.vertices[r.vertices.length-1].y)/2)}s.wireframes?(l.strokeStyle="indianred",l.lineWidth=1):(l.strokeStyle="rgba(255, 255, 255, 0.4)",l.globalCompositeOperation="overlay",l.lineWidth=2),l.stroke(),l.globalCompositeOperation="source-over"},r.bodyPositions=function(e,t,n){var r,o,i,a,l=n,s=(e.engine,e.options);for(l.beginPath(),i=0;i<t.length;i++)if((r=t[i]).render.visible)for(a=0;a<r.parts.length;a++)o=r.parts[a],l.arc(o.position.x,o.position.y,3,0,2*Math.PI,!1),l.closePath();for(s.wireframes?l.fillStyle="indianred":l.fillStyle="rgba(0,0,0,0.5)",l.fill(),l.beginPath(),i=0;i<t.length;i++)(r=t[i]).render.visible&&(l.arc(r.positionPrev.x,r.positionPrev.y,2,0,2*Math.PI,!1),l.closePath());l.fillStyle="rgba(255,165,0,0.8)",l.fill()},r.bodyVelocity=function(e,t,n){var r=n;r.beginPath();for(var o=0;o<t.length;o++){var i=t[o];i.render.visible&&(r.moveTo(i.position.x,i.position.y),r.lineTo(i.position.x+2*(i.position.x-i.positionPrev.x),i.position.y+2*(i.position.y-i.positionPrev.y)))}r.lineWidth=3,r.strokeStyle="cornflowerblue",r.stroke()},r.bodyIds=function(e,t,n){var r,o,i=n;for(r=0;r<t.length;r++)if(t[r].render.visible){var a=t[r].parts;for(o=a.length>1?1:0;o<a.length;o++){var l=a[o];i.font="12px Arial",i.fillStyle="rgba(255,255,255,0.5)",i.fillText(l.id,l.position.x+10,l.position.y-10)}}},r.collisions=function(e,t,n){var r,o,i,a,l=n,s=e.options;for(l.beginPath(),i=0;i<t.length;i++)if((r=t[i]).isActive)for(o=r.collision,a=0;a<r.activeContacts.length;a++){var u=r.activeContacts[a].vertex;l.rect(u.x-1.5,u.y-1.5,3.5,3.5)}for(s.wireframes?l.fillStyle="rgba(255,255,255,0.7)":l.fillStyle="orange",l.fill(),l.beginPath(),i=0;i<t.length;i++)if((r=t[i]).isActive&&(o=r.collision,r.activeContacts.length>0)){var c=r.activeContacts[0].vertex.x,f=r.activeContacts[0].vertex.y;2===r.activeContacts.length&&(c=(r.activeContacts[0].vertex.x+r.activeContacts[1].vertex.x)/2,f=(r.activeContacts[0].vertex.y+r.activeContacts[1].vertex.y)/2),o.bodyB===o.supports[0].body||!0===o.bodyA.isStatic?l.moveTo(c-8*o.normal.x,f-8*o.normal.y):l.moveTo(c+8*o.normal.x,f+8*o.normal.y),l.lineTo(c,f)}s.wireframes?l.strokeStyle="rgba(255,165,0,0.7)":l.strokeStyle="orange",l.lineWidth=1,l.stroke()},r.separations=function(e,t,n){var r,o,i,a,l,s=n,u=e.options;for(s.beginPath(),l=0;l<t.length;l++)if((r=t[l]).isActive){i=(o=r.collision).bodyA;var c=1;(a=o.bodyB).isStatic||i.isStatic||(c=.5),a.isStatic&&(c=0),s.moveTo(a.position.x,a.position.y),s.lineTo(a.position.x-o.penetration.x*c,a.position.y-o.penetration.y*c),c=1,a.isStatic||i.isStatic||(c=.5),i.isStatic&&(c=0),s.moveTo(i.position.x,i.position.y),s.lineTo(i.position.x+o.penetration.x*c,i.position.y+o.penetration.y*c)}u.wireframes?s.strokeStyle="rgba(255,165,0,0.5)":s.strokeStyle="orange",s.stroke()},r.grid=function(e,t,n){var r=n;e.options.wireframes?r.strokeStyle="rgba(255,180,0,0.1)":r.strokeStyle="rgba(255,180,0,0.5)",r.beginPath();for(var i=o.keys(t.buckets),a=0;a<i.length;a++){var l=i[a];if(!(t.buckets[l].length<2)){var s=l.split(/C|R/);r.rect(.5+parseInt(s[1],10)*t.bucketWidth,.5+parseInt(s[2],10)*t.bucketHeight,t.bucketWidth,t.bucketHeight)}}r.lineWidth=1,r.stroke()},r.inspector=function(e,t){e.engine;var n,r=e.selected,o=e.render,i=o.options;if(i.hasBounds){var a=o.bounds.max.x-o.bounds.min.x,l=o.bounds.max.y-o.bounds.min.y,s=a/o.options.width,u=l/o.options.height;t.scale(1/s,1/u),t.translate(-o.bounds.min.x,-o.bounds.min.y)}for(var c=0;c<r.length;c++){var f=r[c].data;switch(t.translate(.5,.5),t.lineWidth=1,t.strokeStyle="rgba(255,165,0,0.9)",t.setLineDash([1,2]),f.type){case"body":n=f.bounds,t.beginPath(),t.rect(Math.floor(n.min.x-3),Math.floor(n.min.y-3),Math.floor(n.max.x-n.min.x+6),Math.floor(n.max.y-n.min.y+6)),t.closePath(),t.stroke();break;case"constraint":var d=f.pointA;f.bodyA&&(d=f.pointB),t.beginPath(),t.arc(d.x,d.y,10,0,2*Math.PI),t.closePath(),t.stroke()}t.setLineDash([]),t.translate(-.5,-.5)}null!==e.selectStart&&(t.translate(.5,.5),t.lineWidth=1,t.strokeStyle="rgba(255,165,0,0.6)",t.fillStyle="rgba(255,165,0,0.1)",n=e.selectBounds,t.beginPath(),t.rect(Math.floor(n.min.x),Math.floor(n.min.y),Math.floor(n.max.x-n.min.x),Math.floor(n.max.y-n.min.y)),t.closePath(),t.stroke(),t.fill(),t.translate(-.5,-.5)),i.hasBounds&&t.setTransform(1,0,0,1,0,0)};var n=function(e,t){var n=document.createElement("canvas");return n.width=e,n.height=t,n.oncontextmenu=function(){return!1},n.onselectstart=function(){return!1},n},f=function(e){var t=e.getContext("2d");return(window.devicePixelRatio||1)/(t.webkitBackingStorePixelRatio||t.mozBackingStorePixelRatio||t.msBackingStorePixelRatio||t.oBackingStorePixelRatio||t.backingStorePixelRatio||1)},d=function(e,t){var n=e.textures[t];return n||((n=e.textures[t]=new Image).src=t,n)},p=function(e,t){var n=t;/(jpg|gif|png)$/.test(t)&&(n="url("+t+")"),e.canvas.style.background=n,e.canvas.style.backgroundSize="contain",e.currentBackground=t}}()},{"../body/Composite":2,"../collision/Grid":6,"../core/Common":14,"../core/Events":16,"../core/Mouse":19,"../geometry/Bounds":26,"../geometry/Vector":28}],32:[function(e,t,n){var r={};t.exports=r;var o=e("../geometry/Bounds"),i=e("../body/Composite"),a=e("../core/Common"),l=e("../core/Events"),s=e("../geometry/Vector");!function(){var e,t;"undefined"!=typeof window&&(e=window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.msRequestAnimationFrame||function(e){window.setTimeout((function(){e(a.now())}),1e3/60)},t=window.cancelAnimationFrame||window.mozCancelAnimationFrame||window.webkitCancelAnimationFrame||window.msCancelAnimationFrame),r.create=function(e){a.warn("RenderPixi.create: Matter.RenderPixi is deprecated (see docs)");var t={controller:r,engine:null,element:null,frameRequestId:null,canvas:null,renderer:null,container:null,spriteContainer:null,pixiOptions:null,options:{width:800,height:600,background:"#fafafa",wireframeBackground:"#222",hasBounds:!1,enabled:!0,wireframes:!0,showSleeping:!0,showDebug:!1,showBroadphase:!1,showBounds:!1,showVelocity:!1,showCollisions:!1,showAxes:!1,showPositions:!1,showAngleIndicator:!1,showIds:!1,showShadows:!1}},n=a.extend(t,e),o=!n.options.wireframes&&"transparent"===n.options.background;return n.pixiOptions=n.pixiOptions||{view:n.canvas,transparent:o,antialias:!0,backgroundColor:e.background},n.mouse=e.mouse,n.engine=e.engine,n.renderer=n.renderer||new PIXI.WebGLRenderer(n.options.width,n.options.height,n.pixiOptions),n.container=n.container||new PIXI.Container,n.spriteContainer=n.spriteContainer||new PIXI.Container,n.canvas=n.canvas||n.renderer.view,n.bounds=n.bounds||{min:{x:0,y:0},max:{x:n.options.width,y:n.options.height}},l.on(n.engine,"beforeUpdate",(function(){r.clear(n)})),n.textures={},n.sprites={},n.primitives={},n.container.addChild(n.spriteContainer),a.isElement(n.element)?n.element.appendChild(n.canvas):a.warn('No "render.element" passed, "render.canvas" was not inserted into document.'),n.canvas.oncontextmenu=function(){return!1},n.canvas.onselectstart=function(){return!1},n},r.run=function(t){!function n(o){t.frameRequestId=e(n),r.world(t)}()},r.stop=function(e){t(e.frameRequestId)},r.clear=function(e){for(var t=e.container,n=e.spriteContainer;t.children[0];)t.removeChild(t.children[0]);for(;n.children[0];)n.removeChild(n.children[0]);var r=e.sprites["bg-0"];e.textures={},e.sprites={},e.primitives={},e.sprites["bg-0"]=r,r&&t.addChildAt(r,0),e.container.addChild(e.spriteContainer),e.currentBackground=null,t.scale.set(1,1),t.position.set(0,0)},r.setBackground=function(e,t){if(e.currentBackground!==t){var n=t.indexOf&&-1!==t.indexOf("#"),r=e.sprites["bg-0"];if(n){var o=a.colorToNumber(t);e.renderer.backgroundColor=o,r&&e.container.removeChild(r)}else if(!r){var i=c(e,t);(r=e.sprites["bg-0"]=new PIXI.Sprite(i)).position.x=0,r.position.y=0,e.container.addChildAt(r,0)}e.currentBackground=t}},r.world=function(e){var t,n=e.engine.world,a=e.renderer,l=e.container,u=e.options,c=i.allBodies(n),f=i.allConstraints(n),d=[];u.wireframes?r.setBackground(e,u.wireframeBackground):r.setBackground(e,u.background);var p=e.bounds.max.x-e.bounds.min.x,m=e.bounds.max.y-e.bounds.min.y,y=p/e.options.width,h=m/e.options.height;if(u.hasBounds){for(t=0;t<c.length;t++){var v=c[t];v.render.sprite.visible=o.overlaps(v.bounds,e.bounds)}for(t=0;t<f.length;t++){var g=f[t],b=g.bodyA,x=g.bodyB,w=g.pointA,S=g.pointB;b&&(w=s.add(b.position,g.pointA)),x&&(S=s.add(x.position,g.pointB)),w&&S&&(o.contains(e.bounds,w)||o.contains(e.bounds,S))&&d.push(g)}l.scale.set(1/y,1/h),l.position.set(-e.bounds.min.x*(1/y),-e.bounds.min.y*(1/h))}else d=f;for(t=0;t<c.length;t++)r.body(e,c[t]);for(t=0;t<d.length;t++)r.constraint(e,d[t]);a.render(l)},r.constraint=function(e,t){e.engine;var n=t.bodyA,r=t.bodyB,o=t.pointA,i=t.pointB,l=e.container,s=t.render,u="c-"+t.id,c=e.primitives[u];c||(c=e.primitives[u]=new PIXI.Graphics),s.visible&&t.pointA&&t.pointB?(-1===a.indexOf(l.children,c)&&l.addChild(c),c.clear(),c.beginFill(0,0),c.lineStyle(s.lineWidth,a.colorToNumber(s.strokeStyle),1),n?c.moveTo(n.position.x+o.x,n.position.y+o.y):c.moveTo(o.x,o.y),r?c.lineTo(r.position.x+i.x,r.position.y+i.y):c.lineTo(i.x,i.y),c.endFill()):c.clear()},r.body=function(e,t){e.engine;var r=t.render;if(r.visible)if(r.sprite&&r.sprite.texture){var o="b-"+t.id,i=e.sprites[o],l=e.spriteContainer;i||(i=e.sprites[o]=n(e,t)),-1===a.indexOf(l.children,i)&&l.addChild(i),i.position.x=t.position.x,i.position.y=t.position.y,i.rotation=t.angle,i.scale.x=r.sprite.xScale||1,i.scale.y=r.sprite.yScale||1}else{var s="b-"+t.id,c=e.primitives[s],f=e.container;c||((c=e.primitives[s]=u(e,t)).initialAngle=t.angle),-1===a.indexOf(f.children,c)&&f.addChild(c),c.position.x=t.position.x,c.position.y=t.position.y,c.rotation=t.angle-c.initialAngle}};var n=function(e,t){var n=t.render.sprite.texture,r=c(e,n),o=new PIXI.Sprite(r);return o.anchor.x=t.render.sprite.xOffset,o.anchor.y=t.render.sprite.yOffset,o},u=function(e,t){var n,r=t.render,o=e.options,i=new PIXI.Graphics,l=a.colorToNumber(r.fillStyle),s=a.colorToNumber(r.strokeStyle),u=a.colorToNumber(r.strokeStyle),c=a.colorToNumber("#bbb"),f=a.colorToNumber("#CD5C5C");i.clear();for(var d=t.parts.length>1?1:0;d<t.parts.length;d++){n=t.parts[d],o.wireframes?(i.beginFill(0,0),i.lineStyle(1,c,1)):(i.beginFill(l,1),i.lineStyle(r.lineWidth,s,1)),i.moveTo(n.vertices[0].x-t.position.x,n.vertices[0].y-t.position.y);for(var p=1;p<n.vertices.length;p++)i.lineTo(n.vertices[p].x-t.position.x,n.vertices[p].y-t.position.y);i.lineTo(n.vertices[0].x-t.position.x,n.vertices[0].y-t.position.y),i.endFill(),(o.showAngleIndicator||o.showAxes)&&(i.beginFill(0,0),o.wireframes?i.lineStyle(1,f,1):i.lineStyle(1,u),i.moveTo(n.position.x-t.position.x,n.position.y-t.position.y),i.lineTo((n.vertices[0].x+n.vertices[n.vertices.length-1].x)/2-t.position.x,(n.vertices[0].y+n.vertices[n.vertices.length-1].y)/2-t.position.y),i.endFill())}return i},c=function(e,t){var n=e.textures[t];return n||(n=e.textures[t]=PIXI.Texture.fromImage(t)),n}}()},{"../body/Composite":2,"../core/Common":14,"../core/Events":16,"../geometry/Bounds":26,"../geometry/Vector":28}]},{},[30])(30)}).call(this,n(10))},function(e,t,n){"use strict";e.exports=n(6)},function(e,t,n){e.exports=n(13)()},function(e,t,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var r=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,i=Object.prototype.propertyIsEnumerable;function a(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(e){r[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var n,l,s=a(e),u=1;u<arguments.length;u++){for(var c in n=Object(arguments[u]))o.call(n,c)&&(s[c]=n[c]);if(r){l=r(n);for(var f=0;f<l.length;f++)i.call(n,l[f])&&(s[l[f]]=n[l[f]])}}return s}},function(e,t,n){"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE){0;try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}}(),e.exports=n(7)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.World=t.TileMap=t.Stage=t.Sprite=t.KeyListener=t.Loop=t.Body=t.AudioPlayer=void 0;var r=f(n(11)),o=f(n(12)),i=f(n(15)),a=f(n(17)),l=f(n(18)),s=f(n(19)),u=f(n(20)),c=f(n(21));function f(e){return e&&e.__esModule?e:{default:e}}t.AudioPlayer=r.default,t.Body=o.default,t.Loop=i.default,t.KeyListener=a.default,t.Sprite=l.default,t.Stage=s.default,t.TileMap=u.default,t.World=c.default},function(e,t,n){"use strict";
/** @license React v16.13.1
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(3),o="function"==typeof Symbol&&Symbol.for,i=o?Symbol.for("react.element"):60103,a=o?Symbol.for("react.portal"):60106,l=o?Symbol.for("react.fragment"):60107,s=o?Symbol.for("react.strict_mode"):60108,u=o?Symbol.for("react.profiler"):60114,c=o?Symbol.for("react.provider"):60109,f=o?Symbol.for("react.context"):60110,d=o?Symbol.for("react.forward_ref"):60112,p=o?Symbol.for("react.suspense"):60113,m=o?Symbol.for("react.memo"):60115,y=o?Symbol.for("react.lazy"):60116,h="function"==typeof Symbol&&Symbol.iterator;function v(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var g={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},b={};function x(e,t,n){this.props=e,this.context=t,this.refs=b,this.updater=n||g}function w(){}function S(e,t,n){this.props=e,this.context=t,this.refs=b,this.updater=n||g}x.prototype.isReactComponent={},x.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error(v(85));this.updater.enqueueSetState(this,e,t,"setState")},x.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},w.prototype=x.prototype;var k=S.prototype=new w;k.constructor=S,r(k,x.prototype),k.isPureReactComponent=!0;var C={current:null},T=Object.prototype.hasOwnProperty,E={key:!0,ref:!0,__self:!0,__source:!0};function P(e,t,n){var r,o={},a=null,l=null;if(null!=t)for(r in void 0!==t.ref&&(l=t.ref),void 0!==t.key&&(a=""+t.key),t)T.call(t,r)&&!E.hasOwnProperty(r)&&(o[r]=t[r]);var s=arguments.length-2;if(1===s)o.children=n;else if(1<s){for(var u=Array(s),c=0;c<s;c++)u[c]=arguments[c+2];o.children=u}if(e&&e.defaultProps)for(r in s=e.defaultProps)void 0===o[r]&&(o[r]=s[r]);return{$$typeof:i,type:e,key:a,ref:l,props:o,_owner:C.current}}function _(e){return"object"==typeof e&&null!==e&&e.$$typeof===i}var M=/\/+/g,A=[];function O(e,t,n,r){if(A.length){var o=A.pop();return o.result=e,o.keyPrefix=t,o.func=n,o.context=r,o.count=0,o}return{result:e,keyPrefix:t,func:n,context:r,count:0}}function I(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>A.length&&A.push(e)}function B(e,t,n){return null==e?0:function e(t,n,r,o){var l=typeof t;"undefined"!==l&&"boolean"!==l||(t=null);var s=!1;if(null===t)s=!0;else switch(l){case"string":case"number":s=!0;break;case"object":switch(t.$$typeof){case i:case a:s=!0}}if(s)return r(o,t,""===n?"."+R(t,0):n),1;if(s=0,n=""===n?".":n+":",Array.isArray(t))for(var u=0;u<t.length;u++){var c=n+R(l=t[u],u);s+=e(l,c,r,o)}else if(null===t||"object"!=typeof t?c=null:c="function"==typeof(c=h&&t[h]||t["@@iterator"])?c:null,"function"==typeof c)for(t=c.call(t),u=0;!(l=t.next()).done;)s+=e(l=l.value,c=n+R(l,u++),r,o);else if("object"===l)throw r=""+t,Error(v(31,"[object Object]"===r?"object with keys {"+Object.keys(t).join(", ")+"}":r,""));return s}(e,"",t,n)}function R(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,(function(e){return t[e]}))}(e.key):t.toString(36)}function N(e,t){e.func.call(e.context,t,e.count++)}function L(e,t,n){var r=e.result,o=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?j(e,r,n,(function(e){return e})):null!=e&&(_(e)&&(e=function(e,t){return{$$typeof:i,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(e,o+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(M,"$&/")+"/")+n)),r.push(e))}function j(e,t,n,r,o){var i="";null!=n&&(i=(""+n).replace(M,"$&/")+"/"),B(e,L,t=O(t,i,r,o)),I(t)}var F={current:null};function D(){var e=F.current;if(null===e)throw Error(v(321));return e}var z={ReactCurrentDispatcher:F,ReactCurrentBatchConfig:{suspense:null},ReactCurrentOwner:C,IsSomeRendererActing:{current:!1},assign:r};t.Children={map:function(e,t,n){if(null==e)return e;var r=[];return j(e,r,null,t,n),r},forEach:function(e,t,n){if(null==e)return e;B(e,N,t=O(null,null,t,n)),I(t)},count:function(e){return B(e,(function(){return null}),null)},toArray:function(e){var t=[];return j(e,t,null,(function(e){return e})),t},only:function(e){if(!_(e))throw Error(v(143));return e}},t.Component=x,t.Fragment=l,t.Profiler=u,t.PureComponent=S,t.StrictMode=s,t.Suspense=p,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=z,t.cloneElement=function(e,t,n){if(null==e)throw Error(v(267,e));var o=r({},e.props),a=e.key,l=e.ref,s=e._owner;if(null!=t){if(void 0!==t.ref&&(l=t.ref,s=C.current),void 0!==t.key&&(a=""+t.key),e.type&&e.type.defaultProps)var u=e.type.defaultProps;for(c in t)T.call(t,c)&&!E.hasOwnProperty(c)&&(o[c]=void 0===t[c]&&void 0!==u?u[c]:t[c])}var c=arguments.length-2;if(1===c)o.children=n;else if(1<c){u=Array(c);for(var f=0;f<c;f++)u[f]=arguments[f+2];o.children=u}return{$$typeof:i,type:e.type,key:a,ref:l,props:o,_owner:s}},t.createContext=function(e,t){return void 0===t&&(t=null),(e={$$typeof:f,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:c,_context:e},e.Consumer=e},t.createElement=P,t.createFactory=function(e){var t=P.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:d,render:e}},t.isValidElement=_,t.lazy=function(e){return{$$typeof:y,_ctor:e,_status:-1,_result:null}},t.memo=function(e,t){return{$$typeof:m,type:e,compare:void 0===t?null:t}},t.useCallback=function(e,t){return D().useCallback(e,t)},t.useContext=function(e,t){return D().useContext(e,t)},t.useDebugValue=function(){},t.useEffect=function(e,t){return D().useEffect(e,t)},t.useImperativeHandle=function(e,t,n){return D().useImperativeHandle(e,t,n)},t.useLayoutEffect=function(e,t){return D().useLayoutEffect(e,t)},t.useMemo=function(e,t){return D().useMemo(e,t)},t.useReducer=function(e,t,n){return D().useReducer(e,t,n)},t.useRef=function(e){return D().useRef(e)},t.useState=function(e){return D().useState(e)},t.version="16.13.1"},function(e,t,n){"use strict";
/** @license React v16.13.1
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(1),o=n(3),i=n(8);function a(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!r)throw Error(a(227));function l(e,t,n,r,o,i,a,l,s){var u=Array.prototype.slice.call(arguments,3);try{t.apply(n,u)}catch(e){this.onError(e)}}var s=!1,u=null,c=!1,f=null,d={onError:function(e){s=!0,u=e}};function p(e,t,n,r,o,i,a,c,f){s=!1,u=null,l.apply(d,arguments)}var m=null,y=null,h=null;function v(e,t,n){var r=e.type||"unknown-event";e.currentTarget=h(n),function(e,t,n,r,o,i,l,d,m){if(p.apply(this,arguments),s){if(!s)throw Error(a(198));var y=u;s=!1,u=null,c||(c=!0,f=y)}}(r,t,void 0,e),e.currentTarget=null}var g=null,b={};function x(){if(g)for(var e in b){var t=b[e],n=g.indexOf(e);if(!(-1<n))throw Error(a(96,e));if(!S[n]){if(!t.extractEvents)throw Error(a(97,e));for(var r in S[n]=t,n=t.eventTypes){var o=void 0,i=n[r],l=t,s=r;if(k.hasOwnProperty(s))throw Error(a(99,s));k[s]=i;var u=i.phasedRegistrationNames;if(u){for(o in u)u.hasOwnProperty(o)&&w(u[o],l,s);o=!0}else i.registrationName?(w(i.registrationName,l,s),o=!0):o=!1;if(!o)throw Error(a(98,r,e))}}}}function w(e,t,n){if(C[e])throw Error(a(100,e));C[e]=t,T[e]=t.eventTypes[n].dependencies}var S=[],k={},C={},T={};function E(e){var t,n=!1;for(t in e)if(e.hasOwnProperty(t)){var r=e[t];if(!b.hasOwnProperty(t)||b[t]!==r){if(b[t])throw Error(a(102,t));b[t]=r,n=!0}}n&&x()}var P=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),_=null,M=null,A=null;function O(e){if(e=y(e)){if("function"!=typeof _)throw Error(a(280));var t=e.stateNode;t&&(t=m(t),_(e.stateNode,e.type,t))}}function I(e){M?A?A.push(e):A=[e]:M=e}function B(){if(M){var e=M,t=A;if(A=M=null,O(e),t)for(e=0;e<t.length;e++)O(t[e])}}function R(e,t){return e(t)}function N(e,t,n,r,o){return e(t,n,r,o)}function L(){}var j=R,F=!1,D=!1;function z(){null===M&&null===A||(L(),B())}function V(e,t,n){if(D)return e(t,n);D=!0;try{return j(e,t,n)}finally{D=!1,z()}}var W=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,U=Object.prototype.hasOwnProperty,H={},q={};function Q(e,t,n,r,o,i){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=i}var $={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){$[e]=new Q(e,0,!1,e,null,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];$[t]=new Q(t,1,!1,e[1],null,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){$[e]=new Q(e,2,!1,e.toLowerCase(),null,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){$[e]=new Q(e,2,!1,e,null,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){$[e]=new Q(e,3,!1,e.toLowerCase(),null,!1)})),["checked","multiple","muted","selected"].forEach((function(e){$[e]=new Q(e,3,!0,e,null,!1)})),["capture","download"].forEach((function(e){$[e]=new Q(e,4,!1,e,null,!1)})),["cols","rows","size","span"].forEach((function(e){$[e]=new Q(e,6,!1,e,null,!1)})),["rowSpan","start"].forEach((function(e){$[e]=new Q(e,5,!1,e.toLowerCase(),null,!1)}));var G=/[\-:]([a-z])/g;function K(e){return e[1].toUpperCase()}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(G,K);$[t]=new Q(t,1,!1,e,null,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(G,K);$[t]=new Q(t,1,!1,e,"http://www.w3.org/1999/xlink",!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(G,K);$[t]=new Q(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1)})),["tabIndex","crossOrigin"].forEach((function(e){$[e]=new Q(e,1,!1,e.toLowerCase(),null,!1)})),$.xlinkHref=new Q("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0),["src","href","action","formAction"].forEach((function(e){$[e]=new Q(e,1,!1,e.toLowerCase(),null,!0)}));var X=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;function Y(e,t,n,r){var o=$.hasOwnProperty(t)?$[t]:null;(null!==o?0===o.type:!r&&(2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1])))||(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,o,r)&&(n=null),r||null===o?function(e){return!!U.call(q,e)||!U.call(H,e)&&(W.test(e)?q[e]=!0:(H[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=null===n?3!==o.type&&"":n:(t=o.attributeName,r=o.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}X.hasOwnProperty("ReactCurrentDispatcher")||(X.ReactCurrentDispatcher={current:null}),X.hasOwnProperty("ReactCurrentBatchConfig")||(X.ReactCurrentBatchConfig={suspense:null});var Z=/^(.*)[\\\/]/,J="function"==typeof Symbol&&Symbol.for,ee=J?Symbol.for("react.element"):60103,te=J?Symbol.for("react.portal"):60106,ne=J?Symbol.for("react.fragment"):60107,re=J?Symbol.for("react.strict_mode"):60108,oe=J?Symbol.for("react.profiler"):60114,ie=J?Symbol.for("react.provider"):60109,ae=J?Symbol.for("react.context"):60110,le=J?Symbol.for("react.concurrent_mode"):60111,se=J?Symbol.for("react.forward_ref"):60112,ue=J?Symbol.for("react.suspense"):60113,ce=J?Symbol.for("react.suspense_list"):60120,fe=J?Symbol.for("react.memo"):60115,de=J?Symbol.for("react.lazy"):60116,pe=J?Symbol.for("react.block"):60121,me="function"==typeof Symbol&&Symbol.iterator;function ye(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=me&&e[me]||e["@@iterator"])?e:null}function he(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case ne:return"Fragment";case te:return"Portal";case oe:return"Profiler";case re:return"StrictMode";case ue:return"Suspense";case ce:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case ae:return"Context.Consumer";case ie:return"Context.Provider";case se:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case fe:return he(e.type);case pe:return he(e.render);case de:if(e=1===e._status?e._result:null)return he(e)}return null}function ve(e){var t="";do{e:switch(e.tag){case 3:case 4:case 6:case 7:case 10:case 9:var n="";break e;default:var r=e._debugOwner,o=e._debugSource,i=he(e.type);n=null,r&&(n=he(r.type)),r=i,i="",o?i=" (at "+o.fileName.replace(Z,"")+":"+o.lineNumber+")":n&&(i=" (created by "+n+")"),n="\n    in "+(r||"Unknown")+i}t+=n,e=e.return}while(e);return t}function ge(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function be(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function xe(e){e._valueTracker||(e._valueTracker=function(e){var t=be(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var o=n.get,i=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){r=""+e,i.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function we(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=be(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function Se(e,t){var n=t.checked;return o({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function ke(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=ge(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function Ce(e,t){null!=(t=t.checked)&&Y(e,"checked",t,!1)}function Te(e,t){Ce(e,t);var n=ge(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?Pe(e,t.type,n):t.hasOwnProperty("defaultValue")&&Pe(e,t.type,ge(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function Ee(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function Pe(e,t,n){"number"===t&&e.ownerDocument.activeElement===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}function _e(e,t){return e=o({children:void 0},t),(t=function(e){var t="";return r.Children.forEach(e,(function(e){null!=e&&(t+=e)})),t}(t.children))&&(e.children=t),e}function Me(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+ge(n),t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function Ae(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(a(91));return o({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function Oe(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(a(92));if(Array.isArray(n)){if(!(1>=n.length))throw Error(a(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:ge(n)}}function Ie(e,t){var n=ge(t.value),r=ge(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function Be(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}var Re="http://www.w3.org/1999/xhtml",Ne="http://www.w3.org/2000/svg";function Le(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function je(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?Le(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var Fe,De=function(e){return"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(t,n,r,o){MSApp.execUnsafeLocalFunction((function(){return e(t,n)}))}:e}((function(e,t){if(e.namespaceURI!==Ne||"innerHTML"in e)e.innerHTML=t;else{for((Fe=Fe||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=Fe.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}}));function ze(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}function Ve(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var We={animationend:Ve("Animation","AnimationEnd"),animationiteration:Ve("Animation","AnimationIteration"),animationstart:Ve("Animation","AnimationStart"),transitionend:Ve("Transition","TransitionEnd")},Ue={},He={};function qe(e){if(Ue[e])return Ue[e];if(!We[e])return e;var t,n=We[e];for(t in n)if(n.hasOwnProperty(t)&&t in He)return Ue[e]=n[t];return e}P&&(He=document.createElement("div").style,"AnimationEvent"in window||(delete We.animationend.animation,delete We.animationiteration.animation,delete We.animationstart.animation),"TransitionEvent"in window||delete We.transitionend.transition);var Qe=qe("animationend"),$e=qe("animationiteration"),Ge=qe("animationstart"),Ke=qe("transitionend"),Xe="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Ye=new("function"==typeof WeakMap?WeakMap:Map);function Ze(e){var t=Ye.get(e);return void 0===t&&(t=new Map,Ye.set(e,t)),t}function Je(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(1026&(t=e).effectTag)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function et(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&(null!==(e=e.alternate)&&(t=e.memoizedState)),null!==t)return t.dehydrated}return null}function tt(e){if(Je(e)!==e)throw Error(a(188))}function nt(e){if(!(e=function(e){var t=e.alternate;if(!t){if(null===(t=Je(e)))throw Error(a(188));return t!==e?null:e}for(var n=e,r=t;;){var o=n.return;if(null===o)break;var i=o.alternate;if(null===i){if(null!==(r=o.return)){n=r;continue}break}if(o.child===i.child){for(i=o.child;i;){if(i===n)return tt(o),e;if(i===r)return tt(o),t;i=i.sibling}throw Error(a(188))}if(n.return!==r.return)n=o,r=i;else{for(var l=!1,s=o.child;s;){if(s===n){l=!0,n=o,r=i;break}if(s===r){l=!0,r=o,n=i;break}s=s.sibling}if(!l){for(s=i.child;s;){if(s===n){l=!0,n=i,r=o;break}if(s===r){l=!0,r=i,n=o;break}s=s.sibling}if(!l)throw Error(a(189))}}if(n.alternate!==r)throw Error(a(190))}if(3!==n.tag)throw Error(a(188));return n.stateNode.current===n?e:t}(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}function rt(e,t){if(null==t)throw Error(a(30));return null==e?t:Array.isArray(e)?Array.isArray(t)?(e.push.apply(e,t),e):(e.push(t),e):Array.isArray(t)?[e].concat(t):[e,t]}function ot(e,t,n){Array.isArray(e)?e.forEach(t,n):e&&t.call(n,e)}var it=null;function at(e){if(e){var t=e._dispatchListeners,n=e._dispatchInstances;if(Array.isArray(t))for(var r=0;r<t.length&&!e.isPropagationStopped();r++)v(e,t[r],n[r]);else t&&v(e,t,n);e._dispatchListeners=null,e._dispatchInstances=null,e.isPersistent()||e.constructor.release(e)}}function lt(e){if(null!==e&&(it=rt(it,e)),e=it,it=null,e){if(ot(e,at),it)throw Error(a(95));if(c)throw e=f,c=!1,f=null,e}}function st(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}function ut(e){if(!P)return!1;var t=(e="on"+e)in document;return t||((t=document.createElement("div")).setAttribute(e,"return;"),t="function"==typeof t[e]),t}var ct=[];function ft(e){e.topLevelType=null,e.nativeEvent=null,e.targetInst=null,e.ancestors.length=0,10>ct.length&&ct.push(e)}function dt(e,t,n,r){if(ct.length){var o=ct.pop();return o.topLevelType=e,o.eventSystemFlags=r,o.nativeEvent=t,o.targetInst=n,o}return{topLevelType:e,eventSystemFlags:r,nativeEvent:t,targetInst:n,ancestors:[]}}function pt(e){var t=e.targetInst,n=t;do{if(!n){e.ancestors.push(n);break}var r=n;if(3===r.tag)r=r.stateNode.containerInfo;else{for(;r.return;)r=r.return;r=3!==r.tag?null:r.stateNode.containerInfo}if(!r)break;5!==(t=n.tag)&&6!==t||e.ancestors.push(n),n=Pn(r)}while(n);for(n=0;n<e.ancestors.length;n++){t=e.ancestors[n];var o=st(e.nativeEvent);r=e.topLevelType;var i=e.nativeEvent,a=e.eventSystemFlags;0===n&&(a|=64);for(var l=null,s=0;s<S.length;s++){var u=S[s];u&&(u=u.extractEvents(r,t,i,o,a))&&(l=rt(l,u))}lt(l)}}function mt(e,t,n){if(!n.has(e)){switch(e){case"scroll":Gt(t,"scroll",!0);break;case"focus":case"blur":Gt(t,"focus",!0),Gt(t,"blur",!0),n.set("blur",null),n.set("focus",null);break;case"cancel":case"close":ut(e)&&Gt(t,e,!0);break;case"invalid":case"submit":case"reset":break;default:-1===Xe.indexOf(e)&&$t(e,t)}n.set(e,null)}}var yt,ht,vt,gt=!1,bt=[],xt=null,wt=null,St=null,kt=new Map,Ct=new Map,Tt=[],Et="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput close cancel copy cut paste click change contextmenu reset submit".split(" "),Pt="focus blur dragenter dragleave mouseover mouseout pointerover pointerout gotpointercapture lostpointercapture".split(" ");function _t(e,t,n,r,o){return{blockedOn:e,topLevelType:t,eventSystemFlags:32|n,nativeEvent:o,container:r}}function Mt(e,t){switch(e){case"focus":case"blur":xt=null;break;case"dragenter":case"dragleave":wt=null;break;case"mouseover":case"mouseout":St=null;break;case"pointerover":case"pointerout":kt.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":Ct.delete(t.pointerId)}}function At(e,t,n,r,o,i){return null===e||e.nativeEvent!==i?(e=_t(t,n,r,o,i),null!==t&&(null!==(t=_n(t))&&ht(t)),e):(e.eventSystemFlags|=r,e)}function Ot(e){var t=Pn(e.target);if(null!==t){var n=Je(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=et(n)))return e.blockedOn=t,void i.unstable_runWithPriority(e.priority,(function(){vt(n)}))}else if(3===t&&n.stateNode.hydrate)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function It(e){if(null!==e.blockedOn)return!1;var t=Zt(e.topLevelType,e.eventSystemFlags,e.container,e.nativeEvent);if(null!==t){var n=_n(t);return null!==n&&ht(n),e.blockedOn=t,!1}return!0}function Bt(e,t,n){It(e)&&n.delete(t)}function Rt(){for(gt=!1;0<bt.length;){var e=bt[0];if(null!==e.blockedOn){null!==(e=_n(e.blockedOn))&&yt(e);break}var t=Zt(e.topLevelType,e.eventSystemFlags,e.container,e.nativeEvent);null!==t?e.blockedOn=t:bt.shift()}null!==xt&&It(xt)&&(xt=null),null!==wt&&It(wt)&&(wt=null),null!==St&&It(St)&&(St=null),kt.forEach(Bt),Ct.forEach(Bt)}function Nt(e,t){e.blockedOn===t&&(e.blockedOn=null,gt||(gt=!0,i.unstable_scheduleCallback(i.unstable_NormalPriority,Rt)))}function Lt(e){function t(t){return Nt(t,e)}if(0<bt.length){Nt(bt[0],e);for(var n=1;n<bt.length;n++){var r=bt[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==xt&&Nt(xt,e),null!==wt&&Nt(wt,e),null!==St&&Nt(St,e),kt.forEach(t),Ct.forEach(t),n=0;n<Tt.length;n++)(r=Tt[n]).blockedOn===e&&(r.blockedOn=null);for(;0<Tt.length&&null===(n=Tt[0]).blockedOn;)Ot(n),null===n.blockedOn&&Tt.shift()}var jt={},Ft=new Map,Dt=new Map,zt=["abort","abort",Qe,"animationEnd",$e,"animationIteration",Ge,"animationStart","canplay","canPlay","canplaythrough","canPlayThrough","durationchange","durationChange","emptied","emptied","encrypted","encrypted","ended","ended","error","error","gotpointercapture","gotPointerCapture","load","load","loadeddata","loadedData","loadedmetadata","loadedMetadata","loadstart","loadStart","lostpointercapture","lostPointerCapture","playing","playing","progress","progress","seeking","seeking","stalled","stalled","suspend","suspend","timeupdate","timeUpdate",Ke,"transitionEnd","waiting","waiting"];function Vt(e,t){for(var n=0;n<e.length;n+=2){var r=e[n],o=e[n+1],i="on"+(o[0].toUpperCase()+o.slice(1));i={phasedRegistrationNames:{bubbled:i,captured:i+"Capture"},dependencies:[r],eventPriority:t},Dt.set(r,t),Ft.set(r,i),jt[o]=i}}Vt("blur blur cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focus focus input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "),0),Vt("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "),1),Vt(zt,2);for(var Wt="change selectionchange textInput compositionstart compositionend compositionupdate".split(" "),Ut=0;Ut<Wt.length;Ut++)Dt.set(Wt[Ut],0);var Ht=i.unstable_UserBlockingPriority,qt=i.unstable_runWithPriority,Qt=!0;function $t(e,t){Gt(t,e,!1)}function Gt(e,t,n){var r=Dt.get(t);switch(void 0===r?2:r){case 0:r=Kt.bind(null,t,1,e);break;case 1:r=Xt.bind(null,t,1,e);break;default:r=Yt.bind(null,t,1,e)}n?e.addEventListener(t,r,!0):e.addEventListener(t,r,!1)}function Kt(e,t,n,r){F||L();var o=Yt,i=F;F=!0;try{N(o,e,t,n,r)}finally{(F=i)||z()}}function Xt(e,t,n,r){qt(Ht,Yt.bind(null,e,t,n,r))}function Yt(e,t,n,r){if(Qt)if(0<bt.length&&-1<Et.indexOf(e))e=_t(null,e,t,n,r),bt.push(e);else{var o=Zt(e,t,n,r);if(null===o)Mt(e,r);else if(-1<Et.indexOf(e))e=_t(o,e,t,n,r),bt.push(e);else if(!function(e,t,n,r,o){switch(t){case"focus":return xt=At(xt,e,t,n,r,o),!0;case"dragenter":return wt=At(wt,e,t,n,r,o),!0;case"mouseover":return St=At(St,e,t,n,r,o),!0;case"pointerover":var i=o.pointerId;return kt.set(i,At(kt.get(i)||null,e,t,n,r,o)),!0;case"gotpointercapture":return i=o.pointerId,Ct.set(i,At(Ct.get(i)||null,e,t,n,r,o)),!0}return!1}(o,e,t,n,r)){Mt(e,r),e=dt(e,r,null,t);try{V(pt,e)}finally{ft(e)}}}}function Zt(e,t,n,r){if(null!==(n=Pn(n=st(r)))){var o=Je(n);if(null===o)n=null;else{var i=o.tag;if(13===i){if(null!==(n=et(o)))return n;n=null}else if(3===i){if(o.stateNode.hydrate)return 3===o.tag?o.stateNode.containerInfo:null;n=null}else o!==n&&(n=null)}}e=dt(e,r,n,t);try{V(pt,e)}finally{ft(e)}return null}var Jt={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},en=["Webkit","ms","Moz","O"];function tn(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||Jt.hasOwnProperty(e)&&Jt[e]?(""+t).trim():t+"px"}function nn(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=tn(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(Jt).forEach((function(e){en.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),Jt[t]=Jt[e]}))}));var rn=o({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function on(e,t){if(t){if(rn[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(a(137,e,""));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(a(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(a(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(a(62,""))}}function an(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var ln=Re;function sn(e,t){var n=Ze(e=9===e.nodeType||11===e.nodeType?e:e.ownerDocument);t=T[t];for(var r=0;r<t.length;r++)mt(t[r],e,n)}function un(){}function cn(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function fn(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function dn(e,t){var n,r=fn(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=fn(r)}}function pn(){for(var e=window,t=cn();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=cn((e=t.contentWindow).document)}return t}function mn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var yn=null,hn=null;function vn(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function gn(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var bn="function"==typeof setTimeout?setTimeout:void 0,xn="function"==typeof clearTimeout?clearTimeout:void 0;function wn(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break}return e}function Sn(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var kn=Math.random().toString(36).slice(2),Cn="__reactInternalInstance$"+kn,Tn="__reactEventHandlers$"+kn,En="__reactContainere$"+kn;function Pn(e){var t=e[Cn];if(t)return t;for(var n=e.parentNode;n;){if(t=n[En]||n[Cn]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=Sn(e);null!==e;){if(n=e[Cn])return n;e=Sn(e)}return t}n=(e=n).parentNode}return null}function _n(e){return!(e=e[Cn]||e[En])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function Mn(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(a(33))}function An(e){return e[Tn]||null}function On(e){do{e=e.return}while(e&&5!==e.tag);return e||null}function In(e,t){var n=e.stateNode;if(!n)return null;var r=m(n);if(!r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(a(231,t,typeof n));return n}function Bn(e,t,n){(t=In(e,n.dispatchConfig.phasedRegistrationNames[t]))&&(n._dispatchListeners=rt(n._dispatchListeners,t),n._dispatchInstances=rt(n._dispatchInstances,e))}function Rn(e){if(e&&e.dispatchConfig.phasedRegistrationNames){for(var t=e._targetInst,n=[];t;)n.push(t),t=On(t);for(t=n.length;0<t--;)Bn(n[t],"captured",e);for(t=0;t<n.length;t++)Bn(n[t],"bubbled",e)}}function Nn(e,t,n){e&&n&&n.dispatchConfig.registrationName&&(t=In(e,n.dispatchConfig.registrationName))&&(n._dispatchListeners=rt(n._dispatchListeners,t),n._dispatchInstances=rt(n._dispatchInstances,e))}function Ln(e){e&&e.dispatchConfig.registrationName&&Nn(e._targetInst,null,e)}function jn(e){ot(e,Rn)}var Fn=null,Dn=null,zn=null;function Vn(){if(zn)return zn;var e,t,n=Dn,r=n.length,o="value"in Fn?Fn.value:Fn.textContent,i=o.length;for(e=0;e<r&&n[e]===o[e];e++);var a=r-e;for(t=1;t<=a&&n[r-t]===o[i-t];t++);return zn=o.slice(e,1<t?1-t:void 0)}function Wn(){return!0}function Un(){return!1}function Hn(e,t,n,r){for(var o in this.dispatchConfig=e,this._targetInst=t,this.nativeEvent=n,e=this.constructor.Interface)e.hasOwnProperty(o)&&((t=e[o])?this[o]=t(n):"target"===o?this.target=r:this[o]=n[o]);return this.isDefaultPrevented=(null!=n.defaultPrevented?n.defaultPrevented:!1===n.returnValue)?Wn:Un,this.isPropagationStopped=Un,this}function qn(e,t,n,r){if(this.eventPool.length){var o=this.eventPool.pop();return this.call(o,e,t,n,r),o}return new this(e,t,n,r)}function Qn(e){if(!(e instanceof this))throw Error(a(279));e.destructor(),10>this.eventPool.length&&this.eventPool.push(e)}function $n(e){e.eventPool=[],e.getPooled=qn,e.release=Qn}o(Hn.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=Wn)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=Wn)},persist:function(){this.isPersistent=Wn},isPersistent:Un,destructor:function(){var e,t=this.constructor.Interface;for(e in t)this[e]=null;this.nativeEvent=this._targetInst=this.dispatchConfig=null,this.isPropagationStopped=this.isDefaultPrevented=Un,this._dispatchInstances=this._dispatchListeners=null}}),Hn.Interface={type:null,target:null,currentTarget:function(){return null},eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null},Hn.extend=function(e){function t(){}function n(){return r.apply(this,arguments)}var r=this;t.prototype=r.prototype;var i=new t;return o(i,n.prototype),n.prototype=i,n.prototype.constructor=n,n.Interface=o({},r.Interface,e),n.extend=r.extend,$n(n),n},$n(Hn);var Gn=Hn.extend({data:null}),Kn=Hn.extend({data:null}),Xn=[9,13,27,32],Yn=P&&"CompositionEvent"in window,Zn=null;P&&"documentMode"in document&&(Zn=document.documentMode);var Jn=P&&"TextEvent"in window&&!Zn,er=P&&(!Yn||Zn&&8<Zn&&11>=Zn),tr=String.fromCharCode(32),nr={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["compositionend","keypress","textInput","paste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"blur compositionend keydown keypress keyup mousedown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",captured:"onCompositionStartCapture"},dependencies:"blur compositionstart keydown keypress keyup mousedown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"blur compositionupdate keydown keypress keyup mousedown".split(" ")}},rr=!1;function or(e,t){switch(e){case"keyup":return-1!==Xn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"blur":return!0;default:return!1}}function ir(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var ar=!1;var lr={eventTypes:nr,extractEvents:function(e,t,n,r){var o;if(Yn)e:{switch(e){case"compositionstart":var i=nr.compositionStart;break e;case"compositionend":i=nr.compositionEnd;break e;case"compositionupdate":i=nr.compositionUpdate;break e}i=void 0}else ar?or(e,n)&&(i=nr.compositionEnd):"keydown"===e&&229===n.keyCode&&(i=nr.compositionStart);return i?(er&&"ko"!==n.locale&&(ar||i!==nr.compositionStart?i===nr.compositionEnd&&ar&&(o=Vn()):(Dn="value"in(Fn=r)?Fn.value:Fn.textContent,ar=!0)),i=Gn.getPooled(i,t,n,r),o?i.data=o:null!==(o=ir(n))&&(i.data=o),jn(i),o=i):o=null,(e=Jn?function(e,t){switch(e){case"compositionend":return ir(t);case"keypress":return 32!==t.which?null:(rr=!0,tr);case"textInput":return(e=t.data)===tr&&rr?null:e;default:return null}}(e,n):function(e,t){if(ar)return"compositionend"===e||!Yn&&or(e,t)?(e=Vn(),zn=Dn=Fn=null,ar=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return er&&"ko"!==t.locale?null:t.data;default:return null}}(e,n))?((t=Kn.getPooled(nr.beforeInput,t,n,r)).data=e,jn(t)):t=null,null===o?t:null===t?o:[o,t]}},sr={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function ur(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!sr[e.type]:"textarea"===t}var cr={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"blur change click focus input keydown keyup selectionchange".split(" ")}};function fr(e,t,n){return(e=Hn.getPooled(cr.change,e,t,n)).type="change",I(n),jn(e),e}var dr=null,pr=null;function mr(e){lt(e)}function yr(e){if(we(Mn(e)))return e}function hr(e,t){if("change"===e)return t}var vr=!1;function gr(){dr&&(dr.detachEvent("onpropertychange",br),pr=dr=null)}function br(e){if("value"===e.propertyName&&yr(pr))if(e=fr(pr,e,st(e)),F)lt(e);else{F=!0;try{R(mr,e)}finally{F=!1,z()}}}function xr(e,t,n){"focus"===e?(gr(),pr=n,(dr=t).attachEvent("onpropertychange",br)):"blur"===e&&gr()}function wr(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return yr(pr)}function Sr(e,t){if("click"===e)return yr(t)}function kr(e,t){if("input"===e||"change"===e)return yr(t)}P&&(vr=ut("input")&&(!document.documentMode||9<document.documentMode));var Cr={eventTypes:cr,_isInputEventSupported:vr,extractEvents:function(e,t,n,r){var o=t?Mn(t):window,i=o.nodeName&&o.nodeName.toLowerCase();if("select"===i||"input"===i&&"file"===o.type)var a=hr;else if(ur(o))if(vr)a=kr;else{a=wr;var l=xr}else(i=o.nodeName)&&"input"===i.toLowerCase()&&("checkbox"===o.type||"radio"===o.type)&&(a=Sr);if(a&&(a=a(e,t)))return fr(a,n,r);l&&l(e,o,t),"blur"===e&&(e=o._wrapperState)&&e.controlled&&"number"===o.type&&Pe(o,"number",o.value)}},Tr=Hn.extend({view:null,detail:null}),Er={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Pr(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Er[e])&&!!t[e]}function _r(){return Pr}var Mr=0,Ar=0,Or=!1,Ir=!1,Br=Tr.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:_r,button:null,buttons:null,relatedTarget:function(e){return e.relatedTarget||(e.fromElement===e.srcElement?e.toElement:e.fromElement)},movementX:function(e){if("movementX"in e)return e.movementX;var t=Mr;return Mr=e.screenX,Or?"mousemove"===e.type?e.screenX-t:0:(Or=!0,0)},movementY:function(e){if("movementY"in e)return e.movementY;var t=Ar;return Ar=e.screenY,Ir?"mousemove"===e.type?e.screenY-t:0:(Ir=!0,0)}}),Rr=Br.extend({pointerId:null,width:null,height:null,pressure:null,tangentialPressure:null,tiltX:null,tiltY:null,twist:null,pointerType:null,isPrimary:null}),Nr={mouseEnter:{registrationName:"onMouseEnter",dependencies:["mouseout","mouseover"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["mouseout","mouseover"]},pointerEnter:{registrationName:"onPointerEnter",dependencies:["pointerout","pointerover"]},pointerLeave:{registrationName:"onPointerLeave",dependencies:["pointerout","pointerover"]}},Lr={eventTypes:Nr,extractEvents:function(e,t,n,r,o){var i="mouseover"===e||"pointerover"===e,a="mouseout"===e||"pointerout"===e;if(i&&0==(32&o)&&(n.relatedTarget||n.fromElement)||!a&&!i)return null;(i=r.window===r?r:(i=r.ownerDocument)?i.defaultView||i.parentWindow:window,a)?(a=t,null!==(t=(t=n.relatedTarget||n.toElement)?Pn(t):null)&&(t!==Je(t)||5!==t.tag&&6!==t.tag)&&(t=null)):a=null;if(a===t)return null;if("mouseout"===e||"mouseover"===e)var l=Br,s=Nr.mouseLeave,u=Nr.mouseEnter,c="mouse";else"pointerout"!==e&&"pointerover"!==e||(l=Rr,s=Nr.pointerLeave,u=Nr.pointerEnter,c="pointer");if(e=null==a?i:Mn(a),i=null==t?i:Mn(t),(s=l.getPooled(s,a,n,r)).type=c+"leave",s.target=e,s.relatedTarget=i,(n=l.getPooled(u,t,n,r)).type=c+"enter",n.target=i,n.relatedTarget=e,c=t,(r=a)&&c)e:{for(u=c,a=0,e=l=r;e;e=On(e))a++;for(e=0,t=u;t;t=On(t))e++;for(;0<a-e;)l=On(l),a--;for(;0<e-a;)u=On(u),e--;for(;a--;){if(l===u||l===u.alternate)break e;l=On(l),u=On(u)}l=null}else l=null;for(u=l,l=[];r&&r!==u&&(null===(a=r.alternate)||a!==u);)l.push(r),r=On(r);for(r=[];c&&c!==u&&(null===(a=c.alternate)||a!==u);)r.push(c),c=On(c);for(c=0;c<l.length;c++)Nn(l[c],"bubbled",s);for(c=r.length;0<c--;)Nn(r[c],"captured",n);return 0==(64&o)?[s]:[s,n]}};var jr="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},Fr=Object.prototype.hasOwnProperty;function Dr(e,t){if(jr(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++)if(!Fr.call(t,n[r])||!jr(e[n[r]],t[n[r]]))return!1;return!0}var zr=P&&"documentMode"in document&&11>=document.documentMode,Vr={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"blur contextmenu dragend focus keydown keyup mousedown mouseup selectionchange".split(" ")}},Wr=null,Ur=null,Hr=null,qr=!1;function Qr(e,t){var n=t.window===t?t.document:9===t.nodeType?t:t.ownerDocument;return qr||null==Wr||Wr!==cn(n)?null:("selectionStart"in(n=Wr)&&mn(n)?n={start:n.selectionStart,end:n.selectionEnd}:n={anchorNode:(n=(n.ownerDocument&&n.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:n.anchorOffset,focusNode:n.focusNode,focusOffset:n.focusOffset},Hr&&Dr(Hr,n)?null:(Hr=n,(e=Hn.getPooled(Vr.select,Ur,e,t)).type="select",e.target=Wr,jn(e),e))}var $r={eventTypes:Vr,extractEvents:function(e,t,n,r,o,i){if(!(i=!(o=i||(r.window===r?r.document:9===r.nodeType?r:r.ownerDocument)))){e:{o=Ze(o),i=T.onSelect;for(var a=0;a<i.length;a++)if(!o.has(i[a])){o=!1;break e}o=!0}i=!o}if(i)return null;switch(o=t?Mn(t):window,e){case"focus":(ur(o)||"true"===o.contentEditable)&&(Wr=o,Ur=t,Hr=null);break;case"blur":Hr=Ur=Wr=null;break;case"mousedown":qr=!0;break;case"contextmenu":case"mouseup":case"dragend":return qr=!1,Qr(n,r);case"selectionchange":if(zr)break;case"keydown":case"keyup":return Qr(n,r)}return null}},Gr=Hn.extend({animationName:null,elapsedTime:null,pseudoElement:null}),Kr=Hn.extend({clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),Xr=Tr.extend({relatedTarget:null});function Yr(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}var Zr={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},Jr={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},eo=Tr.extend({key:function(e){if(e.key){var t=Zr[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=Yr(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?Jr[e.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:_r,charCode:function(e){return"keypress"===e.type?Yr(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?Yr(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),to=Br.extend({dataTransfer:null}),no=Tr.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:_r}),ro=Hn.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),oo=Br.extend({deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:null,deltaMode:null}),io={eventTypes:jt,extractEvents:function(e,t,n,r){var o=Ft.get(e);if(!o)return null;switch(e){case"keypress":if(0===Yr(n))return null;case"keydown":case"keyup":e=eo;break;case"blur":case"focus":e=Xr;break;case"click":if(2===n.button)return null;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":e=Br;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":e=to;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":e=no;break;case Qe:case $e:case Ge:e=Gr;break;case Ke:e=ro;break;case"scroll":e=Tr;break;case"wheel":e=oo;break;case"copy":case"cut":case"paste":e=Kr;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":e=Rr;break;default:e=Hn}return jn(t=e.getPooled(o,t,n,r)),t}};if(g)throw Error(a(101));g=Array.prototype.slice.call("ResponderEventPlugin SimpleEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" ")),x(),m=An,y=_n,h=Mn,E({SimpleEventPlugin:io,EnterLeaveEventPlugin:Lr,ChangeEventPlugin:Cr,SelectEventPlugin:$r,BeforeInputEventPlugin:lr});var ao=[],lo=-1;function so(e){0>lo||(e.current=ao[lo],ao[lo]=null,lo--)}function uo(e,t){lo++,ao[lo]=e.current,e.current=t}var co={},fo={current:co},po={current:!1},mo=co;function yo(e,t){var n=e.type.contextTypes;if(!n)return co;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var o,i={};for(o in n)i[o]=t[o];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=i),i}function ho(e){return null!=(e=e.childContextTypes)}function vo(){so(po),so(fo)}function go(e,t,n){if(fo.current!==co)throw Error(a(168));uo(fo,t),uo(po,n)}function bo(e,t,n){var r=e.stateNode;if(e=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var i in r=r.getChildContext())if(!(i in e))throw Error(a(108,he(t)||"Unknown",i));return o({},n,{},r)}function xo(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||co,mo=fo.current,uo(fo,e),uo(po,po.current),!0}function wo(e,t,n){var r=e.stateNode;if(!r)throw Error(a(169));n?(e=bo(e,t,mo),r.__reactInternalMemoizedMergedChildContext=e,so(po),so(fo),uo(fo,e)):so(po),uo(po,n)}var So=i.unstable_runWithPriority,ko=i.unstable_scheduleCallback,Co=i.unstable_cancelCallback,To=i.unstable_requestPaint,Eo=i.unstable_now,Po=i.unstable_getCurrentPriorityLevel,_o=i.unstable_ImmediatePriority,Mo=i.unstable_UserBlockingPriority,Ao=i.unstable_NormalPriority,Oo=i.unstable_LowPriority,Io=i.unstable_IdlePriority,Bo={},Ro=i.unstable_shouldYield,No=void 0!==To?To:function(){},Lo=null,jo=null,Fo=!1,Do=Eo(),zo=1e4>Do?Eo:function(){return Eo()-Do};function Vo(){switch(Po()){case _o:return 99;case Mo:return 98;case Ao:return 97;case Oo:return 96;case Io:return 95;default:throw Error(a(332))}}function Wo(e){switch(e){case 99:return _o;case 98:return Mo;case 97:return Ao;case 96:return Oo;case 95:return Io;default:throw Error(a(332))}}function Uo(e,t){return e=Wo(e),So(e,t)}function Ho(e,t,n){return e=Wo(e),ko(e,t,n)}function qo(e){return null===Lo?(Lo=[e],jo=ko(_o,$o)):Lo.push(e),Bo}function Qo(){if(null!==jo){var e=jo;jo=null,Co(e)}$o()}function $o(){if(!Fo&&null!==Lo){Fo=!0;var e=0;try{var t=Lo;Uo(99,(function(){for(;e<t.length;e++){var n=t[e];do{n=n(!0)}while(null!==n)}})),Lo=null}catch(t){throw null!==Lo&&(Lo=Lo.slice(e+1)),ko(_o,Qo),t}finally{Fo=!1}}}function Go(e,t,n){return 1073741821-(1+((1073741821-e+t/10)/(n/=10)|0))*n}function Ko(e,t){if(e&&e.defaultProps)for(var n in t=o({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}var Xo={current:null},Yo=null,Zo=null,Jo=null;function ei(){Jo=Zo=Yo=null}function ti(e){var t=Xo.current;so(Xo),e.type._context._currentValue=t}function ni(e,t){for(;null!==e;){var n=e.alternate;if(e.childExpirationTime<t)e.childExpirationTime=t,null!==n&&n.childExpirationTime<t&&(n.childExpirationTime=t);else{if(!(null!==n&&n.childExpirationTime<t))break;n.childExpirationTime=t}e=e.return}}function ri(e,t){Yo=e,Jo=Zo=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(e.expirationTime>=t&&(Aa=!0),e.firstContext=null)}function oi(e,t){if(Jo!==e&&!1!==t&&0!==t)if("number"==typeof t&&1073741823!==t||(Jo=e,t=1073741823),t={context:e,observedBits:t,next:null},null===Zo){if(null===Yo)throw Error(a(308));Zo=t,Yo.dependencies={expirationTime:0,firstContext:t,responders:null}}else Zo=Zo.next=t;return e._currentValue}var ii=!1;function ai(e){e.updateQueue={baseState:e.memoizedState,baseQueue:null,shared:{pending:null},effects:null}}function li(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,baseQueue:e.baseQueue,shared:e.shared,effects:e.effects})}function si(e,t){return(e={expirationTime:e,suspenseConfig:t,tag:0,payload:null,callback:null,next:null}).next=e}function ui(e,t){if(null!==(e=e.updateQueue)){var n=(e=e.shared).pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}}function ci(e,t){var n=e.alternate;null!==n&&li(n,e),null===(n=(e=e.updateQueue).baseQueue)?(e.baseQueue=t.next=t,t.next=t):(t.next=n.next,n.next=t)}function fi(e,t,n,r){var i=e.updateQueue;ii=!1;var a=i.baseQueue,l=i.shared.pending;if(null!==l){if(null!==a){var s=a.next;a.next=l.next,l.next=s}a=l,i.shared.pending=null,null!==(s=e.alternate)&&(null!==(s=s.updateQueue)&&(s.baseQueue=l))}if(null!==a){s=a.next;var u=i.baseState,c=0,f=null,d=null,p=null;if(null!==s)for(var m=s;;){if((l=m.expirationTime)<r){var y={expirationTime:m.expirationTime,suspenseConfig:m.suspenseConfig,tag:m.tag,payload:m.payload,callback:m.callback,next:null};null===p?(d=p=y,f=u):p=p.next=y,l>c&&(c=l)}else{null!==p&&(p=p.next={expirationTime:1073741823,suspenseConfig:m.suspenseConfig,tag:m.tag,payload:m.payload,callback:m.callback,next:null}),is(l,m.suspenseConfig);e:{var h=e,v=m;switch(l=t,y=n,v.tag){case 1:if("function"==typeof(h=v.payload)){u=h.call(y,u,l);break e}u=h;break e;case 3:h.effectTag=-4097&h.effectTag|64;case 0:if(null==(l="function"==typeof(h=v.payload)?h.call(y,u,l):h))break e;u=o({},u,l);break e;case 2:ii=!0}}null!==m.callback&&(e.effectTag|=32,null===(l=i.effects)?i.effects=[m]:l.push(m))}if(null===(m=m.next)||m===s){if(null===(l=i.shared.pending))break;m=a.next=l.next,l.next=s,i.baseQueue=a=l,i.shared.pending=null}}null===p?f=u:p.next=d,i.baseState=f,i.baseQueue=p,as(c),e.expirationTime=c,e.memoizedState=u}}function di(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],o=r.callback;if(null!==o){if(r.callback=null,r=o,o=n,"function"!=typeof r)throw Error(a(191,r));r.call(o)}}}var pi=X.ReactCurrentBatchConfig,mi=(new r.Component).refs;function yi(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:o({},t,n),e.memoizedState=n,0===e.expirationTime&&(e.updateQueue.baseState=n)}var hi={isMounted:function(e){return!!(e=e._reactInternalFiber)&&Je(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternalFiber;var r=Ql(),o=pi.suspense;(o=si(r=$l(r,e,o),o)).payload=t,null!=n&&(o.callback=n),ui(e,o),Gl(e,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternalFiber;var r=Ql(),o=pi.suspense;(o=si(r=$l(r,e,o),o)).tag=1,o.payload=t,null!=n&&(o.callback=n),ui(e,o),Gl(e,r)},enqueueForceUpdate:function(e,t){e=e._reactInternalFiber;var n=Ql(),r=pi.suspense;(r=si(n=$l(n,e,r),r)).tag=2,null!=t&&(r.callback=t),ui(e,r),Gl(e,n)}};function vi(e,t,n,r,o,i,a){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,i,a):!t.prototype||!t.prototype.isPureReactComponent||(!Dr(n,r)||!Dr(o,i))}function gi(e,t,n){var r=!1,o=co,i=t.contextType;return"object"==typeof i&&null!==i?i=oi(i):(o=ho(t)?mo:fo.current,i=(r=null!=(r=t.contextTypes))?yo(e,o):co),t=new t(n,i),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=hi,e.stateNode=t,t._reactInternalFiber=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=o,e.__reactInternalMemoizedMaskedChildContext=i),t}function bi(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&hi.enqueueReplaceState(t,t.state,null)}function xi(e,t,n,r){var o=e.stateNode;o.props=n,o.state=e.memoizedState,o.refs=mi,ai(e);var i=t.contextType;"object"==typeof i&&null!==i?o.context=oi(i):(i=ho(t)?mo:fo.current,o.context=yo(e,i)),fi(e,n,o,r),o.state=e.memoizedState,"function"==typeof(i=t.getDerivedStateFromProps)&&(yi(e,t,i,n),o.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(t=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),t!==o.state&&hi.enqueueReplaceState(o,o.state,null),fi(e,n,o,r),o.state=e.memoizedState),"function"==typeof o.componentDidMount&&(e.effectTag|=4)}var wi=Array.isArray;function Si(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(a(309));var r=n.stateNode}if(!r)throw Error(a(147,e));var o=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===o?t.ref:((t=function(e){var t=r.refs;t===mi&&(t=r.refs={}),null===e?delete t[o]:t[o]=e})._stringRef=o,t)}if("string"!=typeof e)throw Error(a(284));if(!n._owner)throw Error(a(290,e))}return e}function ki(e,t){if("textarea"!==e.type)throw Error(a(31,"[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t,""))}function Ci(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.effectTag=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t){return(e=Es(e,t)).index=0,e.sibling=null,e}function i(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.effectTag=2,n):r:(t.effectTag=2,n):n}function l(t){return e&&null===t.alternate&&(t.effectTag=2),t}function s(e,t,n,r){return null===t||6!==t.tag?((t=Ms(n,e.mode,r)).return=e,t):((t=o(t,n)).return=e,t)}function u(e,t,n,r){return null!==t&&t.elementType===n.type?((r=o(t,n.props)).ref=Si(e,t,n),r.return=e,r):((r=Ps(n.type,n.key,n.props,null,e.mode,r)).ref=Si(e,t,n),r.return=e,r)}function c(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=As(n,e.mode,r)).return=e,t):((t=o(t,n.children||[])).return=e,t)}function f(e,t,n,r,i){return null===t||7!==t.tag?((t=_s(n,e.mode,r,i)).return=e,t):((t=o(t,n)).return=e,t)}function d(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=Ms(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case ee:return(n=Ps(t.type,t.key,t.props,null,e.mode,n)).ref=Si(e,null,t),n.return=e,n;case te:return(t=As(t,e.mode,n)).return=e,t}if(wi(t)||ye(t))return(t=_s(t,e.mode,n,null)).return=e,t;ki(e,t)}return null}function p(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==o?null:s(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case ee:return n.key===o?n.type===ne?f(e,t,n.props.children,r,o):u(e,t,n,r):null;case te:return n.key===o?c(e,t,n,r):null}if(wi(n)||ye(n))return null!==o?null:f(e,t,n,r,null);ki(e,n)}return null}function m(e,t,n,r,o){if("string"==typeof r||"number"==typeof r)return s(t,e=e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case ee:return e=e.get(null===r.key?n:r.key)||null,r.type===ne?f(t,e,r.props.children,o,r.key):u(t,e,r,o);case te:return c(t,e=e.get(null===r.key?n:r.key)||null,r,o)}if(wi(r)||ye(r))return f(t,e=e.get(n)||null,r,o,null);ki(t,r)}return null}function y(o,a,l,s){for(var u=null,c=null,f=a,y=a=0,h=null;null!==f&&y<l.length;y++){f.index>y?(h=f,f=null):h=f.sibling;var v=p(o,f,l[y],s);if(null===v){null===f&&(f=h);break}e&&f&&null===v.alternate&&t(o,f),a=i(v,a,y),null===c?u=v:c.sibling=v,c=v,f=h}if(y===l.length)return n(o,f),u;if(null===f){for(;y<l.length;y++)null!==(f=d(o,l[y],s))&&(a=i(f,a,y),null===c?u=f:c.sibling=f,c=f);return u}for(f=r(o,f);y<l.length;y++)null!==(h=m(f,o,y,l[y],s))&&(e&&null!==h.alternate&&f.delete(null===h.key?y:h.key),a=i(h,a,y),null===c?u=h:c.sibling=h,c=h);return e&&f.forEach((function(e){return t(o,e)})),u}function h(o,l,s,u){var c=ye(s);if("function"!=typeof c)throw Error(a(150));if(null==(s=c.call(s)))throw Error(a(151));for(var f=c=null,y=l,h=l=0,v=null,g=s.next();null!==y&&!g.done;h++,g=s.next()){y.index>h?(v=y,y=null):v=y.sibling;var b=p(o,y,g.value,u);if(null===b){null===y&&(y=v);break}e&&y&&null===b.alternate&&t(o,y),l=i(b,l,h),null===f?c=b:f.sibling=b,f=b,y=v}if(g.done)return n(o,y),c;if(null===y){for(;!g.done;h++,g=s.next())null!==(g=d(o,g.value,u))&&(l=i(g,l,h),null===f?c=g:f.sibling=g,f=g);return c}for(y=r(o,y);!g.done;h++,g=s.next())null!==(g=m(y,o,h,g.value,u))&&(e&&null!==g.alternate&&y.delete(null===g.key?h:g.key),l=i(g,l,h),null===f?c=g:f.sibling=g,f=g);return e&&y.forEach((function(e){return t(o,e)})),c}return function(e,r,i,s){var u="object"==typeof i&&null!==i&&i.type===ne&&null===i.key;u&&(i=i.props.children);var c="object"==typeof i&&null!==i;if(c)switch(i.$$typeof){case ee:e:{for(c=i.key,u=r;null!==u;){if(u.key===c){switch(u.tag){case 7:if(i.type===ne){n(e,u.sibling),(r=o(u,i.props.children)).return=e,e=r;break e}break;default:if(u.elementType===i.type){n(e,u.sibling),(r=o(u,i.props)).ref=Si(e,u,i),r.return=e,e=r;break e}}n(e,u);break}t(e,u),u=u.sibling}i.type===ne?((r=_s(i.props.children,e.mode,s,i.key)).return=e,e=r):((s=Ps(i.type,i.key,i.props,null,e.mode,s)).ref=Si(e,r,i),s.return=e,e=s)}return l(e);case te:e:{for(u=i.key;null!==r;){if(r.key===u){if(4===r.tag&&r.stateNode.containerInfo===i.containerInfo&&r.stateNode.implementation===i.implementation){n(e,r.sibling),(r=o(r,i.children||[])).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=As(i,e.mode,s)).return=e,e=r}return l(e)}if("string"==typeof i||"number"==typeof i)return i=""+i,null!==r&&6===r.tag?(n(e,r.sibling),(r=o(r,i)).return=e,e=r):(n(e,r),(r=Ms(i,e.mode,s)).return=e,e=r),l(e);if(wi(i))return y(e,r,i,s);if(ye(i))return h(e,r,i,s);if(c&&ki(e,i),void 0===i&&!u)switch(e.tag){case 1:case 0:throw e=e.type,Error(a(152,e.displayName||e.name||"Component"))}return n(e,r)}}var Ti=Ci(!0),Ei=Ci(!1),Pi={},_i={current:Pi},Mi={current:Pi},Ai={current:Pi};function Oi(e){if(e===Pi)throw Error(a(174));return e}function Ii(e,t){switch(uo(Ai,t),uo(Mi,e),uo(_i,Pi),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:je(null,"");break;default:t=je(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}so(_i),uo(_i,t)}function Bi(){so(_i),so(Mi),so(Ai)}function Ri(e){Oi(Ai.current);var t=Oi(_i.current),n=je(t,e.type);t!==n&&(uo(Mi,e),uo(_i,n))}function Ni(e){Mi.current===e&&(so(_i),so(Mi))}var Li={current:0};function ji(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(64&t.effectTag))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}function Fi(e,t){return{responder:e,props:t}}var Di=X.ReactCurrentDispatcher,zi=X.ReactCurrentBatchConfig,Vi=0,Wi=null,Ui=null,Hi=null,qi=!1;function Qi(){throw Error(a(321))}function $i(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!jr(e[n],t[n]))return!1;return!0}function Gi(e,t,n,r,o,i){if(Vi=i,Wi=t,t.memoizedState=null,t.updateQueue=null,t.expirationTime=0,Di.current=null===e||null===e.memoizedState?va:ga,e=n(r,o),t.expirationTime===Vi){i=0;do{if(t.expirationTime=0,!(25>i))throw Error(a(301));i+=1,Hi=Ui=null,t.updateQueue=null,Di.current=ba,e=n(r,o)}while(t.expirationTime===Vi)}if(Di.current=ha,t=null!==Ui&&null!==Ui.next,Vi=0,Hi=Ui=Wi=null,qi=!1,t)throw Error(a(300));return e}function Ki(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===Hi?Wi.memoizedState=Hi=e:Hi=Hi.next=e,Hi}function Xi(){if(null===Ui){var e=Wi.alternate;e=null!==e?e.memoizedState:null}else e=Ui.next;var t=null===Hi?Wi.memoizedState:Hi.next;if(null!==t)Hi=t,Ui=e;else{if(null===e)throw Error(a(310));e={memoizedState:(Ui=e).memoizedState,baseState:Ui.baseState,baseQueue:Ui.baseQueue,queue:Ui.queue,next:null},null===Hi?Wi.memoizedState=Hi=e:Hi=Hi.next=e}return Hi}function Yi(e,t){return"function"==typeof t?t(e):t}function Zi(e){var t=Xi(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var r=Ui,o=r.baseQueue,i=n.pending;if(null!==i){if(null!==o){var l=o.next;o.next=i.next,i.next=l}r.baseQueue=o=i,n.pending=null}if(null!==o){o=o.next,r=r.baseState;var s=l=i=null,u=o;do{var c=u.expirationTime;if(c<Vi){var f={expirationTime:u.expirationTime,suspenseConfig:u.suspenseConfig,action:u.action,eagerReducer:u.eagerReducer,eagerState:u.eagerState,next:null};null===s?(l=s=f,i=r):s=s.next=f,c>Wi.expirationTime&&(Wi.expirationTime=c,as(c))}else null!==s&&(s=s.next={expirationTime:1073741823,suspenseConfig:u.suspenseConfig,action:u.action,eagerReducer:u.eagerReducer,eagerState:u.eagerState,next:null}),is(c,u.suspenseConfig),r=u.eagerReducer===e?u.eagerState:e(r,u.action);u=u.next}while(null!==u&&u!==o);null===s?i=r:s.next=l,jr(r,t.memoizedState)||(Aa=!0),t.memoizedState=r,t.baseState=i,t.baseQueue=s,n.lastRenderedState=r}return[t.memoizedState,n.dispatch]}function Ji(e){var t=Xi(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var r=n.dispatch,o=n.pending,i=t.memoizedState;if(null!==o){n.pending=null;var l=o=o.next;do{i=e(i,l.action),l=l.next}while(l!==o);jr(i,t.memoizedState)||(Aa=!0),t.memoizedState=i,null===t.baseQueue&&(t.baseState=i),n.lastRenderedState=i}return[i,r]}function ea(e){var t=Ki();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={pending:null,dispatch:null,lastRenderedReducer:Yi,lastRenderedState:e}).dispatch=ya.bind(null,Wi,e),[t.memoizedState,e]}function ta(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=Wi.updateQueue)?(t={lastEffect:null},Wi.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function na(){return Xi().memoizedState}function ra(e,t,n,r){var o=Ki();Wi.effectTag|=e,o.memoizedState=ta(1|t,n,void 0,void 0===r?null:r)}function oa(e,t,n,r){var o=Xi();r=void 0===r?null:r;var i=void 0;if(null!==Ui){var a=Ui.memoizedState;if(i=a.destroy,null!==r&&$i(r,a.deps))return void ta(t,n,i,r)}Wi.effectTag|=e,o.memoizedState=ta(1|t,n,i,r)}function ia(e,t){return ra(516,4,e,t)}function aa(e,t){return oa(516,4,e,t)}function la(e,t){return oa(4,2,e,t)}function sa(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function ua(e,t,n){return n=null!=n?n.concat([e]):null,oa(4,2,sa.bind(null,t,e),n)}function ca(){}function fa(e,t){return Ki().memoizedState=[e,void 0===t?null:t],e}function da(e,t){var n=Xi();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&$i(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function pa(e,t){var n=Xi();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&$i(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function ma(e,t,n){var r=Vo();Uo(98>r?98:r,(function(){e(!0)})),Uo(97<r?97:r,(function(){var r=zi.suspense;zi.suspense=void 0===t?null:t;try{e(!1),n()}finally{zi.suspense=r}}))}function ya(e,t,n){var r=Ql(),o=pi.suspense;o={expirationTime:r=$l(r,e,o),suspenseConfig:o,action:n,eagerReducer:null,eagerState:null,next:null};var i=t.pending;if(null===i?o.next=o:(o.next=i.next,i.next=o),t.pending=o,i=e.alternate,e===Wi||null!==i&&i===Wi)qi=!0,o.expirationTime=Vi,Wi.expirationTime=Vi;else{if(0===e.expirationTime&&(null===i||0===i.expirationTime)&&null!==(i=t.lastRenderedReducer))try{var a=t.lastRenderedState,l=i(a,n);if(o.eagerReducer=i,o.eagerState=l,jr(l,a))return}catch(e){}Gl(e,r)}}var ha={readContext:oi,useCallback:Qi,useContext:Qi,useEffect:Qi,useImperativeHandle:Qi,useLayoutEffect:Qi,useMemo:Qi,useReducer:Qi,useRef:Qi,useState:Qi,useDebugValue:Qi,useResponder:Qi,useDeferredValue:Qi,useTransition:Qi},va={readContext:oi,useCallback:fa,useContext:oi,useEffect:ia,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,ra(4,2,sa.bind(null,t,e),n)},useLayoutEffect:function(e,t){return ra(4,2,e,t)},useMemo:function(e,t){var n=Ki();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=Ki();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e=(e=r.queue={pending:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:t}).dispatch=ya.bind(null,Wi,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},Ki().memoizedState=e},useState:ea,useDebugValue:ca,useResponder:Fi,useDeferredValue:function(e,t){var n=ea(e),r=n[0],o=n[1];return ia((function(){var n=zi.suspense;zi.suspense=void 0===t?null:t;try{o(e)}finally{zi.suspense=n}}),[e,t]),r},useTransition:function(e){var t=ea(!1),n=t[0];return t=t[1],[fa(ma.bind(null,t,e),[t,e]),n]}},ga={readContext:oi,useCallback:da,useContext:oi,useEffect:aa,useImperativeHandle:ua,useLayoutEffect:la,useMemo:pa,useReducer:Zi,useRef:na,useState:function(){return Zi(Yi)},useDebugValue:ca,useResponder:Fi,useDeferredValue:function(e,t){var n=Zi(Yi),r=n[0],o=n[1];return aa((function(){var n=zi.suspense;zi.suspense=void 0===t?null:t;try{o(e)}finally{zi.suspense=n}}),[e,t]),r},useTransition:function(e){var t=Zi(Yi),n=t[0];return t=t[1],[da(ma.bind(null,t,e),[t,e]),n]}},ba={readContext:oi,useCallback:da,useContext:oi,useEffect:aa,useImperativeHandle:ua,useLayoutEffect:la,useMemo:pa,useReducer:Ji,useRef:na,useState:function(){return Ji(Yi)},useDebugValue:ca,useResponder:Fi,useDeferredValue:function(e,t){var n=Ji(Yi),r=n[0],o=n[1];return aa((function(){var n=zi.suspense;zi.suspense=void 0===t?null:t;try{o(e)}finally{zi.suspense=n}}),[e,t]),r},useTransition:function(e){var t=Ji(Yi),n=t[0];return t=t[1],[da(ma.bind(null,t,e),[t,e]),n]}},xa=null,wa=null,Sa=!1;function ka(e,t){var n=Cs(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=t,n.return=e,n.effectTag=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function Ca(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);case 13:default:return!1}}function Ta(e){if(Sa){var t=wa;if(t){var n=t;if(!Ca(e,t)){if(!(t=wn(n.nextSibling))||!Ca(e,t))return e.effectTag=-1025&e.effectTag|2,Sa=!1,void(xa=e);ka(xa,n)}xa=e,wa=wn(t.firstChild)}else e.effectTag=-1025&e.effectTag|2,Sa=!1,xa=e}}function Ea(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;xa=e}function Pa(e){if(e!==xa)return!1;if(!Sa)return Ea(e),Sa=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!gn(t,e.memoizedProps))for(t=wa;t;)ka(e,t),t=wn(t.nextSibling);if(Ea(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(a(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){wa=wn(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}wa=null}}else wa=xa?wn(e.stateNode.nextSibling):null;return!0}function _a(){wa=xa=null,Sa=!1}var Ma=X.ReactCurrentOwner,Aa=!1;function Oa(e,t,n,r){t.child=null===e?Ei(t,null,n,r):Ti(t,e.child,n,r)}function Ia(e,t,n,r,o){n=n.render;var i=t.ref;return ri(t,o),r=Gi(e,t,n,r,i,o),null===e||Aa?(t.effectTag|=1,Oa(e,t,r,o),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=o&&(e.expirationTime=0),Ga(e,t,o))}function Ba(e,t,n,r,o,i){if(null===e){var a=n.type;return"function"!=typeof a||Ts(a)||void 0!==a.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Ps(n.type,null,r,null,t.mode,i)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=a,Ra(e,t,a,r,o,i))}return a=e.child,o<i&&(o=a.memoizedProps,(n=null!==(n=n.compare)?n:Dr)(o,r)&&e.ref===t.ref)?Ga(e,t,i):(t.effectTag|=1,(e=Es(a,r)).ref=t.ref,e.return=t,t.child=e)}function Ra(e,t,n,r,o,i){return null!==e&&Dr(e.memoizedProps,r)&&e.ref===t.ref&&(Aa=!1,o<i)?(t.expirationTime=e.expirationTime,Ga(e,t,i)):La(e,t,n,r,i)}function Na(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.effectTag|=128)}function La(e,t,n,r,o){var i=ho(n)?mo:fo.current;return i=yo(t,i),ri(t,o),n=Gi(e,t,n,r,i,o),null===e||Aa?(t.effectTag|=1,Oa(e,t,n,o),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=o&&(e.expirationTime=0),Ga(e,t,o))}function ja(e,t,n,r,o){if(ho(n)){var i=!0;xo(t)}else i=!1;if(ri(t,o),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),gi(t,n,r),xi(t,n,r,o),r=!0;else if(null===e){var a=t.stateNode,l=t.memoizedProps;a.props=l;var s=a.context,u=n.contextType;"object"==typeof u&&null!==u?u=oi(u):u=yo(t,u=ho(n)?mo:fo.current);var c=n.getDerivedStateFromProps,f="function"==typeof c||"function"==typeof a.getSnapshotBeforeUpdate;f||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(l!==r||s!==u)&&bi(t,a,r,u),ii=!1;var d=t.memoizedState;a.state=d,fi(t,r,a,o),s=t.memoizedState,l!==r||d!==s||po.current||ii?("function"==typeof c&&(yi(t,n,c,r),s=t.memoizedState),(l=ii||vi(t,n,l,r,d,s,u))?(f||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||("function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount()),"function"==typeof a.componentDidMount&&(t.effectTag|=4)):("function"==typeof a.componentDidMount&&(t.effectTag|=4),t.memoizedProps=r,t.memoizedState=s),a.props=r,a.state=s,a.context=u,r=l):("function"==typeof a.componentDidMount&&(t.effectTag|=4),r=!1)}else a=t.stateNode,li(e,t),l=t.memoizedProps,a.props=t.type===t.elementType?l:Ko(t.type,l),s=a.context,"object"==typeof(u=n.contextType)&&null!==u?u=oi(u):u=yo(t,u=ho(n)?mo:fo.current),(f="function"==typeof(c=n.getDerivedStateFromProps)||"function"==typeof a.getSnapshotBeforeUpdate)||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(l!==r||s!==u)&&bi(t,a,r,u),ii=!1,s=t.memoizedState,a.state=s,fi(t,r,a,o),d=t.memoizedState,l!==r||s!==d||po.current||ii?("function"==typeof c&&(yi(t,n,c,r),d=t.memoizedState),(c=ii||vi(t,n,l,r,s,d,u))?(f||"function"!=typeof a.UNSAFE_componentWillUpdate&&"function"!=typeof a.componentWillUpdate||("function"==typeof a.componentWillUpdate&&a.componentWillUpdate(r,d,u),"function"==typeof a.UNSAFE_componentWillUpdate&&a.UNSAFE_componentWillUpdate(r,d,u)),"function"==typeof a.componentDidUpdate&&(t.effectTag|=4),"function"==typeof a.getSnapshotBeforeUpdate&&(t.effectTag|=256)):("function"!=typeof a.componentDidUpdate||l===e.memoizedProps&&s===e.memoizedState||(t.effectTag|=4),"function"!=typeof a.getSnapshotBeforeUpdate||l===e.memoizedProps&&s===e.memoizedState||(t.effectTag|=256),t.memoizedProps=r,t.memoizedState=d),a.props=r,a.state=d,a.context=u,r=c):("function"!=typeof a.componentDidUpdate||l===e.memoizedProps&&s===e.memoizedState||(t.effectTag|=4),"function"!=typeof a.getSnapshotBeforeUpdate||l===e.memoizedProps&&s===e.memoizedState||(t.effectTag|=256),r=!1);return Fa(e,t,n,r,i,o)}function Fa(e,t,n,r,o,i){Na(e,t);var a=0!=(64&t.effectTag);if(!r&&!a)return o&&wo(t,n,!1),Ga(e,t,i);r=t.stateNode,Ma.current=t;var l=a&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.effectTag|=1,null!==e&&a?(t.child=Ti(t,e.child,null,i),t.child=Ti(t,null,l,i)):Oa(e,t,l,i),t.memoizedState=r.state,o&&wo(t,n,!0),t.child}function Da(e){var t=e.stateNode;t.pendingContext?go(0,t.pendingContext,t.pendingContext!==t.context):t.context&&go(0,t.context,!1),Ii(e,t.containerInfo)}var za,Va,Wa,Ua={dehydrated:null,retryTime:0};function Ha(e,t,n){var r,o=t.mode,i=t.pendingProps,a=Li.current,l=!1;if((r=0!=(64&t.effectTag))||(r=0!=(2&a)&&(null===e||null!==e.memoizedState)),r?(l=!0,t.effectTag&=-65):null!==e&&null===e.memoizedState||void 0===i.fallback||!0===i.unstable_avoidThisFallback||(a|=1),uo(Li,1&a),null===e){if(void 0!==i.fallback&&Ta(t),l){if(l=i.fallback,(i=_s(null,o,0,null)).return=t,0==(2&t.mode))for(e=null!==t.memoizedState?t.child.child:t.child,i.child=e;null!==e;)e.return=i,e=e.sibling;return(n=_s(l,o,n,null)).return=t,i.sibling=n,t.memoizedState=Ua,t.child=i,n}return o=i.children,t.memoizedState=null,t.child=Ei(t,null,o,n)}if(null!==e.memoizedState){if(o=(e=e.child).sibling,l){if(i=i.fallback,(n=Es(e,e.pendingProps)).return=t,0==(2&t.mode)&&(l=null!==t.memoizedState?t.child.child:t.child)!==e.child)for(n.child=l;null!==l;)l.return=n,l=l.sibling;return(o=Es(o,i)).return=t,n.sibling=o,n.childExpirationTime=0,t.memoizedState=Ua,t.child=n,o}return n=Ti(t,e.child,i.children,n),t.memoizedState=null,t.child=n}if(e=e.child,l){if(l=i.fallback,(i=_s(null,o,0,null)).return=t,i.child=e,null!==e&&(e.return=i),0==(2&t.mode))for(e=null!==t.memoizedState?t.child.child:t.child,i.child=e;null!==e;)e.return=i,e=e.sibling;return(n=_s(l,o,n,null)).return=t,i.sibling=n,n.effectTag|=2,i.childExpirationTime=0,t.memoizedState=Ua,t.child=i,n}return t.memoizedState=null,t.child=Ti(t,e,i.children,n)}function qa(e,t){e.expirationTime<t&&(e.expirationTime=t);var n=e.alternate;null!==n&&n.expirationTime<t&&(n.expirationTime=t),ni(e.return,t)}function Qa(e,t,n,r,o,i){var a=e.memoizedState;null===a?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailExpiration:0,tailMode:o,lastEffect:i}:(a.isBackwards=t,a.rendering=null,a.renderingStartTime=0,a.last=r,a.tail=n,a.tailExpiration=0,a.tailMode=o,a.lastEffect=i)}function $a(e,t,n){var r=t.pendingProps,o=r.revealOrder,i=r.tail;if(Oa(e,t,r.children,n),0!=(2&(r=Li.current)))r=1&r|2,t.effectTag|=64;else{if(null!==e&&0!=(64&e.effectTag))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&qa(e,n);else if(19===e.tag)qa(e,n);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(uo(Li,r),0==(2&t.mode))t.memoizedState=null;else switch(o){case"forwards":for(n=t.child,o=null;null!==n;)null!==(e=n.alternate)&&null===ji(e)&&(o=n),n=n.sibling;null===(n=o)?(o=t.child,t.child=null):(o=n.sibling,n.sibling=null),Qa(t,!1,o,n,i,t.lastEffect);break;case"backwards":for(n=null,o=t.child,t.child=null;null!==o;){if(null!==(e=o.alternate)&&null===ji(e)){t.child=o;break}e=o.sibling,o.sibling=n,n=o,o=e}Qa(t,!0,n,null,i,t.lastEffect);break;case"together":Qa(t,!1,null,null,void 0,t.lastEffect);break;default:t.memoizedState=null}return t.child}function Ga(e,t,n){null!==e&&(t.dependencies=e.dependencies);var r=t.expirationTime;if(0!==r&&as(r),t.childExpirationTime<n)return null;if(null!==e&&t.child!==e.child)throw Error(a(153));if(null!==t.child){for(n=Es(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Es(e,e.pendingProps)).return=t;n.sibling=null}return t.child}function Ka(e,t){switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function Xa(e,t,n){var r=t.pendingProps;switch(t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:return ho(t.type)&&vo(),null;case 3:return Bi(),so(po),so(fo),(n=t.stateNode).pendingContext&&(n.context=n.pendingContext,n.pendingContext=null),null!==e&&null!==e.child||!Pa(t)||(t.effectTag|=4),null;case 5:Ni(t),n=Oi(Ai.current);var i=t.type;if(null!==e&&null!=t.stateNode)Va(e,t,i,r,n),e.ref!==t.ref&&(t.effectTag|=128);else{if(!r){if(null===t.stateNode)throw Error(a(166));return null}if(e=Oi(_i.current),Pa(t)){r=t.stateNode,i=t.type;var l=t.memoizedProps;switch(r[Cn]=t,r[Tn]=l,i){case"iframe":case"object":case"embed":$t("load",r);break;case"video":case"audio":for(e=0;e<Xe.length;e++)$t(Xe[e],r);break;case"source":$t("error",r);break;case"img":case"image":case"link":$t("error",r),$t("load",r);break;case"form":$t("reset",r),$t("submit",r);break;case"details":$t("toggle",r);break;case"input":ke(r,l),$t("invalid",r),sn(n,"onChange");break;case"select":r._wrapperState={wasMultiple:!!l.multiple},$t("invalid",r),sn(n,"onChange");break;case"textarea":Oe(r,l),$t("invalid",r),sn(n,"onChange")}for(var s in on(i,l),e=null,l)if(l.hasOwnProperty(s)){var u=l[s];"children"===s?"string"==typeof u?r.textContent!==u&&(e=["children",u]):"number"==typeof u&&r.textContent!==""+u&&(e=["children",""+u]):C.hasOwnProperty(s)&&null!=u&&sn(n,s)}switch(i){case"input":xe(r),Ee(r,l,!0);break;case"textarea":xe(r),Be(r);break;case"select":case"option":break;default:"function"==typeof l.onClick&&(r.onclick=un)}n=e,t.updateQueue=n,null!==n&&(t.effectTag|=4)}else{switch(s=9===n.nodeType?n:n.ownerDocument,e===ln&&(e=Le(i)),e===ln?"script"===i?((e=s.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=s.createElement(i,{is:r.is}):(e=s.createElement(i),"select"===i&&(s=e,r.multiple?s.multiple=!0:r.size&&(s.size=r.size))):e=s.createElementNS(e,i),e[Cn]=t,e[Tn]=r,za(e,t),t.stateNode=e,s=an(i,r),i){case"iframe":case"object":case"embed":$t("load",e),u=r;break;case"video":case"audio":for(u=0;u<Xe.length;u++)$t(Xe[u],e);u=r;break;case"source":$t("error",e),u=r;break;case"img":case"image":case"link":$t("error",e),$t("load",e),u=r;break;case"form":$t("reset",e),$t("submit",e),u=r;break;case"details":$t("toggle",e),u=r;break;case"input":ke(e,r),u=Se(e,r),$t("invalid",e),sn(n,"onChange");break;case"option":u=_e(e,r);break;case"select":e._wrapperState={wasMultiple:!!r.multiple},u=o({},r,{value:void 0}),$t("invalid",e),sn(n,"onChange");break;case"textarea":Oe(e,r),u=Ae(e,r),$t("invalid",e),sn(n,"onChange");break;default:u=r}on(i,u);var c=u;for(l in c)if(c.hasOwnProperty(l)){var f=c[l];"style"===l?nn(e,f):"dangerouslySetInnerHTML"===l?null!=(f=f?f.__html:void 0)&&De(e,f):"children"===l?"string"==typeof f?("textarea"!==i||""!==f)&&ze(e,f):"number"==typeof f&&ze(e,""+f):"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&"autoFocus"!==l&&(C.hasOwnProperty(l)?null!=f&&sn(n,l):null!=f&&Y(e,l,f,s))}switch(i){case"input":xe(e),Ee(e,r,!1);break;case"textarea":xe(e),Be(e);break;case"option":null!=r.value&&e.setAttribute("value",""+ge(r.value));break;case"select":e.multiple=!!r.multiple,null!=(n=r.value)?Me(e,!!r.multiple,n,!1):null!=r.defaultValue&&Me(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof u.onClick&&(e.onclick=un)}vn(i,r)&&(t.effectTag|=4)}null!==t.ref&&(t.effectTag|=128)}return null;case 6:if(e&&null!=t.stateNode)Wa(0,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(a(166));n=Oi(Ai.current),Oi(_i.current),Pa(t)?(n=t.stateNode,r=t.memoizedProps,n[Cn]=t,n.nodeValue!==r&&(t.effectTag|=4)):((n=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[Cn]=t,t.stateNode=n)}return null;case 13:return so(Li),r=t.memoizedState,0!=(64&t.effectTag)?(t.expirationTime=n,t):(n=null!==r,r=!1,null===e?void 0!==t.memoizedProps.fallback&&Pa(t):(r=null!==(i=e.memoizedState),n||null===i||null!==(i=e.child.sibling)&&(null!==(l=t.firstEffect)?(t.firstEffect=i,i.nextEffect=l):(t.firstEffect=t.lastEffect=i,i.nextEffect=null),i.effectTag=8)),n&&!r&&0!=(2&t.mode)&&(null===e&&!0!==t.memoizedProps.unstable_avoidThisFallback||0!=(1&Li.current)?Pl===xl&&(Pl=wl):(Pl!==xl&&Pl!==wl||(Pl=Sl),0!==Il&&null!==Cl&&(Bs(Cl,El),Rs(Cl,Il)))),(n||r)&&(t.effectTag|=4),null);case 4:return Bi(),null;case 10:return ti(t),null;case 17:return ho(t.type)&&vo(),null;case 19:if(so(Li),null===(r=t.memoizedState))return null;if(i=0!=(64&t.effectTag),null===(l=r.rendering)){if(i)Ka(r,!1);else if(Pl!==xl||null!==e&&0!=(64&e.effectTag))for(l=t.child;null!==l;){if(null!==(e=ji(l))){for(t.effectTag|=64,Ka(r,!1),null!==(i=e.updateQueue)&&(t.updateQueue=i,t.effectTag|=4),null===r.lastEffect&&(t.firstEffect=null),t.lastEffect=r.lastEffect,r=t.child;null!==r;)l=n,(i=r).effectTag&=2,i.nextEffect=null,i.firstEffect=null,i.lastEffect=null,null===(e=i.alternate)?(i.childExpirationTime=0,i.expirationTime=l,i.child=null,i.memoizedProps=null,i.memoizedState=null,i.updateQueue=null,i.dependencies=null):(i.childExpirationTime=e.childExpirationTime,i.expirationTime=e.expirationTime,i.child=e.child,i.memoizedProps=e.memoizedProps,i.memoizedState=e.memoizedState,i.updateQueue=e.updateQueue,l=e.dependencies,i.dependencies=null===l?null:{expirationTime:l.expirationTime,firstContext:l.firstContext,responders:l.responders}),r=r.sibling;return uo(Li,1&Li.current|2),t.child}l=l.sibling}}else{if(!i)if(null!==(e=ji(l))){if(t.effectTag|=64,i=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.effectTag|=4),Ka(r,!0),null===r.tail&&"hidden"===r.tailMode&&!l.alternate)return null!==(t=t.lastEffect=r.lastEffect)&&(t.nextEffect=null),null}else 2*zo()-r.renderingStartTime>r.tailExpiration&&1<n&&(t.effectTag|=64,i=!0,Ka(r,!1),t.expirationTime=t.childExpirationTime=n-1);r.isBackwards?(l.sibling=t.child,t.child=l):(null!==(n=r.last)?n.sibling=l:t.child=l,r.last=l)}return null!==r.tail?(0===r.tailExpiration&&(r.tailExpiration=zo()+500),n=r.tail,r.rendering=n,r.tail=n.sibling,r.lastEffect=t.lastEffect,r.renderingStartTime=zo(),n.sibling=null,t=Li.current,uo(Li,i?1&t|2:1&t),n):null}throw Error(a(156,t.tag))}function Ya(e){switch(e.tag){case 1:ho(e.type)&&vo();var t=e.effectTag;return 4096&t?(e.effectTag=-4097&t|64,e):null;case 3:if(Bi(),so(po),so(fo),0!=(64&(t=e.effectTag)))throw Error(a(285));return e.effectTag=-4097&t|64,e;case 5:return Ni(e),null;case 13:return so(Li),4096&(t=e.effectTag)?(e.effectTag=-4097&t|64,e):null;case 19:return so(Li),null;case 4:return Bi(),null;case 10:return ti(e),null;default:return null}}function Za(e,t){return{value:e,source:t,stack:ve(t)}}za=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Va=function(e,t,n,r,i){var a=e.memoizedProps;if(a!==r){var l,s,u=t.stateNode;switch(Oi(_i.current),e=null,n){case"input":a=Se(u,a),r=Se(u,r),e=[];break;case"option":a=_e(u,a),r=_e(u,r),e=[];break;case"select":a=o({},a,{value:void 0}),r=o({},r,{value:void 0}),e=[];break;case"textarea":a=Ae(u,a),r=Ae(u,r),e=[];break;default:"function"!=typeof a.onClick&&"function"==typeof r.onClick&&(u.onclick=un)}for(l in on(n,r),n=null,a)if(!r.hasOwnProperty(l)&&a.hasOwnProperty(l)&&null!=a[l])if("style"===l)for(s in u=a[l])u.hasOwnProperty(s)&&(n||(n={}),n[s]="");else"dangerouslySetInnerHTML"!==l&&"children"!==l&&"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&"autoFocus"!==l&&(C.hasOwnProperty(l)?e||(e=[]):(e=e||[]).push(l,null));for(l in r){var c=r[l];if(u=null!=a?a[l]:void 0,r.hasOwnProperty(l)&&c!==u&&(null!=c||null!=u))if("style"===l)if(u){for(s in u)!u.hasOwnProperty(s)||c&&c.hasOwnProperty(s)||(n||(n={}),n[s]="");for(s in c)c.hasOwnProperty(s)&&u[s]!==c[s]&&(n||(n={}),n[s]=c[s])}else n||(e||(e=[]),e.push(l,n)),n=c;else"dangerouslySetInnerHTML"===l?(c=c?c.__html:void 0,u=u?u.__html:void 0,null!=c&&u!==c&&(e=e||[]).push(l,c)):"children"===l?u===c||"string"!=typeof c&&"number"!=typeof c||(e=e||[]).push(l,""+c):"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&(C.hasOwnProperty(l)?(null!=c&&sn(i,l),e||u===c||(e=[])):(e=e||[]).push(l,c))}n&&(e=e||[]).push("style",n),i=e,(t.updateQueue=i)&&(t.effectTag|=4)}},Wa=function(e,t,n,r){n!==r&&(t.effectTag|=4)};var Ja="function"==typeof WeakSet?WeakSet:Set;function el(e,t){var n=t.source,r=t.stack;null===r&&null!==n&&(r=ve(n)),null!==n&&he(n.type),t=t.value,null!==e&&1===e.tag&&he(e.type);try{console.error(t)}catch(e){setTimeout((function(){throw e}))}}function tl(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){gs(e,t)}else t.current=null}function nl(e,t){switch(t.tag){case 0:case 11:case 15:case 22:return;case 1:if(256&t.effectTag&&null!==e){var n=e.memoizedProps,r=e.memoizedState;t=(e=t.stateNode).getSnapshotBeforeUpdate(t.elementType===t.type?n:Ko(t.type,n),r),e.__reactInternalSnapshotBeforeUpdate=t}return;case 3:case 5:case 6:case 4:case 17:return}throw Error(a(163))}function rl(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var r=n.destroy;n.destroy=void 0,void 0!==r&&r()}n=n.next}while(n!==t)}}function ol(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var r=n.create;n.destroy=r()}n=n.next}while(n!==t)}}function il(e,t,n){switch(n.tag){case 0:case 11:case 15:case 22:return void ol(3,n);case 1:if(e=n.stateNode,4&n.effectTag)if(null===t)e.componentDidMount();else{var r=n.elementType===n.type?t.memoizedProps:Ko(n.type,t.memoizedProps);e.componentDidUpdate(r,t.memoizedState,e.__reactInternalSnapshotBeforeUpdate)}return void(null!==(t=n.updateQueue)&&di(n,t,e));case 3:if(null!==(t=n.updateQueue)){if(e=null,null!==n.child)switch(n.child.tag){case 5:e=n.child.stateNode;break;case 1:e=n.child.stateNode}di(n,t,e)}return;case 5:return e=n.stateNode,void(null===t&&4&n.effectTag&&vn(n.type,n.memoizedProps)&&e.focus());case 6:case 4:case 12:return;case 13:return void(null===n.memoizedState&&(n=n.alternate,null!==n&&(n=n.memoizedState,null!==n&&(n=n.dehydrated,null!==n&&Lt(n)))));case 19:case 17:case 20:case 21:return}throw Error(a(163))}function al(e,t,n){switch("function"==typeof Ss&&Ss(t),t.tag){case 0:case 11:case 14:case 15:case 22:if(null!==(e=t.updateQueue)&&null!==(e=e.lastEffect)){var r=e.next;Uo(97<n?97:n,(function(){var e=r;do{var n=e.destroy;if(void 0!==n){var o=t;try{n()}catch(e){gs(o,e)}}e=e.next}while(e!==r)}))}break;case 1:tl(t),"function"==typeof(n=t.stateNode).componentWillUnmount&&function(e,t){try{t.props=e.memoizedProps,t.state=e.memoizedState,t.componentWillUnmount()}catch(t){gs(e,t)}}(t,n);break;case 5:tl(t);break;case 4:cl(e,t,n)}}function ll(e){var t=e.alternate;e.return=null,e.child=null,e.memoizedState=null,e.updateQueue=null,e.dependencies=null,e.alternate=null,e.firstEffect=null,e.lastEffect=null,e.pendingProps=null,e.memoizedProps=null,e.stateNode=null,null!==t&&ll(t)}function sl(e){return 5===e.tag||3===e.tag||4===e.tag}function ul(e){e:{for(var t=e.return;null!==t;){if(sl(t)){var n=t;break e}t=t.return}throw Error(a(160))}switch(t=n.stateNode,n.tag){case 5:var r=!1;break;case 3:case 4:t=t.containerInfo,r=!0;break;default:throw Error(a(161))}16&n.effectTag&&(ze(t,""),n.effectTag&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||sl(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag&&18!==n.tag;){if(2&n.effectTag)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.effectTag)){n=n.stateNode;break e}}r?function e(t,n,r){var o=t.tag,i=5===o||6===o;if(i)t=i?t.stateNode:t.stateNode.instance,n?8===r.nodeType?r.parentNode.insertBefore(t,n):r.insertBefore(t,n):(8===r.nodeType?(n=r.parentNode).insertBefore(t,r):(n=r).appendChild(t),null!==(r=r._reactRootContainer)&&void 0!==r||null!==n.onclick||(n.onclick=un));else if(4!==o&&null!==(t=t.child))for(e(t,n,r),t=t.sibling;null!==t;)e(t,n,r),t=t.sibling}(e,n,t):function e(t,n,r){var o=t.tag,i=5===o||6===o;if(i)t=i?t.stateNode:t.stateNode.instance,n?r.insertBefore(t,n):r.appendChild(t);else if(4!==o&&null!==(t=t.child))for(e(t,n,r),t=t.sibling;null!==t;)e(t,n,r),t=t.sibling}(e,n,t)}function cl(e,t,n){for(var r,o,i=t,l=!1;;){if(!l){l=i.return;e:for(;;){if(null===l)throw Error(a(160));switch(r=l.stateNode,l.tag){case 5:o=!1;break e;case 3:case 4:r=r.containerInfo,o=!0;break e}l=l.return}l=!0}if(5===i.tag||6===i.tag){e:for(var s=e,u=i,c=n,f=u;;)if(al(s,f,c),null!==f.child&&4!==f.tag)f.child.return=f,f=f.child;else{if(f===u)break e;for(;null===f.sibling;){if(null===f.return||f.return===u)break e;f=f.return}f.sibling.return=f.return,f=f.sibling}o?(s=r,u=i.stateNode,8===s.nodeType?s.parentNode.removeChild(u):s.removeChild(u)):r.removeChild(i.stateNode)}else if(4===i.tag){if(null!==i.child){r=i.stateNode.containerInfo,o=!0,i.child.return=i,i=i.child;continue}}else if(al(e,i,n),null!==i.child){i.child.return=i,i=i.child;continue}if(i===t)break;for(;null===i.sibling;){if(null===i.return||i.return===t)return;4===(i=i.return).tag&&(l=!1)}i.sibling.return=i.return,i=i.sibling}}function fl(e,t){switch(t.tag){case 0:case 11:case 14:case 15:case 22:return void rl(3,t);case 1:return;case 5:var n=t.stateNode;if(null!=n){var r=t.memoizedProps,o=null!==e?e.memoizedProps:r;e=t.type;var i=t.updateQueue;if(t.updateQueue=null,null!==i){for(n[Tn]=r,"input"===e&&"radio"===r.type&&null!=r.name&&Ce(n,r),an(e,o),t=an(e,r),o=0;o<i.length;o+=2){var l=i[o],s=i[o+1];"style"===l?nn(n,s):"dangerouslySetInnerHTML"===l?De(n,s):"children"===l?ze(n,s):Y(n,l,s,t)}switch(e){case"input":Te(n,r);break;case"textarea":Ie(n,r);break;case"select":t=n._wrapperState.wasMultiple,n._wrapperState.wasMultiple=!!r.multiple,null!=(e=r.value)?Me(n,!!r.multiple,e,!1):t!==!!r.multiple&&(null!=r.defaultValue?Me(n,!!r.multiple,r.defaultValue,!0):Me(n,!!r.multiple,r.multiple?[]:"",!1))}}}return;case 6:if(null===t.stateNode)throw Error(a(162));return void(t.stateNode.nodeValue=t.memoizedProps);case 3:return void((t=t.stateNode).hydrate&&(t.hydrate=!1,Lt(t.containerInfo)));case 12:return;case 13:if(n=t,null===t.memoizedState?r=!1:(r=!0,n=t.child,Rl=zo()),null!==n)e:for(e=n;;){if(5===e.tag)i=e.stateNode,r?"function"==typeof(i=i.style).setProperty?i.setProperty("display","none","important"):i.display="none":(i=e.stateNode,o=null!=(o=e.memoizedProps.style)&&o.hasOwnProperty("display")?o.display:null,i.style.display=tn("display",o));else if(6===e.tag)e.stateNode.nodeValue=r?"":e.memoizedProps;else{if(13===e.tag&&null!==e.memoizedState&&null===e.memoizedState.dehydrated){(i=e.child.sibling).return=e,e=i;continue}if(null!==e.child){e.child.return=e,e=e.child;continue}}if(e===n)break;for(;null===e.sibling;){if(null===e.return||e.return===n)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}return void dl(t);case 19:return void dl(t);case 17:return}throw Error(a(163))}function dl(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new Ja),t.forEach((function(t){var r=xs.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}var pl="function"==typeof WeakMap?WeakMap:Map;function ml(e,t,n){(n=si(n,null)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Ll||(Ll=!0,jl=r),el(e,t)},n}function yl(e,t,n){(n=si(n,null)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var o=t.value;n.payload=function(){return el(e,t),r(o)}}var i=e.stateNode;return null!==i&&"function"==typeof i.componentDidCatch&&(n.callback=function(){"function"!=typeof r&&(null===Fl?Fl=new Set([this]):Fl.add(this),el(e,t));var n=t.stack;this.componentDidCatch(t.value,{componentStack:null!==n?n:""})}),n}var hl,vl=Math.ceil,gl=X.ReactCurrentDispatcher,bl=X.ReactCurrentOwner,xl=0,wl=3,Sl=4,kl=0,Cl=null,Tl=null,El=0,Pl=xl,_l=null,Ml=1073741823,Al=1073741823,Ol=null,Il=0,Bl=!1,Rl=0,Nl=null,Ll=!1,jl=null,Fl=null,Dl=!1,zl=null,Vl=90,Wl=null,Ul=0,Hl=null,ql=0;function Ql(){return 0!=(48&kl)?1073741821-(zo()/10|0):0!==ql?ql:ql=1073741821-(zo()/10|0)}function $l(e,t,n){if(0==(2&(t=t.mode)))return 1073741823;var r=Vo();if(0==(4&t))return 99===r?1073741823:1073741822;if(0!=(16&kl))return El;if(null!==n)e=Go(e,0|n.timeoutMs||5e3,250);else switch(r){case 99:e=1073741823;break;case 98:e=Go(e,150,100);break;case 97:case 96:e=Go(e,5e3,250);break;case 95:e=2;break;default:throw Error(a(326))}return null!==Cl&&e===El&&--e,e}function Gl(e,t){if(50<Ul)throw Ul=0,Hl=null,Error(a(185));if(null!==(e=Kl(e,t))){var n=Vo();1073741823===t?0!=(8&kl)&&0==(48&kl)?Jl(e):(Yl(e),0===kl&&Qo()):Yl(e),0==(4&kl)||98!==n&&99!==n||(null===Wl?Wl=new Map([[e,t]]):(void 0===(n=Wl.get(e))||n>t)&&Wl.set(e,t))}}function Kl(e,t){e.expirationTime<t&&(e.expirationTime=t);var n=e.alternate;null!==n&&n.expirationTime<t&&(n.expirationTime=t);var r=e.return,o=null;if(null===r&&3===e.tag)o=e.stateNode;else for(;null!==r;){if(n=r.alternate,r.childExpirationTime<t&&(r.childExpirationTime=t),null!==n&&n.childExpirationTime<t&&(n.childExpirationTime=t),null===r.return&&3===r.tag){o=r.stateNode;break}r=r.return}return null!==o&&(Cl===o&&(as(t),Pl===Sl&&Bs(o,El)),Rs(o,t)),o}function Xl(e){var t=e.lastExpiredTime;if(0!==t)return t;if(!Is(e,t=e.firstPendingTime))return t;var n=e.lastPingedTime;return 2>=(e=n>(e=e.nextKnownPendingLevel)?n:e)&&t!==e?0:e}function Yl(e){if(0!==e.lastExpiredTime)e.callbackExpirationTime=1073741823,e.callbackPriority=99,e.callbackNode=qo(Jl.bind(null,e));else{var t=Xl(e),n=e.callbackNode;if(0===t)null!==n&&(e.callbackNode=null,e.callbackExpirationTime=0,e.callbackPriority=90);else{var r=Ql();if(1073741823===t?r=99:1===t||2===t?r=95:r=0>=(r=10*(1073741821-t)-10*(1073741821-r))?99:250>=r?98:5250>=r?97:95,null!==n){var o=e.callbackPriority;if(e.callbackExpirationTime===t&&o>=r)return;n!==Bo&&Co(n)}e.callbackExpirationTime=t,e.callbackPriority=r,t=1073741823===t?qo(Jl.bind(null,e)):Ho(r,Zl.bind(null,e),{timeout:10*(1073741821-t)-zo()}),e.callbackNode=t}}}function Zl(e,t){if(ql=0,t)return Ns(e,t=Ql()),Yl(e),null;var n=Xl(e);if(0!==n){if(t=e.callbackNode,0!=(48&kl))throw Error(a(327));if(ys(),e===Cl&&n===El||ns(e,n),null!==Tl){var r=kl;kl|=16;for(var o=os();;)try{ss();break}catch(t){rs(e,t)}if(ei(),kl=r,gl.current=o,1===Pl)throw t=_l,ns(e,n),Bs(e,n),Yl(e),t;if(null===Tl)switch(o=e.finishedWork=e.current.alternate,e.finishedExpirationTime=n,r=Pl,Cl=null,r){case xl:case 1:throw Error(a(345));case 2:Ns(e,2<n?2:n);break;case wl:if(Bs(e,n),n===(r=e.lastSuspendedTime)&&(e.nextKnownPendingLevel=fs(o)),1073741823===Ml&&10<(o=Rl+500-zo())){if(Bl){var i=e.lastPingedTime;if(0===i||i>=n){e.lastPingedTime=n,ns(e,n);break}}if(0!==(i=Xl(e))&&i!==n)break;if(0!==r&&r!==n){e.lastPingedTime=r;break}e.timeoutHandle=bn(ds.bind(null,e),o);break}ds(e);break;case Sl:if(Bs(e,n),n===(r=e.lastSuspendedTime)&&(e.nextKnownPendingLevel=fs(o)),Bl&&(0===(o=e.lastPingedTime)||o>=n)){e.lastPingedTime=n,ns(e,n);break}if(0!==(o=Xl(e))&&o!==n)break;if(0!==r&&r!==n){e.lastPingedTime=r;break}if(1073741823!==Al?r=10*(1073741821-Al)-zo():1073741823===Ml?r=0:(r=10*(1073741821-Ml)-5e3,0>(r=(o=zo())-r)&&(r=0),(n=10*(1073741821-n)-o)<(r=(120>r?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*vl(r/1960))-r)&&(r=n)),10<r){e.timeoutHandle=bn(ds.bind(null,e),r);break}ds(e);break;case 5:if(1073741823!==Ml&&null!==Ol){i=Ml;var l=Ol;if(0>=(r=0|l.busyMinDurationMs)?r=0:(o=0|l.busyDelayMs,r=(i=zo()-(10*(1073741821-i)-(0|l.timeoutMs||5e3)))<=o?0:o+r-i),10<r){Bs(e,n),e.timeoutHandle=bn(ds.bind(null,e),r);break}}ds(e);break;default:throw Error(a(329))}if(Yl(e),e.callbackNode===t)return Zl.bind(null,e)}}return null}function Jl(e){var t=e.lastExpiredTime;if(t=0!==t?t:1073741823,0!=(48&kl))throw Error(a(327));if(ys(),e===Cl&&t===El||ns(e,t),null!==Tl){var n=kl;kl|=16;for(var r=os();;)try{ls();break}catch(t){rs(e,t)}if(ei(),kl=n,gl.current=r,1===Pl)throw n=_l,ns(e,t),Bs(e,t),Yl(e),n;if(null!==Tl)throw Error(a(261));e.finishedWork=e.current.alternate,e.finishedExpirationTime=t,Cl=null,ds(e),Yl(e)}return null}function es(e,t){var n=kl;kl|=1;try{return e(t)}finally{0===(kl=n)&&Qo()}}function ts(e,t){var n=kl;kl&=-2,kl|=8;try{return e(t)}finally{0===(kl=n)&&Qo()}}function ns(e,t){e.finishedWork=null,e.finishedExpirationTime=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,xn(n)),null!==Tl)for(n=Tl.return;null!==n;){var r=n;switch(r.tag){case 1:null!=(r=r.type.childContextTypes)&&vo();break;case 3:Bi(),so(po),so(fo);break;case 5:Ni(r);break;case 4:Bi();break;case 13:case 19:so(Li);break;case 10:ti(r)}n=n.return}Cl=e,Tl=Es(e.current,null),El=t,Pl=xl,_l=null,Al=Ml=1073741823,Ol=null,Il=0,Bl=!1}function rs(e,t){for(;;){try{if(ei(),Di.current=ha,qi)for(var n=Wi.memoizedState;null!==n;){var r=n.queue;null!==r&&(r.pending=null),n=n.next}if(Vi=0,Hi=Ui=Wi=null,qi=!1,null===Tl||null===Tl.return)return Pl=1,_l=t,Tl=null;e:{var o=e,i=Tl.return,a=Tl,l=t;if(t=El,a.effectTag|=2048,a.firstEffect=a.lastEffect=null,null!==l&&"object"==typeof l&&"function"==typeof l.then){var s=l;if(0==(2&a.mode)){var u=a.alternate;u?(a.updateQueue=u.updateQueue,a.memoizedState=u.memoizedState,a.expirationTime=u.expirationTime):(a.updateQueue=null,a.memoizedState=null)}var c=0!=(1&Li.current),f=i;do{var d;if(d=13===f.tag){var p=f.memoizedState;if(null!==p)d=null!==p.dehydrated;else{var m=f.memoizedProps;d=void 0!==m.fallback&&(!0!==m.unstable_avoidThisFallback||!c)}}if(d){var y=f.updateQueue;if(null===y){var h=new Set;h.add(s),f.updateQueue=h}else y.add(s);if(0==(2&f.mode)){if(f.effectTag|=64,a.effectTag&=-2981,1===a.tag)if(null===a.alternate)a.tag=17;else{var v=si(1073741823,null);v.tag=2,ui(a,v)}a.expirationTime=1073741823;break e}l=void 0,a=t;var g=o.pingCache;if(null===g?(g=o.pingCache=new pl,l=new Set,g.set(s,l)):void 0===(l=g.get(s))&&(l=new Set,g.set(s,l)),!l.has(a)){l.add(a);var b=bs.bind(null,o,s,a);s.then(b,b)}f.effectTag|=4096,f.expirationTime=t;break e}f=f.return}while(null!==f);l=Error((he(a.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display."+ve(a))}5!==Pl&&(Pl=2),l=Za(l,a),f=i;do{switch(f.tag){case 3:s=l,f.effectTag|=4096,f.expirationTime=t,ci(f,ml(f,s,t));break e;case 1:s=l;var x=f.type,w=f.stateNode;if(0==(64&f.effectTag)&&("function"==typeof x.getDerivedStateFromError||null!==w&&"function"==typeof w.componentDidCatch&&(null===Fl||!Fl.has(w)))){f.effectTag|=4096,f.expirationTime=t,ci(f,yl(f,s,t));break e}}f=f.return}while(null!==f)}Tl=cs(Tl)}catch(e){t=e;continue}break}}function os(){var e=gl.current;return gl.current=ha,null===e?ha:e}function is(e,t){e<Ml&&2<e&&(Ml=e),null!==t&&e<Al&&2<e&&(Al=e,Ol=t)}function as(e){e>Il&&(Il=e)}function ls(){for(;null!==Tl;)Tl=us(Tl)}function ss(){for(;null!==Tl&&!Ro();)Tl=us(Tl)}function us(e){var t=hl(e.alternate,e,El);return e.memoizedProps=e.pendingProps,null===t&&(t=cs(e)),bl.current=null,t}function cs(e){Tl=e;do{var t=Tl.alternate;if(e=Tl.return,0==(2048&Tl.effectTag)){if(t=Xa(t,Tl,El),1===El||1!==Tl.childExpirationTime){for(var n=0,r=Tl.child;null!==r;){var o=r.expirationTime,i=r.childExpirationTime;o>n&&(n=o),i>n&&(n=i),r=r.sibling}Tl.childExpirationTime=n}if(null!==t)return t;null!==e&&0==(2048&e.effectTag)&&(null===e.firstEffect&&(e.firstEffect=Tl.firstEffect),null!==Tl.lastEffect&&(null!==e.lastEffect&&(e.lastEffect.nextEffect=Tl.firstEffect),e.lastEffect=Tl.lastEffect),1<Tl.effectTag&&(null!==e.lastEffect?e.lastEffect.nextEffect=Tl:e.firstEffect=Tl,e.lastEffect=Tl))}else{if(null!==(t=Ya(Tl)))return t.effectTag&=2047,t;null!==e&&(e.firstEffect=e.lastEffect=null,e.effectTag|=2048)}if(null!==(t=Tl.sibling))return t;Tl=e}while(null!==Tl);return Pl===xl&&(Pl=5),null}function fs(e){var t=e.expirationTime;return t>(e=e.childExpirationTime)?t:e}function ds(e){var t=Vo();return Uo(99,ps.bind(null,e,t)),null}function ps(e,t){do{ys()}while(null!==zl);if(0!=(48&kl))throw Error(a(327));var n=e.finishedWork,r=e.finishedExpirationTime;if(null===n)return null;if(e.finishedWork=null,e.finishedExpirationTime=0,n===e.current)throw Error(a(177));e.callbackNode=null,e.callbackExpirationTime=0,e.callbackPriority=90,e.nextKnownPendingLevel=0;var o=fs(n);if(e.firstPendingTime=o,r<=e.lastSuspendedTime?e.firstSuspendedTime=e.lastSuspendedTime=e.nextKnownPendingLevel=0:r<=e.firstSuspendedTime&&(e.firstSuspendedTime=r-1),r<=e.lastPingedTime&&(e.lastPingedTime=0),r<=e.lastExpiredTime&&(e.lastExpiredTime=0),e===Cl&&(Tl=Cl=null,El=0),1<n.effectTag?null!==n.lastEffect?(n.lastEffect.nextEffect=n,o=n.firstEffect):o=n:o=n.firstEffect,null!==o){var i=kl;kl|=32,bl.current=null,yn=Qt;var l=pn();if(mn(l)){if("selectionStart"in l)var s={start:l.selectionStart,end:l.selectionEnd};else e:{var u=(s=(s=l.ownerDocument)&&s.defaultView||window).getSelection&&s.getSelection();if(u&&0!==u.rangeCount){s=u.anchorNode;var c=u.anchorOffset,f=u.focusNode;u=u.focusOffset;try{s.nodeType,f.nodeType}catch(e){s=null;break e}var d=0,p=-1,m=-1,y=0,h=0,v=l,g=null;t:for(;;){for(var b;v!==s||0!==c&&3!==v.nodeType||(p=d+c),v!==f||0!==u&&3!==v.nodeType||(m=d+u),3===v.nodeType&&(d+=v.nodeValue.length),null!==(b=v.firstChild);)g=v,v=b;for(;;){if(v===l)break t;if(g===s&&++y===c&&(p=d),g===f&&++h===u&&(m=d),null!==(b=v.nextSibling))break;g=(v=g).parentNode}v=b}s=-1===p||-1===m?null:{start:p,end:m}}else s=null}s=s||{start:0,end:0}}else s=null;hn={activeElementDetached:null,focusedElem:l,selectionRange:s},Qt=!1,Nl=o;do{try{ms()}catch(e){if(null===Nl)throw Error(a(330));gs(Nl,e),Nl=Nl.nextEffect}}while(null!==Nl);Nl=o;do{try{for(l=e,s=t;null!==Nl;){var x=Nl.effectTag;if(16&x&&ze(Nl.stateNode,""),128&x){var w=Nl.alternate;if(null!==w){var S=w.ref;null!==S&&("function"==typeof S?S(null):S.current=null)}}switch(1038&x){case 2:ul(Nl),Nl.effectTag&=-3;break;case 6:ul(Nl),Nl.effectTag&=-3,fl(Nl.alternate,Nl);break;case 1024:Nl.effectTag&=-1025;break;case 1028:Nl.effectTag&=-1025,fl(Nl.alternate,Nl);break;case 4:fl(Nl.alternate,Nl);break;case 8:cl(l,c=Nl,s),ll(c)}Nl=Nl.nextEffect}}catch(e){if(null===Nl)throw Error(a(330));gs(Nl,e),Nl=Nl.nextEffect}}while(null!==Nl);if(S=hn,w=pn(),x=S.focusedElem,s=S.selectionRange,w!==x&&x&&x.ownerDocument&&function e(t,n){return!(!t||!n)&&(t===n||(!t||3!==t.nodeType)&&(n&&3===n.nodeType?e(t,n.parentNode):"contains"in t?t.contains(n):!!t.compareDocumentPosition&&!!(16&t.compareDocumentPosition(n))))}(x.ownerDocument.documentElement,x)){null!==s&&mn(x)&&(w=s.start,void 0===(S=s.end)&&(S=w),"selectionStart"in x?(x.selectionStart=w,x.selectionEnd=Math.min(S,x.value.length)):(S=(w=x.ownerDocument||document)&&w.defaultView||window).getSelection&&(S=S.getSelection(),c=x.textContent.length,l=Math.min(s.start,c),s=void 0===s.end?l:Math.min(s.end,c),!S.extend&&l>s&&(c=s,s=l,l=c),c=dn(x,l),f=dn(x,s),c&&f&&(1!==S.rangeCount||S.anchorNode!==c.node||S.anchorOffset!==c.offset||S.focusNode!==f.node||S.focusOffset!==f.offset)&&((w=w.createRange()).setStart(c.node,c.offset),S.removeAllRanges(),l>s?(S.addRange(w),S.extend(f.node,f.offset)):(w.setEnd(f.node,f.offset),S.addRange(w))))),w=[];for(S=x;S=S.parentNode;)1===S.nodeType&&w.push({element:S,left:S.scrollLeft,top:S.scrollTop});for("function"==typeof x.focus&&x.focus(),x=0;x<w.length;x++)(S=w[x]).element.scrollLeft=S.left,S.element.scrollTop=S.top}Qt=!!yn,hn=yn=null,e.current=n,Nl=o;do{try{for(x=e;null!==Nl;){var k=Nl.effectTag;if(36&k&&il(x,Nl.alternate,Nl),128&k){w=void 0;var C=Nl.ref;if(null!==C){var T=Nl.stateNode;switch(Nl.tag){case 5:w=T;break;default:w=T}"function"==typeof C?C(w):C.current=w}}Nl=Nl.nextEffect}}catch(e){if(null===Nl)throw Error(a(330));gs(Nl,e),Nl=Nl.nextEffect}}while(null!==Nl);Nl=null,No(),kl=i}else e.current=n;if(Dl)Dl=!1,zl=e,Vl=t;else for(Nl=o;null!==Nl;)t=Nl.nextEffect,Nl.nextEffect=null,Nl=t;if(0===(t=e.firstPendingTime)&&(Fl=null),1073741823===t?e===Hl?Ul++:(Ul=0,Hl=e):Ul=0,"function"==typeof ws&&ws(n.stateNode,r),Yl(e),Ll)throw Ll=!1,e=jl,jl=null,e;return 0!=(8&kl)||Qo(),null}function ms(){for(;null!==Nl;){var e=Nl.effectTag;0!=(256&e)&&nl(Nl.alternate,Nl),0==(512&e)||Dl||(Dl=!0,Ho(97,(function(){return ys(),null}))),Nl=Nl.nextEffect}}function ys(){if(90!==Vl){var e=97<Vl?97:Vl;return Vl=90,Uo(e,hs)}}function hs(){if(null===zl)return!1;var e=zl;if(zl=null,0!=(48&kl))throw Error(a(331));var t=kl;for(kl|=32,e=e.current.firstEffect;null!==e;){try{var n=e;if(0!=(512&n.effectTag))switch(n.tag){case 0:case 11:case 15:case 22:rl(5,n),ol(5,n)}}catch(t){if(null===e)throw Error(a(330));gs(e,t)}n=e.nextEffect,e.nextEffect=null,e=n}return kl=t,Qo(),!0}function vs(e,t,n){ui(e,t=ml(e,t=Za(n,t),1073741823)),null!==(e=Kl(e,1073741823))&&Yl(e)}function gs(e,t){if(3===e.tag)vs(e,e,t);else for(var n=e.return;null!==n;){if(3===n.tag){vs(n,e,t);break}if(1===n.tag){var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Fl||!Fl.has(r))){ui(n,e=yl(n,e=Za(t,e),1073741823)),null!==(n=Kl(n,1073741823))&&Yl(n);break}}n=n.return}}function bs(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),Cl===e&&El===n?Pl===Sl||Pl===wl&&1073741823===Ml&&zo()-Rl<500?ns(e,El):Bl=!0:Is(e,n)&&(0!==(t=e.lastPingedTime)&&t<n||(e.lastPingedTime=n,Yl(e)))}function xs(e,t){var n=e.stateNode;null!==n&&n.delete(t),0===(t=0)&&(t=$l(t=Ql(),e,null)),null!==(e=Kl(e,t))&&Yl(e)}hl=function(e,t,n){var r=t.expirationTime;if(null!==e){var o=t.pendingProps;if(e.memoizedProps!==o||po.current)Aa=!0;else{if(r<n){switch(Aa=!1,t.tag){case 3:Da(t),_a();break;case 5:if(Ri(t),4&t.mode&&1!==n&&o.hidden)return t.expirationTime=t.childExpirationTime=1,null;break;case 1:ho(t.type)&&xo(t);break;case 4:Ii(t,t.stateNode.containerInfo);break;case 10:r=t.memoizedProps.value,o=t.type._context,uo(Xo,o._currentValue),o._currentValue=r;break;case 13:if(null!==t.memoizedState)return 0!==(r=t.child.childExpirationTime)&&r>=n?Ha(e,t,n):(uo(Li,1&Li.current),null!==(t=Ga(e,t,n))?t.sibling:null);uo(Li,1&Li.current);break;case 19:if(r=t.childExpirationTime>=n,0!=(64&e.effectTag)){if(r)return $a(e,t,n);t.effectTag|=64}if(null!==(o=t.memoizedState)&&(o.rendering=null,o.tail=null),uo(Li,Li.current),!r)return null}return Ga(e,t,n)}Aa=!1}}else Aa=!1;switch(t.expirationTime=0,t.tag){case 2:if(r=t.type,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),e=t.pendingProps,o=yo(t,fo.current),ri(t,n),o=Gi(null,t,r,e,o,n),t.effectTag|=1,"object"==typeof o&&null!==o&&"function"==typeof o.render&&void 0===o.$$typeof){if(t.tag=1,t.memoizedState=null,t.updateQueue=null,ho(r)){var i=!0;xo(t)}else i=!1;t.memoizedState=null!==o.state&&void 0!==o.state?o.state:null,ai(t);var l=r.getDerivedStateFromProps;"function"==typeof l&&yi(t,r,l,e),o.updater=hi,t.stateNode=o,o._reactInternalFiber=t,xi(t,r,e,n),t=Fa(null,t,r,!0,i,n)}else t.tag=0,Oa(null,t,o,n),t=t.child;return t;case 16:e:{if(o=t.elementType,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),e=t.pendingProps,function(e){if(-1===e._status){e._status=0;var t=e._ctor;t=t(),e._result=t,t.then((function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)}),(function(t){0===e._status&&(e._status=2,e._result=t)}))}}(o),1!==o._status)throw o._result;switch(o=o._result,t.type=o,i=t.tag=function(e){if("function"==typeof e)return Ts(e)?1:0;if(null!=e){if((e=e.$$typeof)===se)return 11;if(e===fe)return 14}return 2}(o),e=Ko(o,e),i){case 0:t=La(null,t,o,e,n);break e;case 1:t=ja(null,t,o,e,n);break e;case 11:t=Ia(null,t,o,e,n);break e;case 14:t=Ba(null,t,o,Ko(o.type,e),r,n);break e}throw Error(a(306,o,""))}return t;case 0:return r=t.type,o=t.pendingProps,La(e,t,r,o=t.elementType===r?o:Ko(r,o),n);case 1:return r=t.type,o=t.pendingProps,ja(e,t,r,o=t.elementType===r?o:Ko(r,o),n);case 3:if(Da(t),r=t.updateQueue,null===e||null===r)throw Error(a(282));if(r=t.pendingProps,o=null!==(o=t.memoizedState)?o.element:null,li(e,t),fi(t,r,null,n),(r=t.memoizedState.element)===o)_a(),t=Ga(e,t,n);else{if((o=t.stateNode.hydrate)&&(wa=wn(t.stateNode.containerInfo.firstChild),xa=t,o=Sa=!0),o)for(n=Ei(t,null,r,n),t.child=n;n;)n.effectTag=-3&n.effectTag|1024,n=n.sibling;else Oa(e,t,r,n),_a();t=t.child}return t;case 5:return Ri(t),null===e&&Ta(t),r=t.type,o=t.pendingProps,i=null!==e?e.memoizedProps:null,l=o.children,gn(r,o)?l=null:null!==i&&gn(r,i)&&(t.effectTag|=16),Na(e,t),4&t.mode&&1!==n&&o.hidden?(t.expirationTime=t.childExpirationTime=1,t=null):(Oa(e,t,l,n),t=t.child),t;case 6:return null===e&&Ta(t),null;case 13:return Ha(e,t,n);case 4:return Ii(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=Ti(t,null,r,n):Oa(e,t,r,n),t.child;case 11:return r=t.type,o=t.pendingProps,Ia(e,t,r,o=t.elementType===r?o:Ko(r,o),n);case 7:return Oa(e,t,t.pendingProps,n),t.child;case 8:case 12:return Oa(e,t,t.pendingProps.children,n),t.child;case 10:e:{r=t.type._context,o=t.pendingProps,l=t.memoizedProps,i=o.value;var s=t.type._context;if(uo(Xo,s._currentValue),s._currentValue=i,null!==l)if(s=l.value,0===(i=jr(s,i)?0:0|("function"==typeof r._calculateChangedBits?r._calculateChangedBits(s,i):1073741823))){if(l.children===o.children&&!po.current){t=Ga(e,t,n);break e}}else for(null!==(s=t.child)&&(s.return=t);null!==s;){var u=s.dependencies;if(null!==u){l=s.child;for(var c=u.firstContext;null!==c;){if(c.context===r&&0!=(c.observedBits&i)){1===s.tag&&((c=si(n,null)).tag=2,ui(s,c)),s.expirationTime<n&&(s.expirationTime=n),null!==(c=s.alternate)&&c.expirationTime<n&&(c.expirationTime=n),ni(s.return,n),u.expirationTime<n&&(u.expirationTime=n);break}c=c.next}}else l=10===s.tag&&s.type===t.type?null:s.child;if(null!==l)l.return=s;else for(l=s;null!==l;){if(l===t){l=null;break}if(null!==(s=l.sibling)){s.return=l.return,l=s;break}l=l.return}s=l}Oa(e,t,o.children,n),t=t.child}return t;case 9:return o=t.type,r=(i=t.pendingProps).children,ri(t,n),r=r(o=oi(o,i.unstable_observedBits)),t.effectTag|=1,Oa(e,t,r,n),t.child;case 14:return i=Ko(o=t.type,t.pendingProps),Ba(e,t,o,i=Ko(o.type,i),r,n);case 15:return Ra(e,t,t.type,t.pendingProps,r,n);case 17:return r=t.type,o=t.pendingProps,o=t.elementType===r?o:Ko(r,o),null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),t.tag=1,ho(r)?(e=!0,xo(t)):e=!1,ri(t,n),gi(t,r,o),xi(t,r,o,n),Fa(null,t,r,!0,e,n);case 19:return $a(e,t,n)}throw Error(a(156,t.tag))};var ws=null,Ss=null;function ks(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.effectTag=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childExpirationTime=this.expirationTime=0,this.alternate=null}function Cs(e,t,n,r){return new ks(e,t,n,r)}function Ts(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Es(e,t){var n=e.alternate;return null===n?((n=Cs(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.effectTag=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childExpirationTime=e.childExpirationTime,n.expirationTime=e.expirationTime,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{expirationTime:t.expirationTime,firstContext:t.firstContext,responders:t.responders},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Ps(e,t,n,r,o,i){var l=2;if(r=e,"function"==typeof e)Ts(e)&&(l=1);else if("string"==typeof e)l=5;else e:switch(e){case ne:return _s(n.children,o,i,t);case le:l=8,o|=7;break;case re:l=8,o|=1;break;case oe:return(e=Cs(12,n,t,8|o)).elementType=oe,e.type=oe,e.expirationTime=i,e;case ue:return(e=Cs(13,n,t,o)).type=ue,e.elementType=ue,e.expirationTime=i,e;case ce:return(e=Cs(19,n,t,o)).elementType=ce,e.expirationTime=i,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case ie:l=10;break e;case ae:l=9;break e;case se:l=11;break e;case fe:l=14;break e;case de:l=16,r=null;break e;case pe:l=22;break e}throw Error(a(130,null==e?e:typeof e,""))}return(t=Cs(l,n,t,o)).elementType=e,t.type=r,t.expirationTime=i,t}function _s(e,t,n,r){return(e=Cs(7,e,r,t)).expirationTime=n,e}function Ms(e,t,n){return(e=Cs(6,e,null,t)).expirationTime=n,e}function As(e,t,n){return(t=Cs(4,null!==e.children?e.children:[],e.key,t)).expirationTime=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Os(e,t,n){this.tag=t,this.current=null,this.containerInfo=e,this.pingCache=this.pendingChildren=null,this.finishedExpirationTime=0,this.finishedWork=null,this.timeoutHandle=-1,this.pendingContext=this.context=null,this.hydrate=n,this.callbackNode=null,this.callbackPriority=90,this.lastExpiredTime=this.lastPingedTime=this.nextKnownPendingLevel=this.lastSuspendedTime=this.firstSuspendedTime=this.firstPendingTime=0}function Is(e,t){var n=e.firstSuspendedTime;return e=e.lastSuspendedTime,0!==n&&n>=t&&e<=t}function Bs(e,t){var n=e.firstSuspendedTime,r=e.lastSuspendedTime;n<t&&(e.firstSuspendedTime=t),(r>t||0===n)&&(e.lastSuspendedTime=t),t<=e.lastPingedTime&&(e.lastPingedTime=0),t<=e.lastExpiredTime&&(e.lastExpiredTime=0)}function Rs(e,t){t>e.firstPendingTime&&(e.firstPendingTime=t);var n=e.firstSuspendedTime;0!==n&&(t>=n?e.firstSuspendedTime=e.lastSuspendedTime=e.nextKnownPendingLevel=0:t>=e.lastSuspendedTime&&(e.lastSuspendedTime=t+1),t>e.nextKnownPendingLevel&&(e.nextKnownPendingLevel=t))}function Ns(e,t){var n=e.lastExpiredTime;(0===n||n>t)&&(e.lastExpiredTime=t)}function Ls(e,t,n,r){var o=t.current,i=Ql(),l=pi.suspense;i=$l(i,o,l);e:if(n){t:{if(Je(n=n._reactInternalFiber)!==n||1!==n.tag)throw Error(a(170));var s=n;do{switch(s.tag){case 3:s=s.stateNode.context;break t;case 1:if(ho(s.type)){s=s.stateNode.__reactInternalMemoizedMergedChildContext;break t}}s=s.return}while(null!==s);throw Error(a(171))}if(1===n.tag){var u=n.type;if(ho(u)){n=bo(n,u,s);break e}}n=s}else n=co;return null===t.context?t.context=n:t.pendingContext=n,(t=si(i,l)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),ui(o,t),Gl(o,i),i}function js(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:default:return e.child.stateNode}}function Fs(e,t){null!==(e=e.memoizedState)&&null!==e.dehydrated&&e.retryTime<t&&(e.retryTime=t)}function Ds(e,t){Fs(e,t),(e=e.alternate)&&Fs(e,t)}function zs(e,t,n){var r=new Os(e,t,n=null!=n&&!0===n.hydrate),o=Cs(3,null,null,2===t?7:1===t?3:0);r.current=o,o.stateNode=r,ai(o),e[En]=r.current,n&&0!==t&&function(e,t){var n=Ze(t);Et.forEach((function(e){mt(e,t,n)})),Pt.forEach((function(e){mt(e,t,n)}))}(0,9===e.nodeType?e:e.ownerDocument),this._internalRoot=r}function Vs(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Ws(e,t,n,r,o){var i=n._reactRootContainer;if(i){var a=i._internalRoot;if("function"==typeof o){var l=o;o=function(){var e=js(a);l.call(e)}}Ls(t,a,e,o)}else{if(i=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new zs(e,0,t?{hydrate:!0}:void 0)}(n,r),a=i._internalRoot,"function"==typeof o){var s=o;o=function(){var e=js(a);s.call(e)}}ts((function(){Ls(t,a,e,o)}))}return js(a)}function Us(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:te,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}function Hs(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Vs(t))throw Error(a(200));return Us(e,t,null,n)}zs.prototype.render=function(e){Ls(e,this._internalRoot,null,null)},zs.prototype.unmount=function(){var e=this._internalRoot,t=e.containerInfo;Ls(null,e,null,(function(){t[En]=null}))},yt=function(e){if(13===e.tag){var t=Go(Ql(),150,100);Gl(e,t),Ds(e,t)}},ht=function(e){13===e.tag&&(Gl(e,3),Ds(e,3))},vt=function(e){if(13===e.tag){var t=Ql();Gl(e,t=$l(t,e,null)),Ds(e,t)}},_=function(e,t,n){switch(t){case"input":if(Te(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=An(r);if(!o)throw Error(a(90));we(r),Te(r,o)}}}break;case"textarea":Ie(e,n);break;case"select":null!=(t=n.value)&&Me(e,!!n.multiple,t,!1)}},R=es,N=function(e,t,n,r,o){var i=kl;kl|=4;try{return Uo(98,e.bind(null,t,n,r,o))}finally{0===(kl=i)&&Qo()}},L=function(){0==(49&kl)&&(function(){if(null!==Wl){var e=Wl;Wl=null,e.forEach((function(e,t){Ns(t,e),Yl(t)})),Qo()}}(),ys())},j=function(e,t){var n=kl;kl|=2;try{return e(t)}finally{0===(kl=n)&&Qo()}};var qs,Qs,$s={Events:[_n,Mn,An,E,k,jn,function(e){ot(e,Ln)},I,B,Yt,lt,ys,{current:!1}]};Qs=(qs={findFiberByHostInstance:Pn,bundleType:0,version:"16.13.1",rendererPackageName:"react-dom"}).findFiberByHostInstance,function(e){if("undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var t=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(t.isDisabled||!t.supportsFiber)return!0;try{var n=t.inject(e);ws=function(e){try{t.onCommitFiberRoot(n,e,void 0,64==(64&e.current.effectTag))}catch(e){}},Ss=function(e){try{t.onCommitFiberUnmount(n,e)}catch(e){}}}catch(e){}}(o({},qs,{overrideHookState:null,overrideProps:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:X.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=nt(e))?null:e.stateNode},findFiberByHostInstance:function(e){return Qs?Qs(e):null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null})),t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=$s,t.createPortal=Hs,t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternalFiber;if(void 0===t){if("function"==typeof e.render)throw Error(a(188));throw Error(a(268,Object.keys(e)))}return e=null===(e=nt(t))?null:e.stateNode},t.flushSync=function(e,t){if(0!=(48&kl))throw Error(a(187));var n=kl;kl|=1;try{return Uo(99,e.bind(null,t))}finally{kl=n,Qo()}},t.hydrate=function(e,t,n){if(!Vs(t))throw Error(a(200));return Ws(null,e,t,!0,n)},t.render=function(e,t,n){if(!Vs(t))throw Error(a(200));return Ws(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!Vs(e))throw Error(a(40));return!!e._reactRootContainer&&(ts((function(){Ws(null,null,e,!1,(function(){e._reactRootContainer=null,e[En]=null}))})),!0)},t.unstable_batchedUpdates=es,t.unstable_createPortal=function(e,t){return Hs(e,t,2<arguments.length&&void 0!==arguments[2]?arguments[2]:null)},t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!Vs(n))throw Error(a(200));if(null==e||void 0===e._reactInternalFiber)throw Error(a(38));return Ws(e,t,n,!1,r)},t.version="16.13.1"},function(e,t,n){"use strict";e.exports=n(9)},function(e,t,n){"use strict";
/** @license React v0.19.1
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r,o,i,a,l;if("undefined"==typeof window||"function"!=typeof MessageChannel){var s=null,u=null,c=function(){if(null!==s)try{var e=t.unstable_now();s(!0,e),s=null}catch(e){throw setTimeout(c,0),e}},f=Date.now();t.unstable_now=function(){return Date.now()-f},r=function(e){null!==s?setTimeout(r,0,e):(s=e,setTimeout(c,0))},o=function(e,t){u=setTimeout(e,t)},i=function(){clearTimeout(u)},a=function(){return!1},l=t.unstable_forceFrameRate=function(){}}else{var d=window.performance,p=window.Date,m=window.setTimeout,y=window.clearTimeout;if("undefined"!=typeof console){var h=window.cancelAnimationFrame;"function"!=typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"),"function"!=typeof h&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills")}if("object"==typeof d&&"function"==typeof d.now)t.unstable_now=function(){return d.now()};else{var v=p.now();t.unstable_now=function(){return p.now()-v}}var g=!1,b=null,x=-1,w=5,S=0;a=function(){return t.unstable_now()>=S},l=function(){},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing framerates higher than 125 fps is not unsupported"):w=0<e?Math.floor(1e3/e):5};var k=new MessageChannel,C=k.port2;k.port1.onmessage=function(){if(null!==b){var e=t.unstable_now();S=e+w;try{b(!0,e)?C.postMessage(null):(g=!1,b=null)}catch(e){throw C.postMessage(null),e}}else g=!1},r=function(e){b=e,g||(g=!0,C.postMessage(null))},o=function(e,n){x=m((function(){e(t.unstable_now())}),n)},i=function(){y(x),x=-1}}function T(e,t){var n=e.length;e.push(t);e:for(;;){var r=n-1>>>1,o=e[r];if(!(void 0!==o&&0<_(o,t)))break e;e[r]=t,e[n]=o,n=r}}function E(e){return void 0===(e=e[0])?null:e}function P(e){var t=e[0];if(void 0!==t){var n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,o=e.length;r<o;){var i=2*(r+1)-1,a=e[i],l=i+1,s=e[l];if(void 0!==a&&0>_(a,n))void 0!==s&&0>_(s,a)?(e[r]=s,e[l]=n,r=l):(e[r]=a,e[i]=n,r=i);else{if(!(void 0!==s&&0>_(s,n)))break e;e[r]=s,e[l]=n,r=l}}}return t}return null}function _(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}var M=[],A=[],O=1,I=null,B=3,R=!1,N=!1,L=!1;function j(e){for(var t=E(A);null!==t;){if(null===t.callback)P(A);else{if(!(t.startTime<=e))break;P(A),t.sortIndex=t.expirationTime,T(M,t)}t=E(A)}}function F(e){if(L=!1,j(e),!N)if(null!==E(M))N=!0,r(D);else{var t=E(A);null!==t&&o(F,t.startTime-e)}}function D(e,n){N=!1,L&&(L=!1,i()),R=!0;var r=B;try{for(j(n),I=E(M);null!==I&&(!(I.expirationTime>n)||e&&!a());){var l=I.callback;if(null!==l){I.callback=null,B=I.priorityLevel;var s=l(I.expirationTime<=n);n=t.unstable_now(),"function"==typeof s?I.callback=s:I===E(M)&&P(M),j(n)}else P(M);I=E(M)}if(null!==I)var u=!0;else{var c=E(A);null!==c&&o(F,c.startTime-n),u=!1}return u}finally{I=null,B=r,R=!1}}function z(e){switch(e){case 1:return-1;case 2:return 250;case 5:return 1073741823;case 4:return 1e4;default:return 5e3}}var V=l;t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){N||R||(N=!0,r(D))},t.unstable_getCurrentPriorityLevel=function(){return B},t.unstable_getFirstCallbackNode=function(){return E(M)},t.unstable_next=function(e){switch(B){case 1:case 2:case 3:var t=3;break;default:t=B}var n=B;B=t;try{return e()}finally{B=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=V,t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=B;B=e;try{return t()}finally{B=n}},t.unstable_scheduleCallback=function(e,n,a){var l=t.unstable_now();if("object"==typeof a&&null!==a){var s=a.delay;s="number"==typeof s&&0<s?l+s:l,a="number"==typeof a.timeout?a.timeout:z(e)}else a=z(e),s=l;return e={id:O++,callback:n,priorityLevel:e,startTime:s,expirationTime:a=s+a,sortIndex:-1},s>l?(e.sortIndex=s,T(A,e),null===E(M)&&e===E(A)&&(L?i():L=!0,o(F,s-l))):(e.sortIndex=a,T(M,e),N||R||(N=!0,r(D))),e},t.unstable_shouldYield=function(){var e=t.unstable_now();j(e);var n=E(M);return n!==I&&null!==I&&null!==n&&null!==n.callback&&n.startTime<=e&&n.expirationTime<I.expirationTime||a()},t.unstable_wrapCallback=function(e){var t=B;return function(){var n=B;B=t;try{return e.apply(this,arguments)}finally{B=n}}}},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();var o=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.url=t||null,this.callback=n||function(){},this.buffer=null,window.AudioContext=window.AudioContext||window.webkitAudioContext,this.context=window.context||new AudioContext,this.loadBuffer()}return r(e,[{key:"play",value:function(e){var t=e&&e.volume,n=e&&e.offset,r=e&&e.loop,o=this.context.createBufferSource(),i=this.context.createGain();return i.gain.value=t||.5,i.connect(this.context.destination),o.connect(i),o.buffer=this.buffer,o.start(n?this.context.currentTime+n:0),o.loop=r||!1,o.stop.bind(o)}},{key:"loadBuffer",value:function(){var e=this,t=new XMLHttpRequest;t.open("GET",this.url,!0),t.responseType="arraybuffer",t.onload=function(){e.context.decodeAudioData(t.response,(function(t){t?(e.buffer=t,e.callback()):console.error("error decoding file data: "+e.url)}),(function(e){console.error("decodeAudioData error",e)}))},t.onerror=function(){console.error("BufferLoader: XHR error")},t.send()}}]),e}();t.default=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r,o,i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=n(1),l=c(n(2)),s=n(0),u=c(s);function c(e){return e&&e.__esModule?e:{default:e}}function f(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}var d=(o=r=function(e){function t(e,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var r=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e)),o=e.args,i=(e.children,e.shape),a=f(e,["args","children","shape"]);return r.body=s.Bodies[i].apply(s.Bodies,function(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}(o).concat([a])),s.World.addBody(n.engine.world,r.body),r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),i(t,[{key:"componentWillReceiveProps",value:function(e){var t=this,n=(e.args,e.children,e.shape,f(e,["args","children","shape"]));Object.keys(n).forEach((function(r){r in t.body&&t.props[r]!==e[r]&&u.default.Body.set(t.body,r,n[r])}))}},{key:"componentWillUnmount",value:function(){s.World.remove(this.context.engine.world,this.body)}},{key:"getChildContext",value:function(){return{body:this.body}}},{key:"render",value:function(){return this.props.children}}]),t}(a.Component),r.propTypes={angle:l.default.number,area:l.default.string,args:l.default.array,axes:l.default.shape({x:l.default.number,y:l.default.number}),bounds:l.default.shape({min:l.default.shape({x:l.default.number,y:l.default.number}),max:l.default.shape({x:l.default.number,y:l.default.number})}),children:l.default.any,collisionFilter:l.default.shape({category:l.default.number,group:l.default.number,mask:l.default.number}),density:l.default.number,force:l.default.shape({x:l.default.number,y:l.default.number}),friction:l.default.number,frictionAir:l.default.number,frictionStatic:l.default.number,id:l.default.number,inertia:l.default.number,inverseInertia:l.default.number,inverseMass:l.default.number,isSensor:l.default.bool,isSleeping:l.default.bool,isStatic:l.default.bool,label:l.default.string,mass:l.default.number,position:l.default.shape({x:l.default.number,y:l.default.number}),restitution:l.default.number,shape:l.default.string,sleepThreshold:l.default.number,slop:l.default.number,slope:l.default.number,timeScale:l.default.number,torque:l.default.number,vertices:l.default.array},r.defaultProps={args:[0,0,100,100],restitution:0,friction:1,frictionStatic:0,shape:"rectangle"},r.contextTypes={engine:l.default.object},r.childContextTypes={body:l.default.object},o);t.default=d},function(e,t,n){"use strict";var r=n(14);function o(){}function i(){}i.resetWarningCache=o,e.exports=function(){function e(e,t,n,o,i,a){if(a!==r){var l=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw l.name="Invariant Violation",l}}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:i,resetWarningCache:o};return n.PropTypes=n,n}},function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r,o,i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),l=n(1),s=f(l),u=f(n(2)),c=f(n(16));function f(e){return e&&e.__esModule?e:{default:e}}var d=(o=r=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.loop=new c.default,n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),a(t,[{key:"componentDidMount",value:function(){this.loop.start()}},{key:"componentWillUnmount",value:function(){this.loop.stop()}},{key:"getChildContext",value:function(){return{loop:this.loop}}},{key:"render",value:function(){var e=i({},{height:"100%",width:"100%"},this.props.style);return s.default.createElement("div",{style:e},this.props.children)}}]),t}(l.Component),r.propTypes={children:u.default.any,style:u.default.object},r.childContextTypes={loop:u.default.object},o);t.default=d},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();var o=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.subscribers=[],this.loopID=null,this.loop=this.loop.bind(this)}return r(e,[{key:"loop",value:function(){this.subscribers.forEach((function(e){e.call()})),this.loopID=window.requestAnimationFrame(this.loop)}},{key:"start",value:function(){this.loopID||this.loop()}},{key:"stop",value:function(){this.loopID||(window.cancelAnimationFrame(this.loopID),this.loopID=null)}},{key:"subscribe",value:function(e){return this.subscribers.push(e)}},{key:"unsubscribe",value:function(e){this.subscribers.splice(e-1,1)}}]),e}();t.default=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();var o=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.LEFT=37,this.RIGHT=39,this.UP=38,this.DOWN=40,this.SPACE=32,this.keys={},this.down=this.down.bind(this),this.up=this.up.bind(this),this.isDown=this.isDown.bind(this),this.subscribe=this.subscribe.bind(this),this.unsubscribe=this.unsubscribe.bind(this)}return r(e,[{key:"down",value:function(e){e.keyCode in this.keys&&(e.preventDefault(),this.keys[e.keyCode]=!0)}},{key:"up",value:function(e){e.keyCode in this.keys&&(e.preventDefault(),this.keys[e.keyCode]=!1)}},{key:"isDown",value:function(e){return this.keys[e]||!1}},{key:"subscribe",value:function(e){var t=this;window.addEventListener("keydown",this.down),window.addEventListener("keyup",this.up),e.forEach((function(e){t.keys[e]=!1}))}},{key:"unsubscribe",value:function(){window.removeEventListener("keydown",this.down),window.removeEventListener("keyup",this.up),this.keys={}}}]),e}();t.default=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r,o,i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),l=n(1),s=c(l),u=c(n(2));function c(e){return e&&e.__esModule?e:{default:e}}var f=(o=r=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.loopID=null,n.tickCount=0,n.finished=!1,n.state={currentStep:0},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),a(t,[{key:"componentDidMount",value:function(){this.props.onPlayStateChanged(1);var e=this.animate.bind(this,this.props);this.loopID=this.context.loop.subscribe(e)}},{key:"componentWillReceiveProps",value:function(e){var t=this;e.state!==this.props.state&&(this.finished=!1,this.props.onPlayStateChanged(1),this.context.loop.unsubscribe(this.loopID),this.tickCount=0,this.setState({currentStep:0},(function(){var n=t.animate.bind(t,e);t.loopID=t.context.loop.subscribe(n)})))}},{key:"componentWillUnmount",value:function(){this.context.loop.unsubscribe(this.loopID)}},{key:"animate",value:function(e){var t=e.repeat,n=e.ticksPerFrame,r=e.state,o=e.steps;if(this.tickCount!==n||this.finished)this.tickCount++;else{if(0!==o[r]){var i=this.state.currentStep,a=o[r],l=i===a?0:i+1;this.setState({currentStep:l}),i===a&&!1===t&&(this.finished=!0,this.props.onPlayStateChanged(0))}this.tickCount=0}}},{key:"getImageStyles",value:function(){var e=this.state.currentStep,t=this.props,n=t.state,r=t.tileWidth,o=t.tileHeight;return{position:"absolute",transform:"translate(-"+(this.props.offset[0]+e*r)+"px, -"+(this.props.offset[1]+n*o)+"px)"}}},{key:"getWrapperStyles",value:function(){return{height:this.props.tileHeight,width:this.props.tileWidth,overflow:"hidden",position:"relative",transform:"scale("+(this.props.scale||this.context.scale)+")",transformOrigin:"top left",imageRendering:"pixelated"}}},{key:"render",value:function(){return s.default.createElement("div",{style:i({},this.getWrapperStyles(),this.props.style)},s.default.createElement("img",{style:this.getImageStyles(),src:this.props.src}))}}]),t}(l.Component),r.propTypes={offset:u.default.array,onPlayStateChanged:u.default.func,repeat:u.default.bool,scale:u.default.number,src:u.default.string,state:u.default.number,steps:u.default.array,style:u.default.object,ticksPerFrame:u.default.number,tileHeight:u.default.number,tileWidth:u.default.number},r.defaultProps={offset:[0,0],onPlayStateChanged:function(){},repeat:!0,src:"",state:0,steps:[],ticksPerFrame:4,tileHeight:64,tileWidth:64},r.contextTypes={loop:u.default.object,scale:u.default.number},o);t.default=f},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r,o,i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},a=function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var n=[],r=!0,o=!1,i=void 0;try{for(var a,l=e[Symbol.iterator]();!(r=(a=l.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{!r&&l.return&&l.return()}finally{if(o)throw i}}return n}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")},l=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),s=n(1),u=f(s),c=f(n(2));function f(e){return e&&e.__esModule?e:{default:e}}var d=(o=r=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.container=null,n.state={dimensions:[0,0]},n.setDimensions=n.setDimensions.bind(n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),l(t,[{key:"componentDidMount",value:function(){window.addEventListener("resize",this.setDimensions),this.setDimensions()}},{key:"componentWillUnmount",value:function(){window.removeEventListener("resize",this.setDimensions)}},{key:"getChildContext",value:function(){return{scale:this.getScale().scale,loop:this.context.loop}}},{key:"getScale",value:function(){var e=a(this.state.dimensions,2),t=e[0],n=e[1],r=this.props,o=r.height,i=r.width,l=void 0,s=void 0,u=void 0;return o/i>n/t?(l=(s=n)*i/o,u=n/o):(s=(l=t)*o/i,u=t/i),this.container?{height:s,width:l,scale:u}:{height:o,width:i,scale:1}}},{key:"getWrapperStyles",value:function(){return{height:"100%",width:"100%",position:"relative"}}},{key:"getInnerStyles",value:function(){var e=this.getScale(),t=Math.floor((this.state.dimensions[0]-e.width)/2),n=Math.floor((this.state.dimensions[1]-e.height)/2);return{height:Math.floor(e.height),width:Math.floor(e.width),position:"absolute",overflow:"hidden",transform:"translate("+t+"px, "+n+"px)"}}},{key:"render",value:function(){var e=this;return u.default.createElement("div",{style:this.getWrapperStyles(),ref:function(t){e.container=t}},u.default.createElement("div",{style:i({},this.getInnerStyles(),this.props.style)},this.props.children))}},{key:"setDimensions",value:function(){this.setState({dimensions:[this.container.offsetWidth,this.container.offsetHeight]})}}]),t}(s.Component),r.propTypes={children:c.default.any,height:c.default.number,style:c.default.object,width:c.default.number},r.defaultProps={width:1024,height:576},r.contextTypes={loop:c.default.object},r.childContextTypes={loop:c.default.object,scale:c.default.number},o);t.default=d},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r,o,i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),l=n(1),s=c(l),u=c(n(2));function c(e){return e&&e.__esModule?e:{default:e}}function f(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function d(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var p=(o=r=function(e){function t(){return f(this,t),d(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),a(t,[{key:"shouldComponentUpdate",value:function(e,t,n){return this.context.scale!==n.scale}},{key:"generateMap",value:function(){var e=this,t=this.props,n=t.columns,r=t.layers,o=t.rows,i=[];return r.forEach((function(t,r){for(var a=[],l=0;l<o;l++)for(var u=0;u<n;u++){var c=l*n+u;0!==t[c]&&a.push(s.default.createElement("div",{key:"tile-"+r+"-"+l+"-"+u,style:e.getImageWrapperStyles(l,u)},e.props.renderTile(e.getTileData(l,u,t[c]),e.props.src,e.getImageStyles(t[c]))))}i.push(a)})),i}},{key:"getTileData",value:function(e,t,n){var r=this.props.tileSize;return{index:n,size:r,left:t*r,top:e*r}}},{key:"getImageStyles",value:function(e){var t=this.context.scale,n=this.props.tileSize;return{position:"absolute",imageRendering:"pixelated",display:"block",height:"100%",transform:"translate(-"+(e-1)*Math.round(t*n)+"px, 0px)"}}},{key:"getImageWrapperStyles",value:function(e,t){var n=this.context.scale,r=this.props.tileSize,o=Math.round(n*r);return{height:o,width:o,overflow:"hidden",position:"absolute",transform:"translate("+t*o+"px, "+e*o+"px)"}}},{key:"getLayerStyles",value:function(){return{position:"absolute",top:0,left:0}}},{key:"getWrapperStyles",value:function(){return{position:"absolute",top:0,left:0}}},{key:"render",value:function(){var e=this,t=this.generateMap();return s.default.createElement("div",{style:i({},this.getWrapperStyles(),this.props.style)},t.map((function(t,n){return s.default.createElement("div",{key:"layer-"+n,style:e.getLayerStyles()},t)})))}}]),t}(l.Component),r.propTypes={columns:u.default.number,layers:u.default.array,renderTile:u.default.func,rows:u.default.number,scale:u.default.number,src:u.default.string,style:u.default.object,tileSize:u.default.number},r.defaultProps={columns:16,layers:[],renderTile:function(e,t,n){return s.default.createElement("img",{style:n,src:t})},rows:9,src:"",tileSize:64},r.contextTypes={scale:u.default.number},o);t.default=p},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r,o,i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=n(1),l=f(a),s=f(n(2)),u=n(0),c=f(u);function f(e){return e&&e.__esModule?e:{default:e}}var d=(o=r=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));n.loopID=null,n.lastTime=null;var r=c.default.World.create({gravity:e.gravity});return n.engine=u.Engine.create({world:r}),n.loop=n.loop.bind(n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),i(t,[{key:"componentWillReceiveProps",value:function(e){var t=e.gravity;t!==this.props.gravity&&(this.engine.world.gravity=t)}},{key:"componentDidMount",value:function(){this.loopID=this.context.loop.subscribe(this.loop),this.props.onInit(this.engine),u.Events.on(this.engine,"afterUpdate",this.props.onUpdate),u.Events.on(this.engine,"collisionStart",this.props.onCollision)}},{key:"componentWillUnmount",value:function(){this.context.loop.unsubscribe(this.loopID),u.Events.off(this.engine,"afterUpdate",this.props.onUpdate),u.Events.off(this.engine,"collisionStart",this.props.onCollision)}},{key:"getChildContext",value:function(){return{engine:this.engine}}},{key:"render",value:function(){return l.default.createElement("div",{style:{position:"absolute",top:0,left:0,height:"100%",width:"100%"}},this.props.children)}},{key:"loop",value:function(){var e=.001*Date.now();u.Engine.update(this.engine,1e3/60,this.lastTime?e/this.lastTime:1),this.lastTime=e}}]),t}(a.Component),r.propTypes={children:s.default.any,gravity:s.default.shape({x:s.default.number,y:s.default.number,scale:s.default.number}),onCollision:s.default.func,onInit:s.default.func,onUpdate:s.default.func},r.defaultProps={gravity:{x:0,y:1,scale:.001},onCollision:function(){},onInit:function(){},onUpdate:function(){}},r.contextTypes={scale:s.default.number,loop:s.default.object},r.childContextTypes={engine:s.default.object},o);t.default=d},function(e,t,n){var r=n(23),o=n(24);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var i={insert:"head",singleton:!1},a=(r(o,i),o.locals?o.locals:{});e.exports=a},function(e,t,n){"use strict";var r,o=function(){return void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r},i=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}(),a=[];function l(e){for(var t=-1,n=0;n<a.length;n++)if(a[n].identifier===e){t=n;break}return t}function s(e,t){for(var n={},r=[],o=0;o<e.length;o++){var i=e[o],s=t.base?i[0]+t.base:i[0],u=n[s]||0,c="".concat(s," ").concat(u);n[s]=u+1;var f=l(c),d={css:i[1],media:i[2],sourceMap:i[3]};-1!==f?(a[f].references++,a[f].updater(d)):a.push({identifier:c,updater:h(d,t),references:1}),r.push(c)}return r}function u(e){var t=document.createElement("style"),r=e.attributes||{};if(void 0===r.nonce){var o=n.nc;o&&(r.nonce=o)}if(Object.keys(r).forEach((function(e){t.setAttribute(e,r[e])})),"function"==typeof e.insert)e.insert(t);else{var a=i(e.insert||"head");if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(t)}return t}var c,f=(c=[],function(e,t){return c[e]=t,c.filter(Boolean).join("\n")});function d(e,t,n,r){var o=n?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(e.styleSheet)e.styleSheet.cssText=f(t,o);else{var i=document.createTextNode(o),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(i,a[t]):e.appendChild(i)}}function p(e,t,n){var r=n.css,o=n.media,i=n.sourceMap;if(o?e.setAttribute("media",o):e.removeAttribute("media"),i&&btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}var m=null,y=0;function h(e,t){var n,r,o;if(t.singleton){var i=y++;n=m||(m=u(t)),r=d.bind(null,n,i,!1),o=d.bind(null,n,i,!0)}else n=u(t),r=p.bind(null,n,t),o=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else o()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=o());var n=s(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var r=0;r<n.length;r++){var o=l(n[r]);a[o].references--}for(var i=s(e,t),u=0;u<n.length;u++){var c=l(n[u]);0===a[c].references&&(a[c].updater(),a.splice(c,1))}n=i}}}},function(e,t,n){(t=n(25)(!1)).push([e.i,"#app{max-width:600px;position:relative}.score{position:absolute;color:white;font-size:2rem}.gameOver{position:absolute;width:100%;top:50%;margin:0 auto;text-align:center}.gameOver>p{font-size:2rem;color:white}\n",""]),e.exports=t},function(e,t,n){"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=function(e,t){var n=e[1]||"",r=e[3];if(!r)return n;if(t&&"function"==typeof btoa){var o=(a=r,l=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),s="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(l),"/*# ".concat(s," */")),i=r.sources.map((function(e){return"/*# sourceURL=".concat(r.sourceRoot||"").concat(e," */")}));return[n].concat(i).concat([o]).join("\n")}var a,l,s;return[n].join("\n")}(t,e);return t[2]?"@media ".concat(t[2]," {").concat(n,"}"):n})).join("")},t.i=function(e,n,r){"string"==typeof e&&(e=[[null,e,""]]);var o={};if(r)for(var i=0;i<this.length;i++){var a=this[i][0];null!=a&&(o[a]=!0)}for(var l=0;l<e.length;l++){var s=[].concat(e[l]);r&&o[s[0]]||(n&&(s[2]?s[2]="".concat(n," and ").concat(s[2]):s[2]=n),t.push(s))}},t}},function(e,t,n){"use strict";n.r(t);var r=n(1),o=n.n(r),i=n(4),a=n.n(i),l=n(0),s=n.n(l),u=["purple","gold","brown","aqua","whitesmoke"],c={isStatic:!0,restitution:0,label:"Paddle",render:{fillStyle:"brown"}},f=function(e){var t=e.keys,n=s.a.Bodies.rectangle(200,580,150,20,c),o=n.position.x,i=.2,a=function(){t.isDown(t.LEFT)?(console.log("LEFT"),n.position.x>0&&(!0,o-=i+=.5,s.a.Body.set(n,"position",{x:o,y:580}))):t.isDown(t.RIGHT)?(console.log("RIGHT"),function(e){return e.position.x<650}(n)&&(!0,o+=i+=.5,s.a.Body.set(n,"position",{x:o,y:580}))):i=.2},l=function(e){if("Paddle"===e.bodyB.label){var t=(e.bodyB.vertices[1].x-e.bodyB.vertices[0].x)/2+e.bodyB.vertices[0].x,n=e.bodyA.position.x-t;s.a.Body.setVelocity(e.bodyA,{x:n/5,y:-25})}};return Object(r.useEffect)((function(){return e.addBody(n),s.a.Events.on(e.engine,"afterUpdate",a),s.a.Events.on(e.engine,"collisionStart",(function(e){return l(e.pairs[0])})),function(){s.a.Events.off(e.engine,"afterUpdate",a),s.a.Events.off(e.engine,"collisionStart",(function(e){return l(e.pairs[0])}))}}),[]),null};function d(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function p(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?d(Object(n),!0).forEach((function(t){m(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):d(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function m(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var y=function(e){var t=[];return Object(r.useEffect)((function(){for(var n={isStatic:!0,restitution:0,label:"brick",wireframes:!1},r=0,o=50,i=1;i<=24;i++){var a=Math.floor(Math.random()*u.length);r=i%12*50+50,i%13==0&&(o=i/13*50+50),t.push(s.a.Bodies.rectangle(r+2,o,46,20,p({},n,{render:{fillStyle:u[a]}})))}e.addBody(t)}),[]),null};function h(e,t){return Math.random()*(t-e)+e}var v={density:.04,frictionAir:.01,restitution:.5,friction:.1,label:"ball",render:{fillStyle:"white"}},g=function(e){var t=s.a.Bodies.circle(h(50,600),200,10,v),n=function(){if(t.position.y>window.innerHeight&&e.engine.world.bodies.some((function(e){return"ball"===e.label}))){setTimeout((function(){s.a.Body.set(t,"isStatic",!1),s.a.Body.setVelocity(t,{x:h(-8,8),y:0})}),500),e.ballFalls(t);var n=h(50,600);s.a.Body.set(t,"position",{x:n,y:200}),s.a.Body.set(t,"isStatic",!0)}},i=function(t){"brick"===t.bodyB.label&&e.removeBody(t.bodyB)};return Object(r.useEffect)((function(){return e.addBody(t),s.a.Events.on(e.engine,"afterUpdate",n),s.a.Events.on(e.engine,"collisionStart",(function(e){return i(e.pairs[0])})),function(){s.a.Events.off(e.engine,"afterUpdate",n),s.a.Events.off(e.engine,"collisionStart",(function(e){return i(e.pairs[0])}))}}),[]),o.a.createElement(o.a.Fragment,null,o.a.createElement(y,{addBody:e.addBody}),o.a.createElement(f,{addBody:e.addBody,engine:e.engine,keys:e.keys,ball:t}))},b=n(5);n(22);function x(e){return(x="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function w(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function S(e,t){return(S=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function k(e,t){return!t||"object"!==x(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function C(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}function T(e){return(T=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var E=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&S(e,t)}(l,e);var t,n,r,i,a=(t=l,function(){var e,n=T(t);if(C()){var r=T(this).constructor;e=Reflect.construct(n,arguments,r)}else e=n.apply(this,arguments);return k(this,e)});function l(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,l),(t=a.call(this,e)).state={lives:5,gameover:!1},t.World=s.a.World,t.Render=s.a.Render,t.Engine=s.a.Engine,t.engine=t.Engine.create(),t.keyListener=new b.KeyListener,t.top=s.a.Bodies.rectangle(350,0,650,50,{isStatic:!0,restitution:.9}),t.left=s.a.Bodies.rectangle(0,300,50,600,{isStatic:!0,restitution:.9}),t.right=s.a.Bodies.rectangle(650,300,50,600,{isStatic:!0,restitution:.9}),t}return n=l,(r=[{key:"componentDidMount",value:function(){var e=this.Render.create({element:this.refs.worldEl,engine:this.engine,options:{width:650,height:600,wireframes:!1}});this.World.add(this.engine.world,[this.top,this.left,this.right]),this.keyListener.subscribe([this.keyListener.LEFT,this.keyListener.RIGHT,this.keyListener.UP]),this.Engine.run(this.engine),this.Render.run(e)}},{key:"componentWillUnmount",value:function(){this.keyListener.unsubscribe([this.keyListener.LEFT,this.keyListener.RIGHT,this.keyListener.UP])}},{key:"addBody",value:function(e){"object"===x(e)?this.World.add(this.engine.world,e):this.World.add(this.engine.world,[e])}},{key:"removeBody",value:function(e){"object"===x(e)?this.World.remove(this.engine.world,e):this.World.remove(this.engine.world,[e])}},{key:"ballFalls",value:function(e){this.state.lives>0?this.setState({lives:this.state.lives-1}):(this.removeBody(e),this.setState({gameover:!0}))}},{key:"playAgain",value:function(){location.reload()}},{key:"render",value:function(){return o.a.createElement("div",{ref:"worldEl"},o.a.createElement("div",{className:"score"},"Lives: ",o.a.createElement("span",null,this.state.lives)),this.state.gameover&&o.a.createElement("div",{className:"gameOver"},o.a.createElement("p",null,"GAME OVER"),o.a.createElement("button",{onClick:this.playAgain.bind(this)},"Play")),o.a.createElement(g,{addBody:this.addBody.bind(this),engine:this.engine,keys:this.keyListener,removeBody:this.removeBody.bind(this),ballFalls:this.ballFalls.bind(this),lives:this.state.lives}))}}])&&w(n.prototype,r),i&&w(n,i),l}(o.a.Component);t.default=E;a.a.render(o.a.createElement(E,null),document.getElementById("app"))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,